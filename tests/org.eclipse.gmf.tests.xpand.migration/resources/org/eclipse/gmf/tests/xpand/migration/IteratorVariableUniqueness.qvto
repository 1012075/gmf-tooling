modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";

library IteratorVariableUniqueness;

helper ecore::EClassifier::getName() : String {
	return self.name
}

helper ecore::EClassifier::getName(parameter : Collection(OclAny)) : String {
	return self.name
}

helper ecore::EPackage::getClassifierCollection() : Collection(ecore::EClassifier) {
	return self.eClassifiers
}

helper Sequence(ecore::EClassifier)::extension_ParameterDefinition(it : Boolean) : Sequence(String) { 
	return self->collect(it_1 | it_1.getName()) 
}

helper Sequence(ecore::EPackage)::extension_OuterCollectionExpression() : Sequence(String) {
	return self->collect(it | it.eClassifiers->collect(it_1 | it_1.getName())) 
} 

helper Sequence(ecore::EClassifier)::extension_InnerCollectionExpression(parameter : Sequence(ecore::EClassifier)) : Sequence(String) {
	return self->collect(it_1 | it_1.getName(parameter->select(it | it.instanceClassName = 'Name')))
}

helper Sequence(ecore::EClassifier)::extension_OuterLetExpression() : Sequence(String) {
	return let it : Boolean = true in self->collect(it_1 | it_1.getName()) 
}

helper Sequence(ecore::EClassifier)::extension_InnerLetExpression(parameter : Sequence(ecore::EClassifier)) : Sequence(String) {
	return self->collect(it_1 | it_1.getName(let it : Sequence(ecore::EClassifier) = parameter in it))
}

helper Sequence(ecore::EClassifier)::extension_InnerCollectionOperationCollectionTarget(parameter1 : Collection(ecore::EClassifier), parameter2 : ecore::EClassifier) : Sequence(String) {
	return self->collect(it | it.getName(parameter1->collect(it_1 | it_1)->including(parameter2)))
}

helper Sequence(ecore::EClassifier)::extension_InnerCollectionOperationCollectionParameter(parameter1 : Sequence(ecore::EClassifier), parameter2 : Collection(ecore::EClassifier)) : Sequence(String) {
	return self->collect(it | it.getName(parameter1->union(parameter2->collect(it_1 | it_1)->asSequence())))
}

helper Collection(String)::collectionOperationTarget_ParameterDefinition(additions : Sequence(String), it : Boolean) : Collection(OclAny) {
	return self->collect(it_1 | it_1)->union(additions->asBag())
}

helper Sequence(String)::collectionOperationParameter_ParameterDefinition(additions : Collection(String), it : Boolean) : Collection(OclAny) {
	return self->union(additions->collect(it_1 | it_1)->asSequence())
}

helper Sequence(ecore::EPackage)::collectionOperationTarget_OuterCollectionExpression(additions : Set(ecore::EClassifier)) : Sequence(OclAny) {
	return self->collect(it | it.getClassifierCollection()->collect(it_1 | it_1)->union(additions))
}

helper Sequence(ecore::EPackage)::collectionOperationParameter_OuterCollectionExpression(additions : Set(ecore::EClassifier)) : Sequence(OclAny) {
	return self->collect(it | additions->union(it.getClassifierCollection()->collect(it_1 | it_1)->asSet()))
}

helper Sequence(ecore::EPackage)::collectionOperationTarget_InnerCollectionExpression(eClassifiers : Collection(ecore::EClassifier)) : Collection(OclAny) {
	return eClassifiers->collect(it_1 | it_1)->asSet()->union(self->collect(it | it.eClassifiers)->flatten()->asSet())
}

helper Sequence(ecore::EPackage)::collectionOperationParameter_InnerCollectionExpression(eClassifiers : Collection(ecore::EClassifier)) : Collection(OclAny) {
	return self->collect(it | it.eClassifiers)->flatten()->asSet()->union(eClassifiers->collect(it_1 | it_1)->asSet())
}

helper Collection(ecore::EClassifier)::collectionOperationTargetParameter_OuterLetExpression(additions : Collection(ecore::EClassifier)) : Collection(OclAny) {
	return let it : Boolean = true in self->collect(it_2 | it_2)->asSet()->intersection(additions->collect(it_1 | it_1)->asSet())
}

helper Collection(ecore::EClassifier)::collectionOperationTargetParameter_InnerLetExpression(exceptions : Collection(ecore::EClassifier)) : Collection(OclAny) {
	return self->collect(it_2 | it_2)->asSet()->-(let it : Collection(ecore::EClassifier) = exceptions in it->collect(it_1 | it_1)->asSet())
}

helper Collection(ecore::EClassifier)::collectionOperationTarget_InnerImplicitExtensionCollect(ePackages : Collection(ecore::EPackage)) : Collection(OclAny) {
	return self->collect(it_1 | it_1)->union(ePackages->collect(it | it.getClassifierCollection())->asSequence()->asBag())
}

helper Collection(ecore::EClassifier)::collectionOperationParameter_InnerImplicitExtensionCollect(ePackages : Collection(ecore::EPackage)) : Collection(OclAny) {
	return ePackages->collect(it | it.getClassifierCollection())->asSequence()->union(self->collect(it_1 | it_1)->asSequence())
}