modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";
modeltype genModel_1 uses "http://www.eclipse.org/emf/2002/GenModel";
modeltype testModel uses "http://www.eclipse.org/gmf/2008/org.eclipse.gmf.tests.xpand.migration/testModel";

library FeatureCall;

helper ecore::EClass::featureCall() : String {
	return self.name
}

helper enumLiteralCall() : genModel_1::GenProviderKind {
	return genModel_1::GenProviderKind::Singleton
}

helper genModel_1::GenProviderKind::enumLiteralValueCall() : Boolean {
	return genModel_1::GenProviderKind::Singleton = self
}

helper genModel_1::GenProviderKind::enumLiteralLiteralCall() : Boolean {
	return genModel_1::GenProviderKind::Singleton = self
}

helper Sequence(ecore::EClass)::listParameterCall() : Sequence(ecore::EClass) {
	return self
}

helper Set(ecore::EClass)::setParameterCall() : Set(ecore::EClass) {
	return self
}

helper Collection(ecore::EClass)::collectionParameterCall() : Collection(ecore::EClass) {
	return self
}

helper testModel::Container::getSingletonChild() : testModel::Child {
	return self.singletonChild
}

helper testModel::Container::getSingletonChildConstrained() : testModel::Child {
	return self.singletonChildConstrained
}

helper testModel::Container::getOrderedChildren() : Sequence(testModel::Child) {
	return self.orderedChildren
}

helper testModel::Container::getUniqueChildren() : Set(testModel::Child) {
	return self.uniqueChildren
}

helper testModel::Container::getOrderedUniqueChildren() : Sequence(testModel::Child) {
	return self.orderedUniqueChildren->asSequence()
}

helper testModel::Container::getChildren() : Collection(testModel::Child) {
	return self.children
}

helper Sequence(testModel::Container)::getSingletonChildOfList() : Sequence(testModel::Child) {
	return self.singletonChild
}

helper Set(testModel::Container)::getSingletonChildOfSet() : Sequence(testModel::Child) {
	return self.singletonChild->asSequence()
}

helper Collection(testModel::Container)::getSingletonChildOfCollection() : Sequence(testModel::Child) {
	return self.singletonChild->asSequence()
}

helper Sequence(testModel::Container)::getSingletonChildConstrainedOfList() : Sequence(testModel::Child) {
	return self.singletonChildConstrained
}

helper Set(testModel::Container)::getSingletonChildConstrainedOfSet() : Sequence(testModel::Child) {
	return self.singletonChildConstrained->asSequence()
}

helper Collection(testModel::Container)::getSingletonChildConstrainedOfCollection() : Sequence(testModel::Child) {
	return self.singletonChildConstrained->asSequence()
}

helper Sequence(testModel::Container)::getOrderedChildrenOfList() : Sequence(testModel::Child) {
	return self.orderedChildren
}

helper Set(testModel::Container)::getOrderedChildrenOfSet() : Sequence(testModel::Child) {
	return self.orderedChildren->asSequence()
}

helper Collection(testModel::Container)::getOrderedChildrenOfCollection() : Sequence(testModel::Child) {
	return self.orderedChildren->asSequence()
}

helper Sequence(testModel::Container)::getUniqueChildrenOfList() : Sequence(testModel::Child) {
	return self.uniqueChildren
}

helper Set(testModel::Container)::getUniqueChildrenOfSet() : Sequence(testModel::Child) {
	return self.uniqueChildren->asSequence()
}

helper Collection(testModel::Container)::getUniqueChildrenOfCollection() : Sequence(testModel::Child) {
	return self.uniqueChildren->asSequence()
}

helper Sequence(testModel::Container)::getOrderedUniqueChildrenOfList() : Sequence(testModel::Child) {
	return self.orderedUniqueChildren
}

helper Set(testModel::Container)::getOrderedUniqueChildrenOfSet() : Sequence(testModel::Child) {
	return self.orderedUniqueChildren->asSequence()
}

helper Collection(testModel::Container)::getOrderedUniqueChildrenOfCollection() : Sequence(testModel::Child) {
	return self.orderedUniqueChildren->asSequence()
}

helper Sequence(testModel::Container)::getChildrenOfList() : Sequence(testModel::Child) {
	return self.children
}

helper Set(testModel::Container)::getChildrenOfSet() : Sequence(testModel::Child) {
	return self.children->asSequence()
}

helper Collection(testModel::Container)::getChildrenOfCollection() : Sequence(testModel::Child) {
	return self.children->asSequence()
}
