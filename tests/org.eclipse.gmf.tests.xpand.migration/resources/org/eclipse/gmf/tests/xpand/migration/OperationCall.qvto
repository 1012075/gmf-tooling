modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";
modeltype testModel uses "http://www.eclipse.org/gmf/2008/org.eclipse.gmf.tests.xpand.migration/testModel";

library OperationCall;

helper ecore::EClass::operationCall(subType : ecore::EClass) : Boolean {
	return self.isSuperTypeOf(subType)
}

helper ecore::EFactory::operationWithSeveralParameters(dataType : ecore::EDataType, stringValue : String) : OclAny {
	return self.createFromString(dataType, stringValue)
}

helper ecore::EPackage::operationWithExpressionAsAParameter(param : String) : ecore::EClassifier {
	return self.getEClassifier(param.firstToUpper())
}

helper ecore::EClass::anotherExtensionCall(subType : ecore::EClass) : Boolean {
	return self.operationCall(subType)
}

helper ecore::EClass::anotherExtensionContextCall(subType : ecore::EClass) : Boolean {
	return self.operationCall(subType)
}

helper testModel::Container::getSingletonChildOp() : testModel::Child {
	return self.singletonChildOp()
}

helper testModel::Container::getSingletonChildConstrainedOp() : testModel::Child {
	return self.singletonChildConstrainedOp()
}

helper testModel::Container::getOrderedChildrenOp() : Sequence(testModel::Child) {
	return self.orderedChildrenOp()
}

helper testModel::Container::getUniqueChildrenOp() : Set(testModel::Child) {
	return self.uniqueChildrenOp()
}

helper testModel::Container::getOrderedUniqueChildrenOp() : Sequence(testModel::Child) {
	return self.orderedUniqueChildrenOp()->asSequence()
}

helper testModel::Container::getChildrenOp() : Collection(testModel::Child) {
	return self.childrenOp()
}

helper Sequence(testModel::Container)::getSingletonChildOpOfList() : Sequence(testModel::Child) {
	return self.singletonChildOp()
}

helper Set(testModel::Container)::getSingletonChildOpOfSet() : Sequence(testModel::Child) {
	return self.singletonChildOp()->asSequence()
}

helper Collection(testModel::Container)::getSingletonChildOpOfCollection() : Sequence(testModel::Child) {
	return self.singletonChildOp()->asSequence()
}

helper Sequence(testModel::Container)::getSingletonChildConstrainedOpOfList() : Sequence(testModel::Child) {
	return self.singletonChildConstrainedOp()
}

helper Set(testModel::Container)::getSingletonChildConstrainedOpOfSet() : Sequence(testModel::Child) {
	return self.singletonChildConstrainedOp()->asSequence()
}

helper Collection(testModel::Container)::getSingletonChildConstrainedOpOfCollection() : Sequence(testModel::Child) {
	return self.singletonChildConstrainedOp()->asSequence()
}

helper Sequence(testModel::Container)::getOrderedChildrenOpOfList() : Sequence(testModel::Child) {
	return self.orderedChildrenOp()
}

helper Sequence(testModel::Container)::getOrderedChildrenExtOfList() : Sequence(testModel::Child) {
	return self->collect(it | it.getOrderedChildrenExt())
}

helper Set(testModel::Container)::getOrderedChildrenOpOfSet() : Sequence(testModel::Child) {
	return self.orderedChildrenOp()->asSequence()
}

helper Set(testModel::Container)::getOrderedChildrenExtOfSet() : Sequence(testModel::Child) {
	return self->collect(it | it.getOrderedChildrenExt())->asSequence()
}

helper Collection(testModel::Container)::getOrderedChildrenOpOfCollection() : Sequence(testModel::Child) {
	return self.orderedChildrenOp()->asSequence()
}

helper Collection(testModel::Container)::getOrderedChildrenExtOfCollection() : Sequence(testModel::Child) {
	return self->collect(it | it.getOrderedChildrenExt())->asSequence()
}

helper Sequence(testModel::Container)::getUniqueChildrenOpOfList() : Sequence(testModel::Child) {
	return self.uniqueChildrenOp()
}

helper Sequence(testModel::Container)::getUniqueChildrenExtOfList() : Sequence(testModel::Child) {
	return self->collect(it | it.getUniqueChildrenExt())
}

helper Set(testModel::Container)::getUniqueChildrenOpOfSet() : Sequence(testModel::Child) {
	return self.uniqueChildrenOp()->asSequence()
}

helper Set(testModel::Container)::getUniqueChildrenExtOfSet() : Sequence(testModel::Child) {
	return self->collect(it | it.getUniqueChildrenExt())->asSequence()
}

helper Collection(testModel::Container)::getUniqueChildrenOpOfCollection() : Sequence(testModel::Child) {
	return self.uniqueChildrenOp()->asSequence()
}

helper Collection(testModel::Container)::getUniqueChildrenExtOfCollection() : Sequence(testModel::Child) {
	return self->collect(it | it.getUniqueChildrenExt())->asSequence()
}

helper Sequence(testModel::Container)::getOrderedUniqueChildrenOpOfList() : Sequence(testModel::Child) {
	return self.orderedUniqueChildrenOp()
}

helper Set(testModel::Container)::getOrderedUniqueChildrenOpOfSet() : Sequence(testModel::Child) {
	return self.orderedUniqueChildrenOp()->asSequence()
}

helper Collection(testModel::Container)::getOrderedUniqueChildrenOpOfCollection() : Sequence(testModel::Child) {
	return self.orderedUniqueChildrenOp()->asSequence()
}

helper Sequence(testModel::Container)::getChildrenOpOfList() : Sequence(testModel::Child) {
	return self.childrenOp()
}

helper Sequence(testModel::Container)::getChildrenExtOfList(param2 : Boolean) : Sequence(testModel::Child) {
	return self->collect(it_1 | it_1.getChildrenExt(let it : Boolean = param2 in it))
}

helper Set(testModel::Container)::getChildrenOpOfSet() : Sequence(testModel::Child) {
	return self.childrenOp()->asSequence()
}

helper Set(testModel::Container)::getChildrenExtOfSet(it : testModel::Container) : Sequence(testModel::Child) {
	return self->collect(it_1 | it_1.getChildrenExt(it.it))->asSequence()
}

helper Collection(testModel::Container)::getChildrenOpOfCollection() : Sequence(testModel::Child) {
	return self.childrenOp()->asSequence()
}

helper Collection(testModel::Container)::getChildrenExtOfCollection() : Sequence(testModel::Child) {
	return self->collect(it_1 | it_1.getChildrenExt(self->collect(it | it)->asSequence()->first().oclAsType(testModel::Container).it))->asSequence()
}

helper testModel::Container::getOrderedChildrenExt() : Sequence(testModel::Child) { 
	return self.orderedChildrenOp()
}

helper testModel::Container::getUniqueChildrenExt() : Set(testModel::Child) {
	return self.uniqueChildrenOp()
}

helper testModel::Container::getChildrenExt(secondParam : Boolean) : Collection(testModel::Child) {
	return self.childrenOp()
}

helper Sequence(testModel::Container)::innerImplicitCollect4Extensions() : Sequence(testModel::Child) {
	return self->collect(it | it.outerExtension(self->collect(it_1 | it_1.innerExtension())))
}

helper testModel::Container::innerExtension() : testModel::Container {
	return self
}

helper testModel::Container::outerExtension(param2 : Sequence(testModel::Container)) : Sequence(testModel::Child) {
	return self.orderedChildrenOp()
}