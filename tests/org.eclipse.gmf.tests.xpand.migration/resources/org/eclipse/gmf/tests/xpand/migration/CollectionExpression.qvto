modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";

library CollectionExpression;

helper collectCall(ePackage : ecore::EPackage) : Sequence(String) {
	return ePackage.eClassifiers->collect(_self | _self.name)
}

helper collectCallImplicitIterator(ePackage : ecore::EPackage) : Sequence(String) {
	return ePackage.eClassifiers->collect(element | element.name)
}

helper selectCall(ePackage : ecore::EPackage, javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return ePackage.eClassifiers->select(_query | _query.isInstance(javaObject))->asSequence()
}

helper selectCallImplicitIterator(ePackage : ecore::EPackage, javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return ePackage.eClassifiers->select(element | element.isInstance(javaObject))->asSequence()
}

helper rejectCall(ePackage : ecore::EPackage, javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return ePackage.eClassifiers->reject(_helper | _helper.isInstance(javaObject))->asSequence()
}

helper rejectCallImplicitIterator(ePackage : ecore::EPackage, javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return ePackage.eClassifiers->reject(element | element.isInstance(javaObject))->asSequence()
}

helper existsCall(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return ePackage.eClassifiers->exists(_inout | _inout.isInstance(javaObject))
}

helper existsCallImplicitIterator(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return ePackage.eClassifiers->exists(element | element.isInstance(javaObject))
}

helper notExistsCall(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return not ePackage.eClassifiers->exists(_when | _when.isInstance(javaObject))
}

helper notExistsCallImplicitIterator(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return not (not ePackage.eClassifiers->exists(element | element.isInstance(javaObject)))
}

helper forAllCall(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return ePackage.eClassifiers->forAll(_var | _var.isInstance(javaObject))
}

helper forAllCallImplicitIterator(ePackage : ecore::EPackage, javaObject : OclAny) : Boolean {
	return ePackage.eClassifiers->forAll(element | element.isInstance(javaObject))
}

helper collectOnSet(eClassifiers : Set(ecore::EClassifier)) : Collection(String) {
	return eClassifiers->collect(cl | cl.name)->asSet()
}

helper collectOnList(eClassifiers : Sequence(ecore::EClassifier)) : Collection(String) {
	return eClassifiers->collect(cl | cl.name)
}

helper collectOnCollection(eClassifiers : Collection(ecore::EClassifier)) : Collection(String) {
	return eClassifiers->collect(cl | cl.name)
}

helper selectOnSet(eClassifiers : Set(ecore::EClassifier), javaObject : OclAny) : Set(ecore::EClassifier) {
	return eClassifiers->select(cl | cl.isInstance(javaObject))
}

helper selectOnList(eClassifiers : Sequence(ecore::EClassifier), javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return eClassifiers->select(cl | cl.isInstance(javaObject))
}

helper selectOnCollection(eClassifiers : Collection(ecore::EClassifier), javaObject : OclAny) : Collection(ecore::EClassifier) {
	return eClassifiers->select(cl | cl.isInstance(javaObject))
}

helper rejectOnSet(eClassifiers : Set(ecore::EClassifier), javaObject : OclAny) : Set(ecore::EClassifier) {
	return eClassifiers->reject(cl | cl.isInstance(javaObject))
}

helper rejectOnList(eClassifiers : Sequence(ecore::EClassifier), javaObject : OclAny) : Sequence(ecore::EClassifier) {
	return eClassifiers->reject(cl | cl.isInstance(javaObject))
}

helper rejectOnCollection(eClassifiers : Collection(ecore::EClassifier), javaObject : OclAny) : Collection(ecore::EClassifier) {
	return eClassifiers->reject(cl | cl.isInstance(javaObject))
}