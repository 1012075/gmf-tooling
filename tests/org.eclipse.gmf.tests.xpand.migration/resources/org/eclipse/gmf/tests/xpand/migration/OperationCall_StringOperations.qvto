import library XpandStringOperations;
import library XpandOclAnyOperations;

library OperationCall_StringOperations;

helper String::addStringToString(parameter : String) : String {
	return self.concat(parameter)
}

helper String::addObjectToString(parameter : OclAny) : String {
	return self.concat(parameter.repr())
}

helper String::stringToFirstUpper() : String {
	return self.firstToUpper()
}

helper String::stringToFirstLower() : String {
	return self.xpandToFirstLower()
}

helper String::stringToCharList() : Sequence(String) {
	return self.xpandToCharList()
}

helper String::stringStartsWith(parameter : String) : Boolean {
	return self.xpandStartsWith(parameter)
}

helper String::stringEndsWith(parameter : String) : Boolean {
	return self.xpandEndsWith(parameter)
}

helper String::stringSubString(startIndex : Integer, endIndex : Integer) : String {
	return self.substring(1 + startIndex, endIndex)
}

helper String::stringSubString(startIndex : Integer) : String {
	return self.xpandSubstring(startIndex)
}

helper String::stringToUpperCase() : String {
	return self.toUpper()
}

helper String::stringToLowerCase() : String {
	return self.toLower()
}

helper String::stringReplaceAll(pattern : String, replacement : String) : String {
	return self.xpandReplaceAll(pattern, replacement)
}

helper String::stringReplaceFirst(pattern : String, replacement : String) : String {
	return self.xpandReplaceFirst(pattern, replacement)
}

helper String::stringSplit(parameter : String) : Sequence(String) {
	return self.xpandSplit(parameter)
}

helper String::stringMatches(parameter : String) : Boolean {
	return self.xpandMatches(parameter)
}

helper String::stringTrim() : String {
	return self.trim()
}

helper String::stringLength() : Integer {
	return self.xpandLength()
}

helper String::stringCompareTo(another : OclAny) : Boolean {
	return self.xpandCompareTo(another)
}

helper String::stringToString() : String {
	return self.repr()
}

helper String::stringEQ(another : OclAny) : Boolean {
	return self = another
}

helper String::stringNotEQ(another : OclAny) : Boolean {
	return self <> another
}
