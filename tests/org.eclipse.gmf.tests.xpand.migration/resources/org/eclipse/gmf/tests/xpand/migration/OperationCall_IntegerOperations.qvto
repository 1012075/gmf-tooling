import library XpandIntegerOperations;
import library XpandOclAnyOperations;

library OperationCall_IntegerOperations;

helper Integer::integerPlusInteger(parameter : Integer) : Integer  {
	return self + parameter
}

helper Integer::integerPlusDouble(parameter : Real) : Real  {
	return self + parameter
}

helper Integer::integerMinusInteger(parameter : Integer) : Integer  {
	return self - parameter
}

helper Integer::integerMinusDouble(parameter : Real) : Real  {
	return self - parameter
}

helper Integer::integerMultInteger(parameter : Integer) : Integer  {
	return self * parameter
}

helper Integer::integerMultDouble(parameter : Real) : Real  {
	return self * parameter
}

helper Integer::integerDivInteger(parameter : Integer) : Integer  {
	return self.div(parameter)
}

helper Integer::integerDivDouble(parameter : Real) : Real  {
	return self / parameter
}

helper Integer::integerUnaryMinus() : Integer  {
	return -self
}

helper Integer::integerGOE(parameter : Integer) : Boolean  {
	return self >= parameter
}

helper Integer::integerLOE(parameter : Integer) : Boolean  {
	return self <= parameter
}

helper Integer::integerLess(parameter : Integer) : Boolean  {
	return self < parameter
}

helper Integer::integerGreater(parameter : Integer) : Boolean  {
	return self > parameter
}

helper Integer::integerUpTo(parameter : Integer) : Sequence(Integer) {
	return self.xpandUpTo(parameter)
}

helper Integer::integerCompareTo(another : OclAny) : Boolean {
	return self.xpandCompareTo(another)
}

helper Integer::integerToString() : String {
	return self.repr()
}

helper Integer::integerEQ(another : OclAny) : Boolean {
	return self = another
}

helper Integer::integerNotEQ(another : OclAny) : Boolean {
	return self <> another
}