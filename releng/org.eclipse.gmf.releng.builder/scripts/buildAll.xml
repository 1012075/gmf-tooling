<?xml version="1.0"?>
<project default="main" basedir=".">

	<target name="init">
		<delete file="label.properties" />
		<ant antfile="build.xml" target="create.label.properties" />
		<!-- The tags.properties file contains tags for map files containing 'stable' and 'integration' config -->
		<property file="tags.properties"/>
	</target>
	
	<target name="checkArgs" unless="stable.target">
		<echo message="tags.properties file is required." />
		<fail/>
	</target>

	<target name="main" depends="init,checkArgs">
		<!-- Note: for now, overriding calculated qualifier for continuous and nightly builds, 
		     as these builds are not tagged as are integration and stable builds. -->
		<property file="label.properties"/>
		<ant antfile="build.xml" target="cleanLocal"/>
		<echo message="Building runtime..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
			<property name="wipe" value="true" />
			<property name="copyRuntime" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="skipJavadoc" value="true"/>
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building examples..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building tests..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<ant antfile="build.xml" target="publishLocal"/>
	</target>

	<target name="nightly" depends="init,checkArgs">
		<!-- Note: for now, overriding calculated qualifier for continuous and nightly builds,
		     as these builds are not tagged as are integration and stable builds. -->
		<property file="label.properties"/>
		<ant antfile="build.xml" target="cleanLocal"/>
		<echo message="Building runtime..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
			<property name="wipe" value="true" />
			<property name="copyRuntime" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building examples..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<echo message="Building tests..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="forceContextQualifier" value="${buildId}-${time}" />
		</ant>
		<ant antfile="build.xml" target="publishLocal"/>
		<antcall target="publish" />
		<property file="label.properties" />
		<property file="build.properties" />
		<!-- Check for successful publish, then push to download server -->
		<condition property="upload">
			<and>
				<available file="${buildRoot}/artifacts/${buildLabel}/testResults.php"/>
				<isset property="ftpUser"/>
				<isset property="ftpPassword"/>
				<not>
					<isset property="skipUpload"/>
				</not>
			</and>
		</condition>
		<antcall target="push" />		
		<antcall target="statCVS" />
	</target>
	
	<target name="integration" depends="init,checkArgs">
		<ant antfile="build.xml" target="cleanLocal"/>
		<echo message="Building runtime..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${integration.maps}" />
			<property name="targetConfigTag" value="${integration.target}" />
		</ant>
		<echo message="Building sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
			<property name="wipe" value="true" />
			<property name="copyRuntime" value="true" />
			<property name="mapsCheckoutTag" value="${integration.maps}" />
			<property name="targetConfigTag" value="${integration.target}" />
		</ant>
		<echo message="Building examples..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${integration.maps}" />
			<property name="targetConfigTag" value="${integration.target}" />
		</ant>
		<echo message="Building tests..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${integration.maps}" />
			<property name="targetConfigTag" value="${integration.target}" />
		</ant>
		<ant antfile="build.xml" target="publishLocal"/>
		<antcall target="publish" />
		<property file="label.properties" />
		<property file="build.properties" />
		<!-- Check for successful publish, then push to download server -->
		<condition property="upload">
			<and>
				<available file="${buildRoot}/artifacts/${buildLabel}/testResults.php"/>
				<isset property="ftpUser"/>
				<isset property="ftpPassword"/>
				<not>
					<isset property="skipUpload"/>
				</not>
			</and>
		</condition>
		<antcall target="push" />
		<antcall target="pushUpdates" />
	</target>
	
	<target name="stable" depends="init,checkArgs">
		<ant antfile="build.xml" target="cleanLocal"/>
		<property name="buildType" value="S" />
		<property name="buildId" value="${stable.maps}" />
		<echo message="Building runtime..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
		</ant>
		<echo message="Building sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
			<property name="wipe" value="true" />
			<property name="copyRuntime" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
		</ant>
		<echo message="Building examples..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
		</ant>
		<echo message="Building tests..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
		</ant>
		<ant antfile="build.xml" target="publishLocal"/>
		<antcall target="publish" />
		<property file="label.properties" />
		<property file="build.properties" />
		<!-- Check for successful publish, then push to download server -->
		<condition property="upload">
			<and>
				<available file="${buildRoot}/artifacts/${buildLabel}/testResults.php"/>
				<isset property="ftpUser"/>
				<isset property="ftpPassword"/>
				<not>
					<isset property="skipUpload"/>
				</not>
			</and>
		</condition>
		<antcall target="push" />
		<antcall target="pushUpdates" />
	</target>

	<target name="publish" depends="">
		<!-- Fake a component, use sdk -->
		<property name="component" value="sdk" />
		<property file="build.properties" />
		<property file="label.properties" />
		<property file="${buildRoot}/sdk/maps/org.eclipse.gmf.releng.target/build.cfg" />
		<property name="publish.xml" value="../../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/publish.xml" />

		<property name="indexFileName" value="index.php" />
		<property name="result" value="${buildRoot}/artifacts/${buildLabel}" />

		<ant antfile="${publish.xml}" dir="${basedir}">
			<property name="dropTokenList" value="%sdk%,%runtime%,%examples%,%tests%" />
			<property name="isBuildTested" value="true" />
		</ant>

		<!-- Copy the directory.txt file to destination for download page -->
		<copy file="${buildRoot}/sdk/directory.txt" todir="${artifacts}/${buildLabel}" />

		<replace file="${result}/${indexFileName}">
			<!--  Insert url for supported eclipse drop-->
			<replacefilter token="@eclipseVersion@" value="${eclipseVersion}" />
			<replacefilter token="@eclipseBuildId@" value="${eclipseBuildId}" />
			<replacefilter token="@eclipseBaseURL@" value="${eclipseBaseURL}" />
			<replacefilter token="@eclipseDownloadPage@" value="${eclipseDownloadPage}" />

			<!--  Insert url for supported EMF -->
			<replacefilter token="@emfVersion@" value="${emfVersion}" />
			<replacefilter token="@emfBuildId@" value="${emfBuildId}" />
			<replacefilter token="@emfUpdateSite@" value="${emfUpdateSite}" />
			<replacefilter token="@emfDownloadPage@" value="${emfDownloadPage}" />
			
			<replacefilter token="@emfOCLBuildId@" value="${emfOCLBuildId}" />
			<replacefilter token="@emfOCLDownloadPage@" value="${emfOCLDownloadPage}" />
			<replacefilter token="@emfOCLUpdateSite@" value="${emfOCLUpdateSite}" />
			
			<replacefilter token="@emfValidationBuildId@" value="${emfValidationBuildId}" />
			<replacefilter token="@emfValidationDownloadPage@" value="${emfValidationDownloadPage}" />
			<replacefilter token="@emfValidationUpdateSite@" value="${emfValidationUpdateSite}" />

			<replacefilter token="@emfQueryBuildId@" value="${emfQueryBuildId}" />
			<replacefilter token="@emfQueryDownloadPage@" value="${emfQueryDownloadPage}" />
			<replacefilter token="@emfQueryUpdateSite@" value="${emfQueryUpdateSite}" />
			
			<replacefilter token="@emfTransactionBuildId@" value="${emfTransactionBuildId}" />
			<replacefilter token="@emfTransactionDownloadPage@" value="${emfTransactionDownloadPage}" />
			<replacefilter token="@emfTransactionUpdateSite@" value="${emfTransactionUpdateSite}" />

			<!--  Insert url for supported GEF -->
			<replacefilter token="@gefVersion@" value="${gefVersion}" />
			<replacefilter token="@gefUpdateSite@" value="${gefUpdateSite}" />
			<replacefilter token="@gefDownloadPage@" value="${gefDownloadPage}" />

			<!--  Insert url for supported UML2 -->
			<replacefilter token="@uml2Version@" value="${uml2Version}" />
			<replacefilter token="@uml2UpdateSite@" value="${uml2UpdateSite}" />
			<replacefilter token="@uml2DownloadPage@" value="${uml2DownloadPage}" />

			<!--  Insert url for supported ANTLR -->
			<replacefilter token="@antlrURL@" value="${antlrURL}" />
		</replace>

		<!-- Replace the base variables to be nothing for bld-index, and the full reroute url for the main index file. -->
		<replace file="${result}/${indexFileName}" token="@base@" value="http://www.eclipse.org/downloads/download.php?file=/technology/gmf/downloads/drops/${buildLabel}/" />
		<!-- Correct the slashes for the compilation logs on Windows -->
		<replace file="${result}/testResults.php" token="\" value="/" />
		<!-- Copy update jars as well -->
		<copy todir="${buildRoot}/artifacts/updates/${buildLabel}/features">
			<fileset dir="${buildUpdateSitePath}/features" />
		</copy>
		<copy todir="${buildRoot}/artifacts/updates/${buildLabel}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins" />
		</copy>
	</target>
	
	<target name="push" if="upload">
		<echo message="SCP to: ${remoteDirectory}/downloads/drops/${buildLabel}"/>	
	
		<zip destfile="${buildRoot}/artifacts/${buildLabel}/logs.zip">
	    	<zipfileset dir="${buildRoot}/artifacts/${buildLabel}/compilelogs" prefix="compilelogs"/>
	    	<zipfileset dir="${buildRoot}/artifacts/${buildLabel}/buildnotes" prefix="buildnotes"/>
	    	<zipfileset dir="${buildRoot}/artifacts/${buildLabel}/testresults" prefix="testresults"/>
	  	</zip>
   
		<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="mkdir ${remoteDirectory}/downloads/drops/${buildLabel}"/>

		<scp trust="yes" todir="${ftpUser}:${ftpPassword}@download1.eclipse.org:${remoteDirectory}/downloads/drops/${buildLabel}">
	    <fileset dir="${buildRoot}/artifacts/${buildLabel}">
	    	<include name="*.php"/>
	    	<include name="*.gif"/>
	    	<include name="files.count"/>
	    	<include name="*.txt"/>
	    	<include name="*.zip"/>
	    </fileset>
	  	</scp>
  
	  	<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="unzip ${remoteDirectory}/downloads/drops/${buildLabel}/logs.zip -d ${remoteDirectory}/downloads/drops/${buildLabel}"/>
	  	<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="rm ${remoteDirectory}/downloads/drops/${buildLabel}/logs.zip"/>
		<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="chmod -R 775 ${remoteDirectory}/downloads/drops/${buildLabel}"/>
	</target>

	<target name="pushUpdates" if="upload">
		<echo message="Updating update site..."/>
	  	<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="rm -f ${remoteDirectory}/update-site/features/*.jar"/>
	  	<sshexec trust="yes" host="download1.eclipse.org" username="${ftpUser}" password="${ftpPassword}" command="rm -f ${remoteDirectory}/update-site/plugins/*.jar"/>
  
	  	<scp trust="yes" todir="${ftpUser}:${ftpPassword}@download1.eclipse.org:${remoteDirectory}/update-site/features">
	    	<fileset dir="${buildRoot}/artifacts/updates/${buildLabel}/features">
	    		<include name="*.jar"/>
	    	</fileset>
	  	</scp>
	  	<scp trust="yes" todir="${ftpUser}:${ftpPassword}@download1.eclipse.org:${remoteDirectory}/update-site/plugins">
	    	<fileset dir="${buildRoot}/artifacts/updates/${buildLabel}/plugins">
	    		<include name="*.jar"/>
	    	</fileset>
	  	</scp>
	</target>
	
	<target name="statCVS" if="statCVShome">
		<cvs dest="${checkoutDirectory}/org.eclipse.gmf" command="log" output="${checkoutDirectory}/logfile.log" />
		<java jar="${statCVShome}/statcvs.jar" dir="${statCVSpublish}" fork="true" failonerror="true" maxmemory="1024m">
			<arg value="${checkoutDirectory}/logfile.log" />
			<arg value="${checkoutDirectory}/org.eclipse.gmf" />
		</java>
		<copy file="${scripts}/css/statcvs.css" todir="${statCVSpublish}" overwrite="true" />
	</target>

</project>