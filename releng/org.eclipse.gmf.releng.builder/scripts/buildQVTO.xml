<?xml version="1.0"?>
<project default="main" basedir=".">
	
	<import file="build-common.xml"/>

	<target name="init">		
		<tstamp/>
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="C" />	
		<property name="buildId" value="${buildType}${date}" />
		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}-${buildId}-${timestamp}" />
	</target>
	
	<target name="checkArgs" unless="stable.target">
		<echo message="tags.properties file is required." />
		<fail/>
	</target>
	
	<target name="main" depends="init,checkArgs">
		<!-- Note: for now, overriding calculated qualifier for continuous and nightly builds, 
		     as these builds are not tagged as are integration and stable builds. -->
		<!-- Delete all previous continuous builds -->
		<antcall target="cleanupArtifacts"/>
		<antcall target="cc.cleanup"/>
		<echo message="Building qvto sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="qvto-sdk" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="componentsTag" value="${stable.components}" />
		</ant>
		<antcall target="cc.publish"/>
	</target>

	<target name="nightly" depends="init,checkArgs">
		<!-- Note: for now, overriding calculated qualifier for continuous and nightly builds,
		     as these builds are not tagged as are integration and stable builds. -->
		<antcall target="cc.cleanup"/>
		<echo message="Building qvto sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="qvto-sdk" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="componentsTag" value="${stable.components}" />
		</ant>
		<antcall target="cc.publish"/>
		<antcall target="publish" />
		<ant antfile="deploy.xml" target="deploy.zips" />		
		<antcall target="statCVS" />
	</target>
	
	<target name="integration" depends="init,checkArgs">
		<antcall target="cc.cleanup"/>
		<echo message="Building qvto sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="qvto-sdk" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${integration.maps}" />
			<property name="targetConfigTag" value="${integration.target}" />
			<property name="componentsTag" value="${integration.components}" />
		</ant>
		<antcall target="cc.publish"/>
		<antcall target="publish" />
		<ant antfile="deploy.xml" target="deploy.zips" />		
		<ant antfile="deploy.xml" target="deploy.updates.interim" />		
	</target>
	
	<target name="stable" depends="init,checkArgs">
<!-- don't load label.properties to make this functioning
		<property name="buildType" value="S" />
		<property name="buildId" value="${stable.maps}" />
-->
		<antcall target="cc.cleanup"/>
		<echo message="Building qvto-sdk..." />
		<ant antfile="build.xml" target="main">
			<property name="component" value="qvto-sdk" />
			<property name="cleanBase" value="true" />
			<property name="wipe" value="true" />
			<property name="mapsCheckoutTag" value="${stable.maps}" />
			<property name="targetConfigTag" value="${stable.target}" />
			<property name="componentsTag" value="${stable.components}" />
		</ant>
		<antcall target="cc.publish"/>
		<antcall target="publish" />
		<!-- Removing auto-deployment of stable builds - better do deploy them manually
		<ant antfile="deploy.xml" target="deploy.zips" />		
		<ant antfile="deploy.xml" target="deploy.updates" />		
		-->
	</target>

	<target name="publish" depends="init">
		<!-- Fake a component, use sdk -->
		<property name="component" value="sdk" />
		<property name="buildDirectory" value="${buildRoot}/${component}"/>
		<property file="${buildRoot}/sdk/maps/org.eclipse.gmf.releng.target/base.cfg" />
		<property name="publish.xml" value="../../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/publish.xml" />

		<property name="indexFileName" value="index.php" />
		<property name="result" value="${artifacts}/drops/${buildLabel}" />

		<ant antfile="${publish.xml}" dir="${basedir}">
			<property name="dropTemplateFileName" value="${basedir}/templateFiles/index.php.template" />
			<property name="platformIdentifierToken" value="%platform%"/>
			<property name="platformSpecificTemplateList" value=""/>
			<property name="dropTokenList" value="%sdk%,%sdk-experimental%,%runtime%,%examples%,%examples-pde%,%tests%" />
			<property name="isBuildTested" value="true" />
		</ant>

		<!-- Copy the directory.txt file to destination for download page -->
		<copy file="${buildRoot}/sdk/directory.txt" todir="${artifacts}/drops/${buildLabel}" />

		<replace file="${result}/${indexFileName}">
			<!-- GMF Base download page -->
			<replacefilter token="@gmfBaseDownloadPage@" value="${gmfBaseDownloadPage}" />
			
			<!--  Insert url for supported eclipse drop-->
			<replacefilter token="@eclipseVersion@" value="${eclipseVersion}" />
			<replacefilter token="@eclipseBuildId@" value="${eclipseBuildId}" />
			<replacefilter token="@eclipseBaseURL@" value="${eclipseBaseURL}" />
			<replacefilter token="@eclipseDownloadPage@" value="${eclipseDownloadPage}" />

			<!--  Insert url for supported EMF etc -->
			<replacefilter token="@emfUpdateVersion@" value="${emfUpdateVersion}" />
			<replacefilter token="@emfQtvAllUpdateVersion@" value="${emfQtvAllUpdateVersion}" />
			<replacefilter token="@emfUpdateSite@" value="${emfUpdateSite}" />
			
			<replacefilter token="@oclUpdateVersion@" value="${oclUpdateVersion}" />
			<replacefilter token="@oclUpdateSite@" value="${oclUpdateSite}" />

			<replacefilter token="@gefUpdateVersion@" value="${gefUpdateVersion}" />
			<replacefilter token="@gefUpdateSite@" value="${gefUpdateSite}" />

			<replacefilter token="@orbitBuildId@" value="${orbitBuildId}" />
		</replace>

		<!-- Replace the base variables to be nothing for bld-index, and the full reroute url for the main index file. -->
		<replace file="${result}/${indexFileName}" token="@base@" value="http://www.eclipse.org/downloads/download.php?file=/modeling/gmf/downloads/drops/${buildLabel}/" />
		<!-- Correct the slashes for the compilation logs on Windows -->
		<replace file="${result}/testResults.php" token="\" value="/" />
		
		<!-- Copy update jars as well -->
		<!--
		<copy todir="${buildRoot}/artifacts/updates/${buildLabel}/features">
			<fileset dir="${buildUpdateSitePath}/features" />
		</copy>
		<copy todir="${buildRoot}/artifacts/updates/${buildLabel}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins" />
		</copy>
		-->
	</target>
		
	<target name="statCVS" if="statCVShome">
		<cvs dest="${checkoutDirectory}/org.eclipse.gmf" command="log" output="${checkoutDirectory}/logfile.log" />
		<java jar="${statCVShome}/statcvs.jar" dir="${statCVSpublish}" fork="true" failonerror="true" maxmemory="1024m">
			<arg value="${checkoutDirectory}/logfile.log" />
			<arg value="${checkoutDirectory}/org.eclipse.gmf" />
		</java>
		<copy file="${scripts}/css/statcvs.css" todir="${statCVSpublish}" overwrite="true" />
	</target>

</project>