<?xml version="1.0"?>
<project name="Installation script for GMF and dependencies" default="" basedir=".">
	<property file="build.properties"/>
	<condition property="isZip">
		<equals arg1="${archiveType}" arg2="zip" casesensitive="false" trim="true"/>
    </condition>
	
	<target name="getBaseComponentZip" if="isZip">
		<available file="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" property="baseZipPresent"/>
		<antcall target="downloadBaseZip"/>
	</target>
	
	<target name="downloadBaseZip" unless="baseZipPresent">
		<get src="${eclipseBaseURL}.${archiveType}${mirror}" dest="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getBaseComponentTar" unless="isZip">
		<available file="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" property="baseTarPresent"/>
		<antcall target="downloadBaseTar"/>
	</target>
	
	<target name="downloadBaseTar" unless="baseTarPresent">
		<get src="${eclipseBaseURL}-${basews}.${archiveType}${mirror}" dest="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" verbose="true" usetimestamp="true" />
	</target>

	<target name="installBase" unless="baseExists" depends="checkBaseInstalled">
		<antcall target="getBaseComponentZip"/>
		<antcall target="getBaseComponentTar"/>
		<antcall target="unTarBase"/>		
		<antcall target="unZipBase"/>		
	</target>
	
	<target name="unTarBase" unless="isZip">
		<gunzip src="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" />
		<untar dest="${baseLocationRoot}" overwrite="true" src="${baseLocationRoot}/${eclipseArchiveName}-${basews}.tar" />
	</target>
	
	<target name="unZipBase" if="isZip">
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" />
	</target>
	
	<target name="checkBaseInstalled">
		<available file="${baseLocation}/configuration/config.ini" property="baseExists" />
	</target>
	
	<target name="getDeltaPack" unless="deltaPackExists">
		<get src="${deltaPackURL}" dest="${baseLocationRoot}/${deltaPackZipName}" verbose="true" usetimestamp="true" />		
	</target>
	
	<target name="installDeltaPack">
		<available file="${baseLocationRoot}/${deltaPackZipName}" property="deltaPackExists" />
		<antcall target="getDeltaPack"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${deltaPackZipName}" />
	</target>

	<target name="getTestingFramework" unless="testingFrameworkExists">
		<get src="${testingFrameworkURL}" dest="${baseLocationRoot}/${testingFrameworkZipName}" verbose="true" usetimestamp="true" />		
	</target>

	<target name="installTestingFramework">
		<available file="${baseLocationRoot}/${testingFrameworkZipName}" property="testingFrameworkExists" />
		<antcall target="getTestingFramework"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${testingFrameworkZipName}" />
	</target>
	
	<target name="installTests">		
<!-- 	<antcall target="installTestsFromMirror"/> TODO: restore when updating site.xml takes place during build -->
		<antcall target="installTestsFromZip"/>
	</target>

<!-- TODO: fix	
	<target name="installTestsFromMirror" if="usingMirror">
		<echo message="Installing GMF tests for execution..."/>
		<copy todir="${localUpdateSitePath}/features">
		    <fileset dir="${buildUpdateSitePath}/features"/>
		</copy>
		<copy todir="${localUpdateSitePath}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins"/>
		</copy>
		<property file="${buildRoot}/tests/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf" />
			<property name="version" value="${org.eclipse.gmf.tests}" />
		</ant>
	</target>
-->	
	
	<target name="installTestsFromZip" unless=""> <!-- restore usingMirror -->
		<echo message="Installing GMF tests from zip file..."/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-tests-${buildId}.zip" />
	</target>
	
	<target name="installTestsExperimental">		
<!-- 	<antcall target="installTestsFromMirror"/> TODO: restore when updating site.xml takes place during build -->
		<antcall target="installTestsExperimentalFromZip"/>
	</target>
	
<!-- TODO: Fix
	<target name="installTestsExperimentalFromMirror" if="usingMirror">
		<echo message="Installing GMF Experimental tests for execution..."/>
		<copy todir="${localUpdateSitePath}/features">
		    <fileset dir="${buildUpdateSitePath}/features"/>
		</copy>
		<copy todir="${localUpdateSitePath}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins"/>
		</copy>
		<property file="${buildRoot}/tests/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.tests.experimental" />
			<property name="version" value="${org.eclipse.gmf.tests.experimental}" />
		</ant>
	</target>
-->	
	
	<target name="installTestsExperimentalFromZip" unless=""> <!-- restore usingMirror -->
		<echo message="Installing GMF Experimental tests from zip file..."/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-tests-experimental-${buildId}.zip" />
	</target>

	<target name="checkEMFInstalled">
		<condition property="emfExists">
			<and>
				<available file="${baseLocation}/features/${emfFeatureId}_${emfUpdateVersion}/feature.xml"/>
				<available file="${baseLocation}/features/${oclFeatureId}_${oclUpdateVersion}/feature.xml"/>
				<available file="${baseLocation}/features/${emfOclAllFeatureId}_${emfOclAllUpdateVersion}/feature.xml"/>
				<available file="${baseLocation}/features/${emfQtvAllFeatureId}_${emfQtvAllUpdateVersion}/feature.xml"/>
			</and>
		</condition>		
	</target>

	<target name="installEMF" unless="emfExists" depends="checkEMFInstalled">
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${emfFeatureId}" />
			<property name="version" value="${emfUpdateVersion}" />
			<property name="from.updatesite" value="${emfUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${uml2FeatureId}" />
			<property name="version" value="${uml2UpdateVersion}" />
			<property name="from.updatesite" value="${uml2UpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${oclFeatureId}" />
			<property name="version" value="${oclUpdateVersion}" />
			<property name="from.updatesite" value="${oclUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${emfQtvAllFeatureId}" />
			<property name="version" value="${emfQtvAllUpdateVersion}" />
			<property name="from.updatesite" value="${emfUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
	</target>
	
	<target name="checkEMFExamplesInstalled">
		<available file="${baseLocation}/features/${emfExamplesFeatureId}_${emfExamplesUpdateVersion}/feature.xml" property="emfExampleExists" />
	</target>
	
	<target name="installEMFExamples" unless="emfExampleExists" depends="checkEMFExamplesInstalled">
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${emfExamplesFeatureId}" />
			<property name="version" value="${emfExamplesUpdateVersion}" />
			<property name="from.updatesite" value="${emfUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
	</target>
	
	<target name="checkGEFInstalled">
		<available file="${baseLocation}/features/${gefFeatureId}_${gefUpdateVersion}/feature.xml" property="gefExists" />
	</target>

	<target name="installGEF" unless="gefExists" depends="checkGEFInstalled">
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${gefFeatureId}" />
			<property name="version" value="${gefUpdateVersion}" />
			<property name="from.updatesite" value="${gefUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
	</target>
	
	<target name="checkGMFInstalled">
		<property file="${buildRoot}/sdk/finalFeaturesVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf.sdk_${org.eclipse.gmf.sdk}/feature.xml" property="gmfExists" />
	</target>

	<target name="installGMF" unless="gmfExists" depends="checkGMFInstalled">
<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
<!--	<antcall target="installGMFfromMirror" /> -->
		<antcall target="installGMFfromZip" />
	</target>

	<target name="installGMFfromMirror" if="usingMirror">
		<property file="${buildRoot}/sdk/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.sdk" />
			<property name="version" value="${org.eclipse.gmf.sdk}" />
		</ant>
	</target>

	<target name="installGMFfromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF for testing from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-sdk-${buildId}.zip" />
	</target>
	
	<target name="checkGMFRuntimeInstalled">
		<property file="${buildRoot}/runtime/finalFeaturesVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf_${org.eclipse.gmf}/feature.xml" property="gmfRuntimeExists" />
	</target>

	<target name="installGMFRuntime" unless="gmfRuntimeExists" depends="checkGMFRuntimeInstalled">
<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
<!--	<antcall target="installGMFRuntimeFromMirror" /> -->
		<antcall target="installGMFRuntimeFromZip" />
	</target>

	<target name="installGMFRuntimeFromMirror" if="usingMirror">
		<property file="${buildRoot}/runtime/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf" />
			<property name="version" value="${org.eclipse.gmf}" />
		</ant>
	</target>

	<target name="installGMFRuntimeFromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF Runtime from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-runtime-${buildId}.zip" />
	</target>

	<target name="checkGMFExperimentalInstalled">
		<property file="${buildRoot}/sdk-experimental/finalFeaturesVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf.sdk.experimental_${org.eclipse.gmf.sdk.experimental}/feature.xml" property="gmfExperimentalExists" />
	</target>

	<target name="installGMFExperimental" unless="gmfExperimentalExists" depends="checkGMFExperimentalInstalled">
<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
<!--	<antcall target="installGMFExperimentalfromMirror" /> -->
		<antcall target="installGMFExperimentalfromZip" />
	</target>

	<target name="installGMFExperimentalfromMirror" if="usingMirror">
		<property file="${buildRoot}/sdk-experimental/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.sdk.experimental" />
			<property name="version" value="${org.eclipse.gmf.sdk.experimental}" />
		</ant>
	</target>

	<target name="installGMFExperimentalfromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF Lite for testing from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-sdk-experimental-${buildId}.zip" />
	</target>
	
	<target name="checkExamplesInstalled">
		<property file="${buildRoot}/examples/finalFeaturesVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf.examples_${org.eclipse.gmf.examples}/feature.xml" property="examplesExists" />
	</target>

	<target name="installExamples" unless="examplesExists" depends="checkExamplesInstalled">
		<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
		<!--	<antcall target="installExamplesfromMirror" /> -->
		<antcall target="installExamplesfromZip" />
	</target>

	<target name="installExamplesfromMirror" if="usingMirror">
		<property file="${buildRoot}/examples/finalFeaturesVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.examples" />
			<property name="version" value="${org.eclipse.gmf.examples}" />
		</ant>
	</target>

	<target name="installExamplesfromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF Examples for testing from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-examples-${buildId}.zip" />
	</target>

	<target name="installGMFBase" unless="">
		<echo message="Installing GMF Base from zip file " />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${gmfBaseZip}" />
	</target>
	
	<target name="installGMFBasePlatform">
		<delete dir="${baseLocationRoot}/eclipse" failonerror="false"/>
<!--		<antcall target="unTarGMFBasePlatform"/> --> 		
		<antcall target="unZipGMFBasePlatform"/>		
	</target>

	<target name="unTarGMFBasePlatform" unless="isZip">
		<gunzip src="${artifacts}/drops/${buildLabel}/GMF-baseplatform-${buildId}-${basews}.${archiveType}" />
		<untar dest="${baseLocationRoot}" overwrite="true" src="${artifacts}/drops/${buildLabel}/GMF-baseplatform-${buildId}-${basews}.tar" />
	</target>
	
	<target name="unZipGMFBasePlatform">
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${gmfBasePlatformZip}" />
	</target>
	
	<target name="checkXercesInstalled">
		<available file="${baseLocation}/features/${xercesFeatureId}_${xercesUpdateVersion}/feature.xml" property="xercesExists" />
	</target>

	<target name="installXerces" unless="xercesExists" depends="checkXercesInstalled">	
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${xercesFeatureId}" />
			<property name="version" value="${xercesUpdateVersion}" />
			<property name="from.updatesite" value="${xercesUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
	</ant>
	</target>
	
	<target name="checkBatikInstalled">
		<available file="${baseLocation}/features/${batikFeatureId}_${batikUpdateVersion}/feature.xml" property="batikExists" />
	</target>

	<target name="installBatik" unless="batikExists" depends="checkBatikInstalled">	
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${batikFeatureId}" />
			<property name="version" value="${batikUpdateVersion}" />
			<property name="from.updatesite" value="${batikUpdateSite}" />
			<property name="updatesite.name" value="requirements" />
		</ant>
	</target>

	<!-- Creates a development target for your workspace -->
	<target name="createDevTarget">
		<!-- Override the base location root (pass in your own) : this is the folder above 'eclipse' -->
		<property name="baseLocationRoot" value="${basedir}/../../../targets/integration"/>
		<property name="baseLocation" value="${baseLocationRoot}/eclipse"/>
		<delete dir="${baseLocation}"/>
		<mkdir dir="${baseLocationRoot}"/>
		<echo message="Mirror status: ${usingMirror}"/>
		<!-- Assume builder is sibling of releng -->
		<property file="../../org.eclipse.gmf.releng.target/build.cfg"/>		
		<antcall target="installBase" />
		<antcall target="installTestingFramework" />
		<antcall target="installGEF" />
		<antcall target="installEMF" />	
		<antcall target="installEMFT" />
		<antcall target="installEMFExamples" />
		<antcall target="installXerces" />
		<antcall target="installBatik" />
	</target>
</project>
