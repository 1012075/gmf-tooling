<?xml version="1.0"?>
<project name="Installation script for GMF and dependencies" default="" basedir=".">
	<condition property="isWindows">
		<os family="windows"/>
    </condition>
	<property file="build.properties"/>
	<condition property="mirrorAvailable">
		<http url="${localUpdateSite}/site.xml"/>
	</condition>
	<condition property="usingMirror">
		<and>
			<isset property="mirrorAvailable"/>
			<isset property="useMirror"/>
		</and>
	</condition>
	
	<target name="getBaseComponentZip" if="isWindows">
		<available file="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" property="baseZipPresent"/>
		<antcall target="downloadBaseZip"/>
	</target>
	
	<target name="downloadBaseZip" unless="baseZipPresent">
		<get src="${eclipseBaseURL}.${archiveType}${mirror}" dest="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getBaseComponentTar" unless="isWindows">
		<available file="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" property="baseTarPresent"/>
		<antcall target="downloadBaseTar"/>
	</target>
	
	<target name="downloadBaseTar" unless="baseTarPresent">
		<get src="${eclipseBaseURL}-${basews}.${archiveType}${mirror}" dest="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" verbose="true" usetimestamp="true" />
	</target>

	<target name="installBase" unless="baseExists" depends="checkBaseInstalled">
		<antcall target="getBaseComponentZip"/>
		<antcall target="getBaseComponentTar"/>
		<antcall target="unTarBase"/>		
		<antcall target="unZipBase"/>		
	</target>
	
	<target name="unTarBase" unless="isWindows">
		<gunzip src="${baseLocationRoot}/${eclipseArchiveName}-${basews}.${archiveType}" />
		<untar dest="${baseLocationRoot}" overwrite="true" src="${baseLocationRoot}/${eclipseArchiveName}-${basews}.tar" />
	</target>
	
	<target name="unZipBase" if="isWindows">
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${eclipseArchiveName}.${archiveType}" />
	</target>
	
	<target name="checkBaseInstalled">
		<available file="${baseLocation}/configuration/config.ini" property="baseExists" />
	</target>
	
	<target name="getTestingFramework" unless="testingFrameworkExists">
		<get src="${testingFrameworkURL}" dest="${baseLocationRoot}/${testingFrameworkZipName}" verbose="true" usetimestamp="true" />		
	</target>

	<target name="installTestingFramework">
		<available file="${baseLocationRoot}/${testingFrameworkZipName}" property="testingFrameworkExists" />
		<antcall target="getTestingFramework"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${testingFrameworkZipName}" />
	</target>
	
	<target name="installTests">		
<!-- 	<antcall target="installTestsFromMirror"/> TODO: restore when updating site.xml takes place during build -->
		<antcall target="installTestsFromZip"/>
	</target>
	
	<target name="installTestsFromMirror" if="usingMirror">
		<echo message="Installing GMF tests for execution..."/>
		<!-- Publish new jars to local update site -->
		<copy todir="${localUpdateSitePath}/features">
		    <fileset dir="${buildUpdateSitePath}/features"/>
		</copy>
		<copy todir="${localUpdateSitePath}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins"/>
		</copy>
		<property file="${buildRoot}/tests/featureVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${product}" />
			<property name="version" value="${gmfVersion}.${org.eclipse.gmf.tests}" />
		</ant>
	</target>
	
	<target name="installTestsFromZip" unless=""> <!-- restore usingMirror -->
		<echo message="Installing GMF tests from zip file..."/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/${buildLabel}/GMF-tests-${buildId}.zip" />
	</target>
	
	<target name="checkEMFInstalled">
		<available file="${baseLocation}/plugins/org.eclipse.emf_${emfUpdateVersion}.jar" property="emfExists" />
	</target>

	<!-- This installs EMFT as well. TODO: do check installed for EMFT components as well. -->
	<target name="installEMF" unless="emfExists" depends="checkEMFInstalled">
		
<!-- Until the EMF/EMFT update sites are squared away, revert to using zips below... 	   -->
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfFeatureId}" />
			<property name="version" value="${emfUpdateVersion}" />
			<property name="updateSite" value="${emfUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfOCLFeatureId}" />
			<property name="version" value="${emfOCLUpdateVersion}" />
			<property name="updateSite" value="${emfOCLUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfQueryFeatureId}" />
			<property name="version" value="${emfQueryUpdateVersion}" />
			<property name="updateSite" value="${emfQueryUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfQueryOCLFeatureId}" />
			<property name="version" value="${emfQueryOCLUpdateVersion}" />
			<property name="updateSite" value="${emfQueryOCLUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfValidationFeatureId}" />
			<property name="version" value="${emfValidationUpdateVersion}" />
			<property name="updateSite" value="${emfValidationUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfValidationOCLFeatureId}" />
			<property name="version" value="${emfValidationOCLUpdateVersion}" />
			<property name="updateSite" value="${emfValidationOCLUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfTransactionFeatureId}" />
			<property name="version" value="${emfTransactionUpdateVersion}" />
			<property name="updateSite" value="${emfTransactionUpdateSite}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfWorkspaceFeatureId}" />
			<property name="version" value="${emfWorkspaceUpdateVersion}" />
			<property name="updateSite" value="${emfWorkspaceUpdateSite}" />
		</ant>
<!-- Alternative, download zip method... 
		<available file="${baseLocationRoot}/${emfZipName}" property="emfZipExists" />
		<antcall target="getEMF"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfZipName}" />
		
		<available file="${baseLocationRoot}/${emfOCLZipName}" property="emfOCLZipExists" />
		<antcall target="getEMFOCL"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfOCLZipName}" />
		
		<available file="${baseLocationRoot}/${emfQueryZipName}" property="emfQueryZipExists" />
		<antcall target="getEMFQuery"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfQueryZipName}" />
		
		<available file="${baseLocationRoot}/${emfValidationZipName}" property="emfValidationZipExists" />
		<antcall target="getEMFValidation"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfValidationZipName}" />
		
		<available file="${baseLocationRoot}/${emfTransactionZipName}" property="emfTransactionZipExists" />
		<antcall target="getEMFTransaction"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfTransactionZipName}" />
-->
	</target>
	
	<target name="getEMF" unless="emfZipExists">
		<get src="${emfZipURL}" dest="${baseLocationRoot}/${emfZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getEMFOCL" unless="emfOCLZipExists">
		<get src="${emfOCLZipURL}" dest="${baseLocationRoot}/${emfOCLZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getEMFQuery" unless="emfQueryZipExists">
		<get src="${emfQueryZipURL}" dest="${baseLocationRoot}/${emfQueryZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getEMFValidation" unless="emfValidationZipExists">
		<get src="${emfValidationZipURL}" dest="${baseLocationRoot}/${emfValidationZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="getEMFTransaction" unless="emfTransactionZipExists">
		<get src="${emfTransactionZipURL}" dest="${baseLocationRoot}/${emfTransactionZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="checkEMFExamplesInstalled">
		<available file="${baseLocation}/plugins/org.eclipse.emf.examples.library_${fullEmfVersion}.jar" property="emfExampleExists" />
	</target>
	
	<target name="installEMFExamples" unless="emfExampleExists" depends="checkEMFExamplesInstalled">
	<!-- Until the EMF/EMFT update sites are squared away, revert to using zips -->
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${emfExamplesFeatureId}" />
			<property name="version" value="${emfUpdateVersion}" />
			<property name="updateSite" value="${emfUpdateSite}" /> 
		</ant>
<!-- Alternative, download zip method...
		<available file="${baseLocationRoot}/${emfExamplesZipName}" property="emfExamplesZipExists" />
		<antcall target="getEMFExamples"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${emfExamplesZipName}" />
-->	
	</target>
	<target name="getEMFExamples" unless="emfExamplesZipExists">
		<get src="${emfExamplesZipURL}" dest="${baseLocationRoot}/${emfExamplesZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="checkGEFInstalled">
		<available file="${baseLocation}/plugins/org.eclipse.gef_${fullGefVersion}.jar" property="gefExists" />
	</target>

	<target name="installGEF" unless="gefExists" depends="checkGEFInstalled">
<!-- GEF doesn't currently have interim builds available via the update manager, so use zip		
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${gefFeatureId}" />
			<property name="version" value="${gefVersion}" />
			<property name="updateSite" value="${gefUpdateSite}" />
		</ant>
-->
		<available file="${baseLocationRoot}/${gefZipName}" property="gefZipExists" />
		<antcall target="getGEF"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${gefZipName}" />
	</target>
	
	<target name="getGEF" unless="gefZipExists">
		<get src="${gefZipURL}" dest="${baseLocationRoot}/${gefZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="checkUML2Installed">
		<available file="${baseLocation}/plugins/org.eclipse.uml2_${uml2UpdateVersion}.jar" property="uml2Exists" />
	</target>

	<target name="installUML2" unless="uml2Exists" depends="checkUML2Installed">
		<!-- Need to resolve issues with new update sites containing qualifiers... revert to zips  -->
		<ant antfile="${scripts}/update.xml" target="installFeature">
			<property name="featureId" value="${uml2FeatureId}" />
			<property name="version" value="${uml2UpdateVersion}" />
			<property name="updateSite" value="${uml2UpdateSite}" />
		</ant>
<!-- Alternative, download zip method
		<available file="${baseLocationRoot}/${uml2ZipName}" property="uml2ZipExists" />
		<antcall target="getUML2"/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${baseLocationRoot}/${uml2ZipName}" />	
-->
	</target>
			
	<target name="getUML2" unless="uml2ZipExists">
		<get src="${uml2ZipURL}" dest="${baseLocationRoot}/${uml2ZipName}" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="checkGMFInstalled">
		<property file="${buildRoot}/sdk/featureVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf.sdk_${gmfVersion}.${org.eclipse.gmf.sdk}/feature.xml" property="gmfExists" />
	</target>

	<target name="installGMF" unless="gmfExists" depends="checkGMFInstalled">
<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
<!--	<antcall target="installGMFfromMirror" /> -->
		<antcall target="installGMFfromZip" />
	</target>

	<target name="installGMFfromMirror" if="usingMirror">
		<property file="${buildRoot}/sdk/featureVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.sdk" />
			<property name="version" value="${gmfVersion}.${org.eclipse.gmf.sdk}" />
		</ant>
	</target>

	<target name="installGMFfromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF for testing from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/${buildLabel}/GMF-sdk-${buildId}.zip" />
	</target>
	
	<target name="checkExamplesInstalled">
		<property file="${buildRoot}/examples/featureVersions.properties"/>
		<available file="${baseLocation}/features/org.eclipse.gmf.examples_${gmfVersion}.${org.eclipse.gmf.examples}/feature.xml" property="examplesExists" />
	</target>

	<target name="installExamples" unless="examplesExists" depends="checkExamplesInstalled">
		<!-- TODO: restore install from mirror capability after devising a way to update site.xml -->		
		<!--	<antcall target="installExamplesfromMirror" /> -->
		<antcall target="installExamplesfromZip" />
	</target>

	<target name="installExamplesfromMirror" if="usingMirror">
		<property file="${buildRoot}/examples/featureVersions.properties"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="org.eclipse.gmf.examples" />
			<property name="version" value="${gmfVersion}.${org.eclipse.gmf.examples}" />
		</ant>
	</target>

	<target name="installExamplesfromZip" unless=""> <!-- TODO: restore usingMirror -->
		<echo message="Installing GMF Examples for testing from zip file..." />
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/${buildLabel}/GMF-examples-${buildId}.zip" />
	</target>
	
	<target name="getAntlr" depends="checkLocalAntlr" unless="skipAntlr">
		<get src="${antlrURL}" dest="${baseLocationRoot}/${antlrZipName}" verbose="true" usetimestamp="true" />
		<unzip dest="${baseLocationRoot}" overwrite="true" src="${baseLocationRoot}/${antlrZipName}">
			<patternset>
		        <include name="**/antlr.jar"/>
		    </patternset>
		</unzip>
		<move file="${baseLocationRoot}/antlr-2.7.2/antlr.jar" todir="${baseLocationRoot}"/>
		<delete dir="${baseLocationRoot}/antlr-2.7.2"/>
	</target>

	<target name="checkLocalAntlr">
		<available file="${baseLocationRoot}/antlr.jar" property="skipAntlr" />
	</target>

	<target name="installAntlr" unless="antlrExists">
		<antcall target="getAntlr"/>
		<copy file="${baseLocationRoot}/antlr.jar" todir="${baseLocation}/plugins/antlr_${antlrVersion}.${emfOCLBuildId}/lib"/>
	</target>
	
	<!-- Creates a development target for your workspace -->
	<target name="createDevTarget">
		<!-- Override the base location root (pass in your own) : this is the folder above 'eclipse' -->
		<property name="baseLocationRoot" value="/gmf/targets/integration"/>
		<property name="baseLocation" value="${baseLocationRoot}/eclipse"/>
		<delete dir="${baseLocation}"/>
		<mkdir dir="${baseLocationRoot}"/>
		<echo message="Mirror status: ${usingMirror}"/>
		<!-- Assume builder is sibling of releng -->
		<property file="../../org.eclipse.gmf.releng.target/build.cfg"/>		
		<antcall target="installBase" />
		<antcall target="installTestingFramework" />
		<antcall target="installGEF" />
		<antcall target="installEMF" />	
		<antcall target="installEMFExamples" />
		<antcall target="installUML2" />
		<antcall target="installAntlr" />
	</target>
</project>
