<project name="Build specific targets and properties" default="noDefault">

	
	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="${product}"/>
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in -->
	<!-- ${assembleScriptName}) but may also add pre and post processing -->
	<!-- Add one target for each root element and each configuration -->
	<!-- ===================================================================== -->

	<target name="assemble.org.eclipse.gmf.tests">
		<property name="archiveName" value="GMF-tests-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>	

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs command="checkout -d org.eclipse.gmf.releng" cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" 

tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<antcall target="cleanBase"/>
	</target>
	
	<target name="cleanBase" if="cleanBase">
		<delete dir="${baseLocation}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<!-- Load build.cfg properties -->
		<property file="${buildDirectory}/maps/org.eclipse.gmf.releng/maps/build.cfg"/>
		<ant antfile="${scripts}/install.xml" target="getBaseComponents" />
		<available file="${baseLocation}/configuration/config.ini" property="baseExists" />
		<ant antfile="${scripts}/install.xml" target="installBase" />
		<available file="${baseLocationRoot}/${testingFrameworkZipName}" property="testingFrameworkExists" />
		<ant antfile="${scripts}/install.xml" target="getTestingFramework" />
		<ant antfile="${scripts}/install.xml" target="installTestingFramework" />
<!-- TODO: this is a poor way to check for an installation... the update manager
     allows for querying an installation, but just returns a list that would require parsing. -->
		<available file="${baseLocation}/plugins/org.eclipse.gef_${gefVersion}.jar" property="gefExists" />
		<ant antfile="${scripts}/install.xml" target="installGEF" />
		<available file="${baseLocation}/plugins/org.eclipse.emf_${emfVersion}.jar" property="emfExists" />
		<ant antfile="${scripts}/install.xml" target="installEMF" />	
		<available file="${baseLocation}/plugins/org.eclipse.uml2_${uml2Version}.jar" property="uml2Exists" />
		<ant antfile="${scripts}/install.xml" target="installUML2" />
		<available file="${baseLocation}/features/org.eclipse.gmf.sdk_${gmfVersion}/feature.xml" property="gmfExists" />
		<ant antfile="${scripts}/install.xml" target="installGMF" />
		<available file="${baseLocation}/features/org.eclipse.gmf.examples_${gmfVersion}/feature.xml" property="examplesExists" />
		<ant antfile="${scripts}/install.xml" target="installExamples" />
		<copy file="${baseLocationRoot}/antlr.jar" todir="${baseLocation}/plugins/antlr_2.7.2/lib"/>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@buildId@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
		<!-- HACK: Copy the test.xml files from where they are assembled under 
		     source plugin to packaging area (need to fix source gen script) -->
		<property file="${buildDirectory}/maps/org.eclipse.gmf.releng/maps/build.cfg"/>
		<zip destfile="${buildDirectory}/${buildLabel}/GMF-tests-${buildId}.zip" update="true">
			<zipfileset dir="${buildDirectory}/plugins/org.eclipse.gmf.tests.source" includes="**/test.xml"	
prefix="eclipse/plugins/eclipse.org.gmf.tests.source_${gmfVersion}"/>
		</zip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<property file="${buildDirectory}/maps/org.eclipse.gmf.releng/maps/build.cfg"/>		
		<antcall target="gatherLogs" />
		<!-- A temporary directory leftover? -->
		<delete dir="${buildDirectory}/org.eclipse.gmf" failonerror="false"/>	
		<antcall target="publish"/>
		<antcall target="generateUpdateSite"/>
		<!-- Execute tests. -->
		<antcall target="test"/>
		<!-- Publish results to CC TODO: clean up CC logic to make optional based on property -->
		<copy todir="${artifacts}/cc">
		    <fileset dir="${artifacts}/${buildLabel}/testresults/xml/"/>
		  </copy>
		<!-- Uninstall GMF from base. -->
		<echo message="Uninstalling GMF from base..."/>
		<ant antfile="${scripts}/update.xml" target="uninstall">
			<property name="featureId" value="org.eclipse.gmf.sdk" />
			<property name="version" value="${gmfVersion}" />
		</ant>
		<ant antfile="${scripts}/update.xml" target="uninstall">
			<property name="featureId" value="org.eclipse.gmf.examples" />
			<property name="version" value="${gmfVersion}" />
		</ant>		
	</target>
		
	<!-- ===================================================================== -->
	<!-- Update the update site. -->
	<!-- ===================================================================== -->	
	<target name="generateUpdateSite">
	  	<!-- Create the directory structure -->
	  	<mkdir dir="${buildUpdateSitePath}/features"/>
	  	<mkdir dir="${buildUpdateSitePath}/plugins"/>
	  	<!-- Build the jar files -->
	  	<antcall target="allElements">
			<param name="genericTargets" value="${builder}/customTargets.xml"/>
			<param name="target" value="updateSiteExport"/>
	  	</antcall>

		<!-- HACK: Copy the test.xml files from where they are assembled under 
		     source plugin to packaging area (need to fix source gen script) -->
		<property file="${buildDirectory}/maps/org.eclipse.gmf.releng/maps/build.cfg"/>
		<zip destfile="${buildUpdateSitePath}/plugins/org.eclipse.gmf.tests.source_${gmfVersion}.jar" update="true">
			<zipfileset dir="${buildDirectory}/plugins/org.eclipse.gmf.tests.source" includes="**/test.xml"	prefix=""/>
		</zip>
	</target>
	
	<target name="updateSiteExport">
	  <ant antfile="build.xml" dir="${buildDirectory}/features/${product}/" target="build.update.jar">
	    <property name="feature.destination" value="${buildUpdateSitePath}/features"/>
	    <property name="plugin.destination" value="${buildUpdateSitePath}/plugins"/>
	  	<!-- Override the default temp.folder location, as it is too deep by default
	  	     on Windows, causing missing files in jars. -->
	  	<property name="temp.folder" value="${buildRoot}/temp.folder"/>
	  </ant>		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- TODO: improve packaging for easier standalone testing? -->
	<!-- ===================================================================== -->
	<target name="test" unless="skipTests">
		<antcall target="installTests"/>
	  	<ant antfile="${scripts}/test.xml"/>		
		<antcall target="uninstallTests"/>
	</target>
	
	<target name="installTests" unless="testsExist">		
    	<antcall target="installTestsFromMirror"/>
		<antcall target="installTestsFromZip"/>
	</target>
	
	<target name="installTestsFromMirror" if="usingMirror">
		<echo message="Installing GMF tests for execution..."/>
		<!-- Publish new jars to local update site -->
		<copy todir="${localUpdateSitePath}/features">
		    <fileset dir="${buildUpdateSitePath}/features"/>
		</copy>
		<copy todir="${localUpdateSitePath}/plugins">
			<fileset dir="${buildUpdateSitePath}/plugins"/>
		</copy>
		<property file="${buildDirectory}/maps/org.eclipse.gmf.releng/maps/build.cfg"/>
		<ant antfile="${scripts}/update.xml" target="install">
			<property name="featureId" value="${product}" />
			<property name="version" value="${gmfVersion}" />
		</ant>
	</target>
	
	<target name="installTestsFromZip" unless="usingMirror">
		<echo message="Installing GMF tests from zip file..."/>
		<unzip dest="${baseLocationRoot}/" overwrite="true" src="${artifacts}/${buildLabel}/GMF-tests-${buildId}.zip" />
	</target>
	
	<!-- TODO: easy to uninstall if installed via update manager... need to add removal if installed from zips
			   (for now, just use cleanBase option to uninstall ;) -->
	<target name="uninstallTests">
		<echo message="Uninstalling tests from base ..."/>
		<ant antfile="${scripts}/update.xml" target="uninstall">
			<property name="featureId" value="${product}" />
			<property name="version" value="${gmfVersion}" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">		
		<move file="${buildDirectory}/${buildLabel}" tofile="${artifacts}/${buildLabel}"/>
		<!-- workaround for CC until figure out how to tell CC about buildLabel -->
		<delete dir="${artifacts}/cc" failonerror="false"/>
		<copy todir="${artifacts}/cc">
		    <fileset dir="${artifacts}/${buildLabel}"/>
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>