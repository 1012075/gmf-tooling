/*
 * Copyright (c) 2006, 2008 Borland Software Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - Xpand language syntax
 *     Artem Tikhomirov (Borland) - LALR grammar
 *                                - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexerprs implements lpg.lpgjavaruntime.ParseTable, XpandKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,5,6,4,3,3,4,7,
            10,9,12,10,13,12,15,5,4,6,
            4,7,8,9,10,13,16,7,6,7,
            6,9,6,9,6,9,5,6,3,9,
            2,8,7,10,4,7,2,6,4,5,
            3,6,7,6,4,2,7,10
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,1,
            112,53,17,113,35,179,192,120,123,119,
            56,182,194,180,40,196,84,124,91,19,
            102,132,202,58,87,63,144,105,20,45,
            115,198,200,89,205,206,53,208,207,209,
            210,214,212,216,135,215,220,217,223,224,
            145,37,227,231,151,237,234,225,238,244,
            245,240,247,248,152,249,256,259,251,264,
            265,257,270,260,252,274,278,280,138,275,
            283,285,268,157,286,291,289,155,294,293,
            295,296,159,301,298,302,304,307,308,305,
            314,310,27,312,320,323,326,331,330,332,
            333,334,338,345,349,347,339,341,71,353,
            351,355,356,357,360,361,362,110,363,373,
            374,378,364,160,379,382,383,369,384,386,
            392,393,388,397,394,398,400,405,169,410,
            412,408,403,406,414,416,417,419,421,418,
            422,173,423,424,426,427,436,429,431,439,
            440,443,447,450,451,452,454,456,457,464,
            465,460,466,476,478,467,469,482,484,485,
            486,489,491,495,492,497,498,505,506,499,
            501,500,511,512,514,515,518,519,520,522,
            524,523,527,525,529,528,532,534,537,535,
            536,550,539,552,559,540,538,560,562,566,
            568,563,569,571,572,578,573,581,576,582,
            583,584,589,591,592,595,597,598,601,54,
            605,606,604,608,613,617,607,618,619,620,
            621,624,625,629,630,627,626,628,642,643,
            632,645,649,652,654,659,647,661,662,664,
            665,667,668,672,671,673,675,674,686,687,
            676,681,682,691,692,693,696,698,699,704,
            700,703,705,706,710,713,715,164,121,717,
            716,721,722,727,730,732,726,167,733,737,
            738,740,739,744,750,741,751,746,747,755,
            757,756,763,758,764,759,768,772,778,766,
            780,782,783,785,787,790,788,793,795,800,
            796,801,805,804,806,807,810,813,816,809,
            817,822,827,823,829,815,828,833,834,838,
            835,840,847,845,850,852,853,842,855,856,
            176,861,860,862,866,868,870,872,871,878,
            879,873,880,883,887,889,885,893,891,894,
            895,897,903,908,911,517,517
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,0,17,0,0,
            20,21,22,23,24,25,0,9,10,29,
            30,31,13,33,0,35,0,11,38,0,
            6,5,3,17,0,26,20,3,4,5,
            24,25,0,0,15,0,30,0,1,20,
            26,45,0,24,11,3,22,10,15,14,
            0,18,36,18,12,13,19,25,34,40,
            25,11,0,0,31,2,0,17,0,1,
            0,5,9,10,6,42,10,7,12,44,
            10,0,1,41,0,4,2,3,7,0,
            40,21,0,43,0,1,7,8,0,0,
            0,9,0,0,10,5,17,8,8,7,
            11,0,14,11,0,12,13,0,18,21,
            9,10,38,0,0,2,3,33,4,15,
            0,0,2,16,0,4,0,1,0,0,
            6,3,6,0,30,28,0,23,0,1,
            11,13,0,10,11,0,17,23,0,0,
            8,0,3,11,34,10,11,21,37,23,
            22,0,14,0,1,0,1,0,7,0,
            19,0,1,4,0,0,0,0,0,0,
            13,0,8,0,0,0,0,8,2,0,
            15,14,0,0,0,14,0,21,9,7,
            0,5,24,0,21,20,0,0,2,0,
            10,27,18,0,0,2,0,0,0,16,
            0,0,15,30,10,0,0,2,0,0,
            13,13,4,0,0,2,10,0,4,0,
            1,32,13,0,0,2,30,0,1,0,
            6,2,0,33,0,0,19,36,0,5,
            0,1,0,0,0,0,2,0,16,6,
            0,0,2,0,0,13,0,0,7,0,
            7,0,15,0,0,27,31,8,11,0,
            7,26,0,17,2,0,7,2,17,0,
            0,0,0,0,1,31,6,0,0,8,
            0,9,2,14,0,1,0,10,0,1,
            0,5,0,1,0,0,0,2,2,0,
            0,0,0,0,1,27,6,5,0,1,
            20,17,0,0,2,2,17,0,0,2,
            19,0,0,0,1,0,5,0,6,11,
            5,0,0,0,3,3,0,0,2,0,
            13,4,0,4,0,0,13,0,4,0,
            1,0,1,0,7,0,0,0,0,17,
            0,0,0,0,7,0,0,11,0,7,
            0,18,14,18,14,0,1,14,0,0,
            35,2,0,18,18,24,0,17,2,0,
            0,0,14,0,1,0,0,1,3,0,
            0,12,34,0,0,0,0,3,0,19,
            19,3,13,10,32,0,1,0,1,14,
            14,0,1,0,0,0,3,2,0,1,
            0,0,2,9,0,1,0,0,0,0,
            0,5,5,12,0,0,6,3,9,4,
            0,0,1,0,0,1,6,0,0,0,
            22,0,0,0,0,12,0,0,0,12,
            7,0,8,0,0,0,0,0,0,0,
            1,0,20,15,8,14,25,29,29,0,
            24,0,25,15,20,6,21,24,0,0,
            23,0,0,4,6,0,15,0,0,4,
            0,0,0,5,13,0,6,0,1,12,
            0,0,0,0,9,23,3,15,0,1,
            0,0,12,2,0,1,0,0,17,28,
            0,4,12,0,0,0,0,0,12,5,
            5,4,0,1,32,15,0,0,0,0,
            0,5,4,0,0,0,0,0,0,0,
            7,0,26,16,15,7,7,11,11,15,
            37,0,0,0,0,4,0,16,0,1,
            8,0,1,0,1,9,31,13,0,39,
            0,0,4,0,0,5,0,0,4,3,
            0,0,0,0,0,0,1,16,4,16,
            0,0,15,12,12,0,0,6,3,3,
            0,0,0,1,4,0,26,0,0,0,
            5,28,0,0,0,0,7,10,28,0,
            19,8,0,1,0,0,0,8,2,17,
            0,0,18,18,9,0,0,6,14,0,
            1,0,0,35,8,4,0,0,0,0,
            0,21,3,0,1,0,0,9,16,0,
            0,2,27,3,0,0,0,0,0,1,
            3,7,0,0,27,0,3,0,28,33,
            3,0,1,18,29,29,20,0,16,0,
            1,0,0,6,0,1,0,0,1,0,
            4,10,0,1,0,0,14,32,9,0,
            0,1,3,0,0,0,0,1,0,0,
            16,2,0,1,0,0,0,1,23,15,
            5,0,0,18,16,4,0,0,0,3,
            2,9,0,0,0,8,22,0,1,0,
            8,0,39,9,0,12,0,1,4,0,
            11,0,0,4,0,0,1,6,6,0,
            0,0,3,22,4,0,1,0,1,0,
            0,0,0,12,3,5,22,0,0,0,
            3,3,0,4,0,16,0,1,0,1,
            0,19,0,0,0,0,0,13,16,3,
            8,0,0,9,11,3,16,0,0,2,
            0,1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            517,137,132,133,138,140,139,120,127,136,
            135,124,126,125,122,121,517,119,517,517,
            118,130,131,113,117,116,517,171,170,128,
            115,123,192,114,517,129,517,270,134,517,
            142,222,160,273,517,193,272,197,195,194,
            271,269,517,517,158,517,268,517,178,623,
            143,516,517,614,398,186,520,180,401,152,
            517,400,223,153,185,525,179,205,196,159,
            151,287,517,517,399,163,517,290,517,202,
            517,182,162,164,203,402,183,167,181,154,
            169,517,174,184,517,173,191,190,172,517,
            288,168,517,289,517,200,299,298,517,517,
            27,141,517,517,199,445,300,147,446,149,
            146,517,150,148,517,165,166,517,447,608,
            176,175,189,517,517,187,188,198,221,214,
            517,517,227,524,13,533,517,250,517,517,
            255,573,249,60,213,542,517,220,517,316,
            306,259,517,444,443,64,305,254,517,517,
            326,517,157,325,226,500,499,454,236,455,
            518,517,144,517,156,517,161,517,145,517,
            155,517,177,201,517,517,517,517,517,517,
            574,517,204,517,517,517,517,209,217,517,
            618,206,517,517,517,211,517,207,216,218,
            517,224,208,517,210,212,517,517,228,517,
            225,215,230,517,517,232,517,517,517,229,
            517,517,231,219,233,517,517,238,517,517,
            235,237,529,517,517,239,240,517,527,517,
            241,534,526,517,517,243,234,517,543,517,
            245,244,517,575,517,517,248,242,517,247,
            517,252,517,517,517,517,258,517,246,256,
            517,517,260,89,517,257,517,517,612,517,
            262,517,261,517,517,253,251,267,264,517,
            266,576,517,263,276,517,275,561,274,517,
            517,517,517,517,281,265,277,517,517,279,
            517,280,286,278,517,283,517,282,517,588,
            517,284,517,291,517,517,517,293,294,517,
            517,517,517,517,304,285,296,301,517,522,
            622,292,517,517,568,302,295,517,517,303,
            297,517,517,517,531,517,308,517,309,307,
            586,517,517,517,521,310,517,517,312,517,
            311,519,517,314,517,517,313,517,315,517,
            585,517,571,517,317,517,99,517,517,318,
            517,517,517,517,324,517,517,322,517,327,
            517,320,604,321,323,517,563,328,517,517,
            319,334,517,329,330,617,517,332,336,517,
            517,517,333,517,340,517,517,342,341,517,
            517,337,331,517,517,517,517,344,517,338,
            339,350,345,343,335,517,347,517,348,346,
            349,517,351,517,517,517,352,354,517,532,
            517,517,355,353,517,356,517,517,517,517,
            517,358,359,357,517,517,362,360,363,361,
            517,517,365,517,517,367,364,517,517,517,
            523,517,517,517,517,366,517,517,517,368,
            602,517,372,517,517,517,517,517,517,517,
            381,517,600,619,376,374,371,369,370,517,
            615,517,373,379,605,378,377,375,517,517,
            382,517,517,546,380,517,598,517,517,384,
            517,517,517,387,383,517,388,517,389,385,
            517,517,517,517,391,386,393,621,517,596,
            517,517,390,539,517,395,517,517,392,564,
            517,572,394,517,517,517,517,517,396,403,
            540,405,517,406,558,397,517,517,517,517,
            517,407,409,517,517,517,517,517,517,517,
            624,517,587,408,620,613,411,412,414,410,
            404,517,517,517,517,415,517,566,517,417,
            416,517,549,517,597,419,413,559,517,610,
            517,517,418,517,517,420,517,517,422,562,
            517,517,517,517,517,517,429,565,589,421,
            517,517,423,424,425,517,517,431,427,428,
            517,517,517,538,432,517,595,517,517,517,
            528,426,517,28,517,517,437,434,430,517,
            433,436,517,442,517,517,517,441,448,438,
            517,517,439,440,449,517,517,451,609,517,
            535,517,517,435,452,590,517,517,517,517,
            517,450,458,517,541,517,517,459,456,517,
            517,460,453,461,517,517,517,517,517,466,
            579,603,517,517,457,517,465,517,548,553,
            467,517,468,599,462,463,601,517,464,517,
            471,517,517,469,517,552,517,517,475,517,
            473,472,517,476,517,517,607,470,474,517,
            517,591,478,517,517,517,517,481,517,517,
            477,482,517,592,517,517,517,567,479,625,
            483,517,517,480,569,537,517,517,517,536,
            485,484,517,517,517,487,486,517,490,61,
            488,517,611,491,517,489,517,493,494,517,
            492,517,517,495,517,517,498,496,497,517,
            517,517,580,551,501,517,503,517,556,517,
            517,517,517,502,504,557,550,517,517,517,
            583,505,517,507,517,555,517,508,517,509,
            517,506,76,65,517,517,517,510,547,514,
            511,517,517,513,512,584,554,517,517,560,
            517,594
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 404,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 625,
           MAX_LA            = 1,
           NUM_RULES         = 108,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 109,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 45,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 516,
           ERROR_ACTION      = 517;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
