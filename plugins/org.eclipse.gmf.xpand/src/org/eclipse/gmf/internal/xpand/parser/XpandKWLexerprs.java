/*
 * Copyright (c) 2006, 2008 Borland Software Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - Xpand language syntax
 *     Artem Tikhomirov (Borland) - LALR grammar
 *                                - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexerprs implements lpg.lpgjavaruntime.ParseTable, XpandKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,9,6,8,
            6,6,7,5,6,5,4,3,13,10,
            12,8,3,4,3,4,3,6,4,7,
            10,9,12,10,13,12,15,9,4,5,
            7,9,6,7,8,8,6,6,4,4,
            6,4,7,8,9,10,13,16,7,6,
            7,6,9,6,9,6,9,5,6,3,
            9,2,8,7,10,4,7,2,6,4,
            5,3,6,7,6,4,2,7,10
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            1,143,53,103,80,42,157,239,23,158,
            105,248,49,219,98,121,168,171,95,246,
            176,45,41,255,129,174,51,182,130,189,
            143,146,54,43,68,150,173,83,126,250,
            261,257,253,263,233,264,267,194,268,269,
            276,201,259,273,118,277,280,281,282,283,
            284,285,107,286,288,287,292,289,193,87,
            294,297,159,298,301,307,311,312,314,315,
            317,318,203,319,320,322,329,330,333,334,
            339,336,342,340,346,335,350,347,354,356,
            357,358,360,192,208,206,365,359,216,362,
            374,366,91,372,369,376,381,379,382,380,
            386,388,390,391,393,394,399,401,402,223,
            403,405,404,408,410,409,411,414,413,37,
            416,420,423,430,432,417,436,439,440,442,
            211,443,445,452,454,456,446,450,458,101,
            465,457,460,463,468,469,470,473,156,475,
            477,482,485,490,474,483,209,491,495,497,
            499,500,502,503,504,505,508,511,515,517,
            519,521,522,523,513,530,532,533,536,537,
            231,528,540,542,543,545,547,548,549,552,
            555,557,553,559,560,561,562,565,563,567,
            573,569,229,574,571,572,575,576,586,588,
            589,590,593,597,602,604,591,596,601,609,
            610,614,616,619,625,612,627,628,629,631,
            633,636,637,638,641,642,643,648,651,653,
            646,657,658,659,660,661,664,669,671,670,
            674,675,676,679,682,680,686,689,690,691,
            692,694,678,698,699,701,709,703,710,713,
            702,714,717,718,719,720,721,722,723,724,
            725,728,726,727,730,731,738,751,758,760,
            735,742,762,764,744,765,766,756,769,771,
            775,776,773,783,774,777,781,785,786,790,
            794,788,797,802,800,805,792,79,806,811,
            813,812,818,819,821,820,823,826,828,822,
            829,832,834,836,837,838,840,841,845,850,
            846,852,851,853,854,855,859,860,861,862,
            863,867,873,874,878,886,888,892,876,882,
            895,896,897,898,900,904,899,905,906,908,
            911,912,914,919,920,923,924,926,925,928,
            931,929,938,940,941,947,942,934,949,951,
            952,953,954,955,956,958,960,961,963,964,
            966,234,971,165,970,979,968,984,983,985,
            992,988,213,991,969,995,997,999,1002,1005,
            1011,1014,1007,1015,998,1022,1017,1023,1027,1009,
            1016,1028,1029,1030,1031,1033,1034,1038,1041,1045,
            1051,1049,1035,1058,1054,1044,1061,1064,1065,1067,
            1069,1071,1072,1056,1074,1076,1079,1081,1077,1085,
            1086,1087,1089,1092,1097,1090,1093,1099,1101,1104,
            1108,1109,1110,1111,1114,1112,1117,1115,1120,1119,
            1126,1129,1133,1136,1137,1139,1121,1140,1146,236,
            1148,1149,1141,1153,1154,1155,1157,1159,1160,1165,
            1166,1172,1167,1173,1174,1176,1179,1180,1182,1185,
            1184,1186,1188,1193,1196,1202,1190,1206,680,680
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            0,21,0,1,24,25,26,27,28,29,
            30,31,32,33,34,35,0,37,38,39,
            0,0,0,3,0,3,5,3,0,7,
            0,15,10,0,6,19,14,17,5,9,
            24,11,9,10,24,29,30,0,32,29,
            3,4,5,0,26,25,34,10,0,0,
            27,41,0,4,2,3,0,5,2,3,
            0,5,2,15,0,17,6,0,20,9,
            0,34,0,21,0,1,0,21,11,27,
            16,33,8,9,20,15,26,0,28,19,
            0,43,36,17,30,0,1,2,0,0,
            1,2,4,13,9,15,8,9,32,45,
            11,41,0,1,44,0,1,30,46,0,
            8,9,3,4,9,0,0,0,0,14,
            35,3,4,7,0,9,11,0,13,5,
            0,14,0,0,19,0,1,13,11,7,
            7,0,15,10,20,27,16,38,0,8,
            9,0,0,0,2,25,8,9,26,6,
            0,1,0,12,2,0,6,0,0,2,
            0,18,0,6,23,0,1,12,0,9,
            28,6,0,15,14,3,21,19,0,7,
            0,1,0,0,16,0,4,25,0,37,
            28,13,9,15,9,0,8,0,15,0,
            15,21,0,6,0,1,0,8,0,14,
            0,1,0,0,1,9,0,0,0,7,
            18,13,0,5,7,0,0,2,12,0,
            0,0,0,0,0,0,0,0,0,17,
            4,0,16,0,13,8,0,0,5,16,
            0,4,11,18,25,9,0,25,24,29,
            0,0,12,0,0,4,0,0,0,0,
            32,0,9,4,7,7,20,17,0,0,
            2,2,0,0,0,0,22,4,0,0,
            2,0,1,22,9,0,0,8,32,0,
            4,2,7,0,1,0,0,0,0,0,
            5,0,5,4,0,0,10,35,0,5,
            36,0,14,0,1,0,8,6,0,0,
            0,0,7,18,4,0,5,0,10,0,
            0,1,0,0,33,3,7,18,0,14,
            0,0,0,0,0,18,4,0,0,0,
            0,18,0,0,11,0,0,0,11,0,
            22,17,0,15,11,13,4,26,19,0,
            11,0,16,4,19,0,36,6,0,0,
            1,0,0,33,0,0,8,6,13,0,
            8,0,1,0,1,0,0,0,14,0,
            5,4,0,18,0,1,4,0,0,0,
            21,4,0,0,0,6,0,1,19,5,
            24,0,0,1,0,4,14,19,4,0,
            0,18,2,4,0,1,0,1,0,0,
            1,0,0,0,0,1,5,0,1,6,
            0,9,0,15,0,5,0,3,0,3,
            0,0,0,1,4,7,14,0,7,0,
            1,0,0,2,2,0,0,2,2,0,
            1,0,0,1,0,4,0,0,0,1,
            4,0,0,6,0,1,0,1,0,0,
            0,0,0,11,0,14,0,23,0,42,
            0,0,0,0,0,0,1,19,16,15,
            20,20,16,11,11,0,16,0,0,0,
            0,20,0,4,20,0,0,29,39,3,
            0,0,7,0,16,4,19,4,0,0,
            10,0,27,0,22,0,1,27,0,6,
            9,3,14,14,0,1,0,0,0,3,
            0,1,0,1,7,0,0,0,1,3,
            0,0,0,3,16,0,4,0,1,8,
            0,16,0,1,4,10,0,0,0,0,
            0,5,5,0,5,7,3,7,0,0,
            0,3,2,0,0,0,7,0,0,0,
            6,0,1,8,6,0,7,2,0,0,
            0,0,1,0,21,7,6,0,0,10,
            0,0,0,10,7,3,8,7,0,0,
            2,34,0,0,5,3,0,0,0,0,
            0,0,0,0,0,0,0,0,11,0,
            0,0,31,13,0,6,2,0,17,16,
            13,0,24,0,31,2,30,17,29,24,
            0,25,30,29,17,0,6,0,1,0,
            1,0,1,0,0,0,3,2,0,28,
            0,7,0,0,0,0,0,22,10,5,
            0,6,0,1,0,0,10,0,8,0,
            17,0,3,0,1,23,0,10,28,0,
            4,0,1,19,0,0,2,22,17,10,
            0,0,0,8,2,5,5,0,0,0,
            0,0,0,5,2,0,1,0,0,12,
            10,0,5,0,6,0,0,0,2,0,
            0,2,2,10,0,0,9,12,27,0,
            0,0,0,0,0,10,37,26,0,0,
            0,0,0,11,2,11,0,23,17,11,
            17,22,0,0,15,0,15,0,0,13,
            7,0,5,2,12,0,1,0,1,14,
            40,0,1,33,0,0,0,0,0,0,
            5,2,8,0,0,0,3,0,12,12,
            0,0,2,0,10,17,3,10,0,0,
            1,3,0,0,0,0,2,0,0,6,
            0,26,5,0,23,10,6,0,1,0,
            0,0,14,2,5,23,0,1,0,9,
            0,0,0,0,0,0,2,0,6,0,
            0,13,0,0,1,0,11,0,0,0,
            0,18,39,4,23,13,19,7,0,20,
            20,16,0,0,0,1,8,0,38,6,
            0,0,25,2,0,13,0,0,0,3,
            2,0,12,35,0,18,0,3,0,8,
            0,1,18,0,0,0,0,4,12,5,
            23,0,0,1,3,9,0,0,0,0,
            0,5,0,0,0,3,3,0,11,31,
            0,1,12,0,0,8,31,3,0,20,
            0,1,24,0,6,0,22,0,1,16,
            0,1,9,0,0,2,0,1,0,1,
            0,0,8,0,3,0,0,22,0,1,
            0,6,12,3,0,0,0,1,0,0,
            2,0,0,17,5,4,0,1,0,1,
            0,28,2,0,12,20,3,0,0,0,
            0,0,4,0,0,8,0,1,0,0,
            0,10,8,13,40,0,13,8,0,1,
            21,6,0,15,2,0,0,2,0,0,
            0,21,6,3,6,0,1,0,0,2,
            2,0,0,0,0,1,0,1,0,0,
            21,9,3,10,0,0,0,1,3,5,
            12,0,0,0,3,0,3,2,0,0,
            1,0,1,0,0,0,14,0,0,0,
            12,7,0,4,0,0,13,12,3,0,
            8,0,15,0,3,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            680,175,176,171,170,178,177,163,174,173,
            164,158,151,165,145,162,160,159,146,157,
            680,169,680,184,156,168,148,150,147,155,
            154,166,153,161,144,152,680,149,172,167,
            680,680,680,208,680,238,180,205,680,688,
            680,361,237,680,190,364,236,206,232,217,
            363,215,234,231,817,362,360,680,359,808,
            243,242,241,680,191,216,235,240,680,680,
            233,207,680,179,250,252,680,249,292,291,
            13,290,333,532,680,535,336,680,534,334,
            680,239,680,683,680,188,680,289,193,251,
            200,533,187,186,201,383,335,680,332,386,
            680,536,293,281,199,680,256,254,680,680,
            222,221,211,195,255,194,210,212,280,202,
            220,384,680,227,385,680,228,272,679,680,
            226,225,245,246,230,680,680,680,680,229,
            253,297,298,181,27,182,395,680,394,598,
            680,185,680,680,396,680,204,599,197,247,
            214,680,196,213,600,296,198,244,680,219,
            218,680,680,680,288,802,224,223,248,264,
            680,269,680,687,696,680,270,680,680,321,
            680,265,680,322,705,680,328,324,680,375,
            287,327,680,402,374,747,323,401,680,350,
            680,421,680,80,192,84,261,607,680,307,
            608,439,596,438,661,680,183,680,595,680,
            660,681,680,189,680,209,680,257,680,203,
            680,258,680,680,262,259,680,680,680,748,
            260,271,680,267,266,680,680,268,263,680,
            680,680,680,680,680,680,680,680,680,812,
            284,680,273,680,276,283,680,680,294,278,
            680,299,285,282,274,295,680,277,279,275,
            680,680,300,680,680,303,680,680,680,680,
            286,680,304,309,306,308,301,302,680,680,
            310,692,680,680,680,680,697,311,680,680,
            690,680,313,757,312,680,680,314,305,680,
            316,736,689,680,706,680,680,680,680,680,
            317,680,319,320,680,680,318,755,680,325,
            315,680,326,680,330,680,338,337,680,680,
            680,680,339,331,340,680,769,680,341,680,
            680,346,680,73,329,779,345,342,680,343,
            680,680,680,680,680,344,351,120,680,680,
            680,347,680,680,806,680,680,680,353,680,
            348,352,680,355,357,358,367,759,354,680,
            366,680,369,724,365,680,349,368,680,680,
            372,680,680,356,680,680,371,373,370,680,
            376,680,378,680,782,680,680,680,377,680,
            379,382,680,380,680,387,389,680,680,680,
            381,390,680,680,680,392,680,756,388,397,
            816,680,680,400,680,731,393,391,398,680,
            680,754,403,399,680,404,680,405,680,680,
            407,680,680,54,680,685,408,680,694,410,
            680,409,680,406,680,780,680,684,680,411,
            680,680,680,415,413,412,416,680,414,680,
            417,680,680,682,418,680,680,419,420,680,
            423,680,680,425,680,424,680,680,680,428,
            426,680,680,427,680,770,680,735,680,680,
            680,680,680,430,130,429,680,744,680,422,
            680,680,680,680,680,680,726,431,798,435,
            433,434,436,437,440,680,441,680,680,680,
            680,442,680,447,443,680,680,811,432,449,
            680,680,453,680,446,450,445,451,680,680,
            454,680,444,680,448,680,458,452,680,457,
            461,459,455,456,680,460,680,680,680,462,
            680,465,680,466,463,680,680,680,469,468,
            680,680,680,470,464,680,472,680,695,471,
            680,467,680,474,473,475,680,680,680,680,
            680,476,477,680,479,478,481,480,680,680,
            680,482,483,680,680,680,484,680,680,680,
            485,680,488,486,487,680,489,746,680,680,
            680,680,493,680,686,490,492,680,680,491,
            680,680,680,494,496,499,497,745,680,680,
            498,495,680,680,739,500,680,680,680,680,
            680,680,680,680,680,680,680,680,796,680,
            680,680,501,504,680,510,778,680,813,506,
            508,680,794,680,502,709,503,511,809,799,
            680,509,505,507,792,680,512,680,513,680,
            514,680,742,680,680,680,741,517,680,515,
            680,516,680,680,680,680,680,518,519,521,
            680,522,680,523,680,680,524,680,525,680,
            815,680,527,680,790,727,680,528,520,680,
            702,680,529,526,680,680,737,721,531,530,
            680,680,680,537,758,773,538,680,680,680,
            680,680,680,703,542,680,543,680,680,539,
            540,680,544,680,546,680,680,680,548,680,
            680,550,551,777,680,680,549,547,545,680,
            680,680,680,680,680,553,541,781,680,680,
            680,680,680,818,559,807,680,552,814,555,
            554,743,680,680,556,680,558,680,680,560,
            722,680,771,563,729,680,561,680,712,562,
            804,680,791,557,680,680,680,680,680,680,
            565,567,564,680,680,680,725,680,728,566,
            680,680,783,680,569,568,572,570,680,680,
            574,573,680,680,680,680,578,680,680,576,
            680,789,774,680,571,577,579,680,701,680,
            680,680,580,583,691,575,680,582,28,581,
            680,680,680,680,680,680,588,680,586,680,
            680,585,680,680,594,680,589,680,680,680,
            680,587,584,601,752,593,590,597,680,591,
            592,803,680,680,680,698,602,680,775,604,
            680,680,603,784,680,605,680,680,680,611,
            776,680,609,716,680,606,680,613,680,612,
            680,704,610,680,680,680,680,614,615,740,
            711,680,680,768,616,617,680,680,680,680,
            680,738,680,680,680,762,621,680,797,618,
            680,623,620,680,680,622,619,624,680,793,
            680,625,795,680,626,680,627,680,628,801,
            680,715,629,680,680,630,680,632,680,633,
            680,680,631,680,635,680,680,772,680,785,
            680,637,634,750,680,680,680,639,680,680,
            640,680,680,819,642,641,680,786,680,730,
            680,636,700,680,732,638,699,680,680,680,
            680,680,644,680,680,643,680,649,81,680,
            680,648,650,646,805,680,647,651,680,654,
            645,653,680,652,655,680,680,656,680,680,
            680,714,657,763,658,680,659,680,680,662,
            663,680,680,680,680,666,680,719,680,680,
            713,664,667,665,680,680,680,751,766,720,
            718,680,680,680,668,680,749,670,680,680,
            671,680,672,107,680,680,669,85,680,680,
            710,673,680,723,680,680,674,717,677,680,
            676,680,675,680,767,680,788
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 536,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 819,
           MAX_LA            = 1,
           NUM_RULES         = 139,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 140,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 46,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 679,
           ERROR_ACTION      = 680;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
