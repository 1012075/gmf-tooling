/*
 * Copyright (c) 2006, 2009 Borland Software Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - Xpand language syntax
 *     Artem Tikhomirov (Borland) - LALR grammar
 *                                - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexerprs implements lpg.lpgjavaruntime.ParseTable, XpandKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,2,4,4,5,3,2,3,3,7,
            3,2,4,5,3,3,8,10,10,7,
            6,6,8,3,3,7,6,6,13,8,
            7,6,7,16,4,7,5,6,7,10,
            4,7,4,10,6,1,5,6,4,3,
            9,5,3,4,7,10,9,12,10,13,
            12,15,5,4,6,4,7,8,9,10,
            13,16,7,6,7,4,4,5,8,11,
            8,8,7,7,2,4,4,6,9,4,
            7,7,9,5,8,10,3,3,7,9,
            6,9,6,9,6,9,5,6,3,9,
            2,8,7,10,4,7,2,6,4,5,
            3,6,7,6,4,2,7,10
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,1,
            132,46,195,26,90,99,225,220,124,30,
            41,149,105,146,47,96,222,219,38,72,
            103,148,68,158,121,125,168,48,130,62,
            237,135,63,53,83,238,239,170,244,247,
            245,249,175,250,253,254,255,137,257,256,
            259,258,261,262,264,94,265,266,272,267,
            268,278,287,81,273,178,142,289,281,290,
            294,295,296,297,299,301,114,302,306,304,
            312,315,303,316,318,321,322,325,324,327,
            328,333,171,181,182,184,334,336,180,200,
            335,338,189,340,342,341,343,348,352,347,
            353,355,358,359,361,202,369,362,371,374,
            375,376,377,379,380,383,382,24,386,387,
            396,398,402,389,405,407,409,410,388,412,
            416,419,422,423,206,414,424,86,425,430,
            431,432,433,437,438,439,440,143,441,443,
            445,450,451,457,458,460,464,462,446,467,
            470,472,474,476,478,480,481,482,488,203,
            492,494,497,498,214,479,483,493,501,503,
            504,506,508,510,511,512,513,514,515,521,
            522,516,519,216,524,523,525,531,527,538,
            539,540,541,542,548,549,553,551,559,552,
            560,566,217,571,573,575,567,577,578,579,
            583,586,581,589,590,592,588,598,599,602,
            603,604,607,608,610,611,612,615,616,618,
            621,623,627,633,632,634,625,635,640,639,
            647,642,649,620,650,652,653,654,656,655,
            657,658,661,659,664,662,660,665,667,672,
            670,678,689,666,691,692,695,696,698,705,
            697,706,701,709,702,710,714,715,716,717,
            718,723,719,721,731,729,738,722,736,741,
            744,746,749,750,742,752,753,756,757,761,
            762,763,764,765,768,769,774,770,771,777,
            778,779,782,783,784,785,786,794,789,797,
            798,805,806,809,811,812,813,815,819,820,
            822,823,824,825,832,831,833,834,838,839,
            840,843,846,848,849,851,853,856,855,857,
            859,860,861,866,871,869,874,876,877,875,
            880,883,878,882,218,884,887,893,144,900,
            901,886,902,903,909,912,917,911,921,923,
            905,919,915,928,925,931,932,933,934,935,
            936,938,939,946,940,945,951,949,954,959,
            957,961,963,965,964,967,971,972,973,974,
            976,981,979,983,985,993,986,995,996,999,
            1002,989,1006,1007,1003,221,1009,1014,1015,1016,
            1018,1020,1021,1022,1027,1028,1030,1031,1032,1033,
            1035,1043,1042,1049,596,596
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,21,22,0,24,0,26,27,28,0,
            5,31,32,33,34,35,36,0,15,39,
            0,18,5,14,4,22,0,0,1,26,
            10,28,0,16,2,32,9,5,6,22,
            14,0,0,26,17,19,5,0,7,7,
            8,0,1,21,28,23,9,10,41,8,
            0,20,0,1,2,0,6,25,8,0,
            44,9,30,0,27,0,7,36,0,1,
            15,21,0,18,0,3,8,9,4,16,
            8,9,17,0,10,2,34,37,0,15,
            0,1,2,0,0,32,41,4,43,0,
            10,7,8,9,0,6,0,3,9,5,
            11,0,0,0,3,0,5,0,0,6,
            14,38,10,30,7,13,13,0,11,14,
            18,13,19,15,23,8,9,0,1,0,
            0,4,27,39,0,1,7,0,4,0,
            0,0,12,0,4,8,9,4,0,6,
            21,11,4,12,0,25,17,0,17,0,
            1,0,0,4,25,0,5,2,7,7,
            8,6,24,0,1,0,0,0,0,0,
            0,0,1,5,0,9,9,8,13,9,
            15,7,15,17,21,15,0,0,0,45,
            3,5,4,0,0,2,0,1,0,0,
            2,7,0,0,0,0,0,0,0,6,
            0,0,13,0,0,0,0,0,16,11,
            13,0,0,8,3,14,10,0,6,2,
            0,26,28,27,20,22,0,27,0,0,
            4,3,12,0,0,0,0,3,0,32,
            0,0,0,0,9,0,3,7,19,16,
            9,0,7,2,0,0,2,0,3,2,
            0,0,1,0,0,29,0,0,1,9,
            32,7,0,0,0,0,34,0,1,0,
            0,0,0,20,12,4,0,0,8,7,
            3,0,0,20,0,4,4,0,0,20,
            0,0,8,37,29,8,8,33,0,23,
            0,3,2,0,0,0,0,16,0,0,
            2,0,0,10,10,0,0,0,0,0,
            30,15,10,18,13,0,10,0,3,12,
            3,0,14,18,0,4,0,1,0,0,
            1,0,33,0,6,0,1,13,0,1,
            9,0,0,0,0,1,3,6,6,0,
            0,0,0,20,3,3,0,0,0,0,
            0,4,0,1,0,0,6,3,18,0,
            0,22,3,3,18,17,0,0,1,0,
            1,0,23,0,1,9,0,6,23,0,
            4,0,1,0,1,0,1,0,0,0,
            0,0,0,6,5,5,4,0,7,2,
            21,0,0,0,3,2,0,0,2,2,
            0,23,0,0,2,0,1,0,1,0,
            0,0,0,0,0,0,24,17,0,10,
            0,0,0,0,0,10,0,1,18,15,
            0,19,19,10,14,14,14,0,0,0,
            0,0,1,19,26,42,35,0,0,19,
            0,0,0,14,7,3,18,9,0,0,
            23,11,0,4,6,0,0,2,17,29,
            0,1,0,1,0,9,0,0,0,5,
            0,5,0,1,7,0,1,0,0,0,
            1,0,14,5,14,8,5,0,0,1,
            3,0,0,0,1,3,0,0,7,0,
            0,0,6,2,0,0,7,0,11,0,
            0,4,0,1,0,1,0,12,8,3,
            20,0,0,0,0,21,4,4,0,0,
            2,0,11,4,3,11,0,1,0,0,
            31,0,0,0,0,0,0,0,0,0,
            0,0,10,0,0,0,0,13,4,0,
            1,0,16,25,14,22,13,0,1,28,
            31,26,16,22,26,28,27,16,0,24,
            0,0,2,5,0,0,0,0,7,5,
            0,0,7,6,0,0,2,11,0,0,
            1,6,4,0,0,0,0,0,0,1,
            0,0,0,8,24,11,25,5,0,16,
            0,11,11,3,18,0,8,0,1,4,
            0,0,2,0,1,0,29,2,0,0,
            1,0,0,2,6,0,0,1,6,4,
            0,0,0,0,0,2,2,0,0,0,
            0,4,11,0,12,2,0,0,0,38,
            12,0,0,0,0,0,16,10,0,20,
            30,10,10,0,16,2,0,0,15,0,
            15,13,5,7,0,0,1,3,0,1,
            0,0,0,1,0,1,40,33,0,0,
            2,0,0,0,0,6,2,17,17,8,
            0,0,0,0,12,12,5,0,0,0,
            3,2,0,11,2,0,16,0,0,11,
            0,4,0,1,0,0,0,12,0,0,
            0,1,6,30,9,0,12,17,0,21,
            0,1,13,0,0,0,0,0,10,0,
            1,0,0,0,1,0,0,13,11,24,
            0,18,0,35,19,19,14,11,6,0,
            0,0,0,3,0,4,25,8,0,1,
            0,0,27,2,0,13,0,1,0,9,
            0,1,0,5,0,3,12,0,1,25,
            0,0,0,0,0,0,1,0,0,0,
            1,10,5,5,0,0,12,2,0,5,
            0,1,19,0,22,31,0,4,0,1,
            0,31,0,0,0,9,0,1,6,5,
            0,0,0,0,14,0,1,29,0,6,
            0,3,0,1,0,0,16,24,0,9,
            6,19,0,1,0,0,2,12,0,1,
            5,0,0,15,2,0,0,1,0,8,
            2,40,7,0,0,0,1,0,5,0,
            0,0,5,2,5,11,0,0,1,0,
            0,0,0,0,0,0,7,17,12,5,
            8,0,0,13,3,0,15,5,0,1,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            596,161,162,156,163,157,164,149,160,159,
            144,150,135,151,146,148,145,133,143,596,
            134,155,142,596,137,596,141,154,140,596,
            165,152,139,147,138,153,136,596,332,158,
            596,335,191,173,175,334,596,596,212,333,
            174,331,596,189,231,330,214,232,230,722,
            183,596,596,713,213,184,220,596,221,228,
            227,596,193,598,182,233,201,199,190,192,
            596,218,596,237,235,596,269,226,268,596,
            185,236,229,596,200,596,166,219,596,167,
            355,267,596,357,596,195,168,681,180,259,
            194,196,186,596,179,611,234,270,596,178,
            596,206,205,596,596,258,354,171,356,596,
            204,207,209,208,596,216,596,225,217,224,
            215,596,596,26,276,596,274,596,596,544,
            250,285,366,172,198,365,545,596,197,181,
            367,177,546,176,275,203,202,596,211,596,
            596,210,707,223,596,245,240,596,246,596,
            596,596,602,596,297,272,273,300,12,301,
            241,296,308,299,596,620,303,596,298,596,
            305,596,596,304,694,596,645,350,321,381,
            382,351,309,596,387,596,596,55,596,596,
            59,596,187,188,596,418,542,170,402,581,
            401,169,541,419,597,580,596,596,596,595,
            238,222,239,596,596,242,596,243,596,596,
            244,646,596,596,596,596,596,596,596,248,
            596,596,247,596,596,596,596,596,717,253,
            254,596,596,261,262,256,263,596,271,265,
            596,252,249,251,260,257,596,255,596,596,
            266,277,278,596,596,596,596,281,596,264,
            596,596,596,596,282,596,288,284,279,280,
            286,596,287,289,596,596,607,596,290,605,
            596,596,292,596,596,612,596,596,621,291,
            283,604,7,596,596,596,649,596,307,596,
            596,596,596,293,295,311,596,596,312,313,
            314,596,596,302,596,315,317,596,596,310,
            596,596,318,294,693,319,320,306,596,316,
            596,322,673,596,109,596,596,323,596,596,
            672,596,596,711,324,596,596,596,596,596,
            650,326,328,325,329,596,337,596,338,345,
            631,596,340,336,596,339,596,342,596,596,
            344,596,327,596,343,596,347,341,596,662,
            346,596,596,596,596,358,353,348,349,596,
            596,596,596,352,360,361,596,596,596,596,
            596,363,596,369,596,596,368,637,359,596,
            596,721,370,371,362,364,596,596,373,596,
            374,596,686,596,375,372,596,376,683,596,
            377,596,600,596,378,596,609,596,596,596,
            596,596,596,660,599,379,389,596,380,639,
            682,596,596,596,383,384,596,596,385,386,
            596,388,596,596,392,596,659,596,643,596,
            596,596,596,596,119,596,390,391,596,393,
            596,596,596,596,596,400,596,633,394,398,
            596,396,397,403,703,399,404,596,596,596,
            596,596,690,405,716,674,395,596,596,406,
            596,596,596,409,411,413,408,412,596,596,
            407,414,596,416,648,596,596,417,415,410,
            596,420,596,421,596,423,596,596,596,422,
            596,424,596,427,425,596,428,596,596,596,
            431,596,426,430,429,433,432,596,596,610,
            434,596,596,596,437,436,596,596,435,596,
            596,596,438,442,596,596,440,596,439,596,
            596,444,596,446,596,451,596,443,445,447,
            441,596,596,596,596,601,448,450,596,596,
            454,596,449,453,456,452,596,455,596,596,
            458,596,596,596,596,596,596,596,596,596,
            596,596,701,596,596,596,596,461,467,596,
            469,596,718,457,463,699,465,596,470,460,
            459,714,468,704,464,462,466,697,596,472,
            596,596,624,471,596,596,596,596,473,474,
            596,596,475,476,596,596,477,478,596,596,
            482,479,481,596,596,596,596,596,596,670,
            596,596,596,484,480,483,634,486,596,720,
            596,487,490,617,485,596,488,596,489,491,
            596,596,644,596,492,596,628,493,596,596,
            494,596,596,496,618,596,596,499,497,498,
            596,596,596,596,596,501,502,596,596,596,
            596,503,641,596,500,679,596,596,596,495,
            680,596,596,596,596,596,719,723,596,504,
            661,712,506,596,505,510,596,596,507,596,
            509,511,512,629,596,596,514,513,596,627,
            596,596,596,517,596,671,709,508,596,596,
            518,596,596,596,596,519,522,515,516,520,
            596,596,596,596,635,521,632,596,596,596,
            687,663,596,524,526,596,523,88,596,525,
            596,527,596,616,596,596,596,688,596,27,
            596,532,606,669,529,596,638,528,596,695,
            596,678,531,596,596,596,596,596,534,596,
            539,596,596,596,677,596,596,538,540,533,
            596,535,596,530,536,537,708,543,675,596,
            596,596,596,548,596,550,691,547,596,613,
            596,596,549,664,596,551,596,552,596,553,
            596,619,596,555,596,554,696,596,689,626,
            596,596,596,596,596,596,559,596,596,596,
            562,702,653,560,596,596,558,561,596,563,
            596,564,698,596,700,556,596,566,596,567,
            596,557,596,596,596,568,596,665,647,685,
            596,596,596,596,706,596,571,565,596,692,
            596,573,596,666,596,596,724,569,56,572,
            574,570,596,640,596,596,615,636,596,575,
            614,596,596,577,579,596,596,578,596,576,
            582,710,676,596,596,596,584,596,654,596,
            596,596,657,587,585,583,596,596,588,596,
            71,60,596,596,596,596,589,586,625,593,
            592,596,596,590,630,596,591,658,596,668
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 463,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 724,
           MAX_LA            = 1,
           NUM_RULES         = 128,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 129,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 45,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 595,
           ERROR_ACTION      = 596;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
