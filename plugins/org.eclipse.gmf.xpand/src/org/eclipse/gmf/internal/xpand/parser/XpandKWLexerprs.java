/*
 * Copyright (c) 2006, 2008 Borland Software Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - Xpand language syntax
 *     Artem Tikhomirov (Borland) - LALR grammar
 *                                - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexerprs implements lpg.lpgjavaruntime.ParseTable, XpandKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,5,6,4,3,9,5,3,
            4,7,10,9,12,10,13,12,15,5,
            4,6,4,7,8,9,10,13,16,7,
            6,7,4,4,5,8,11,8,8,7,
            7,2,4,4,6,9,4,7,7,9,
            5,8,10,3,3,7,9,7,6,9,
            6,9,6,9,5,6,3,9,2,8,
            7,10,4,7,2,6,4,5,3,6,
            7,6,4,2,7,10
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,1,140,53,
            160,242,251,96,254,20,153,245,154,31,
            99,108,53,30,120,261,39,164,115,170,
            119,173,125,132,184,129,136,46,172,71,
            86,58,134,89,264,41,155,248,267,268,
            186,271,272,59,222,274,273,276,279,278,
            277,280,281,177,283,285,293,282,286,188,
            301,70,307,192,148,297,299,308,310,311,
            312,202,287,315,194,316,320,329,322,331,
            317,334,336,330,340,335,342,344,345,346,
            349,350,195,95,197,198,352,354,200,211,
            355,356,358,208,360,361,364,366,368,370,
            377,378,380,362,220,386,374,391,395,396,
            382,397,399,372,398,402,24,403,404,406,
            414,413,412,419,422,423,420,430,425,428,
            433,438,436,440,219,441,444,73,448,443,
            445,450,451,452,455,456,457,149,458,465,
            468,469,474,475,478,215,480,476,485,482,
            461,489,491,492,495,497,499,500,502,501,
            507,227,512,513,516,236,503,517,79,508,
            519,520,523,526,528,530,531,532,533,535,
            538,539,534,536,226,543,541,542,545,557,
            544,547,559,568,550,572,567,560,577,576,
            578,581,583,589,238,585,590,592,595,596,
            597,599,601,606,603,608,609,611,613,616,
            621,617,623,627,624,629,631,632,633,635,
            634,642,636,643,645,647,646,649,657,648,
            660,662,663,664,669,671,665,667,672,676,
            675,677,678,679,680,681,682,683,686,684,
            689,685,691,695,712,693,715,702,700,718,
            713,719,724,725,726,727,729,730,734,733,
            740,737,735,742,743,744,748,754,747,757,
            759,762,764,745,765,768,69,769,771,772,
            776,778,780,781,785,787,788,789,790,791,
            795,796,798,802,799,805,803,810,807,812,
            813,814,806,815,809,817,816,827,832,831,
            837,840,833,842,844,846,849,848,852,853,
            854,860,857,856,865,866,867,868,869,873,
            874,877,878,883,880,885,888,887,886,892,
            893,894,899,901,900,902,904,906,908,913,
            915,916,919,920,918,921,925,924,923,243,
            928,932,936,150,941,926,945,947,948,949,
            951,954,956,241,957,958,959,960,962,963,
            965,968,973,974,975,981,976,979,983,984,
            986,987,988,990,998,991,999,1009,1003,1001,
            1011,1014,1012,1016,1017,1018,1020,1025,1026,1028,
            1024,1033,1035,1030,1041,1038,1036,1043,1044,1045,
            1047,1048,1057,1049,1053,1059,1064,1061,1067,1068,
            1069,1070,1072,1073,1077,1075,1079,1080,1086,1090,
            1094,1095,1097,1081,1091,1098,244,1103,1104,1106,
            1109,1112,1114,1115,1116,1121,1123,1118,1126,1120,
            1131,1133,1129,1136,1138,1139,1140,1141,1142,1151,
            1143,653,653
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,21,22,0,24,25,7,27,28,0,
            0,31,32,33,34,35,36,14,0,39,
            0,18,4,13,14,0,17,24,8,4,
            27,28,0,8,16,32,11,0,0,2,
            20,4,24,6,6,27,21,15,0,0,
            0,19,0,3,4,6,7,20,0,41,
            28,36,14,26,16,0,14,19,0,20,
            18,3,7,8,0,0,1,45,0,5,
            22,33,7,5,9,11,37,0,23,39,
            12,43,14,41,0,30,44,3,0,0,
            1,7,15,9,0,1,2,9,0,1,
            12,0,25,0,1,0,12,9,7,8,
            9,6,9,25,9,17,11,0,0,0,
            3,4,0,0,0,6,2,5,5,0,
            12,13,13,0,1,12,18,34,19,0,
            7,0,0,26,3,4,0,8,0,7,
            11,9,30,0,1,0,1,0,5,2,
            5,0,16,0,0,2,0,0,7,0,
            9,0,5,6,10,46,10,0,32,22,
            0,1,5,17,0,5,17,23,0,0,
            2,0,23,4,6,0,0,8,14,22,
            29,38,18,7,8,0,1,0,13,14,
            0,0,0,0,0,4,9,0,1,28,
            0,9,9,0,17,20,14,14,8,15,
            0,8,22,0,4,25,0,0,5,2,
            0,0,0,0,8,0,0,0,0,0,
            0,0,0,13,0,0,0,16,15,11,
            13,7,0,12,15,3,0,25,0,3,
            0,25,27,21,24,5,0,0,10,0,
            0,0,6,3,0,0,0,32,32,0,
            9,0,8,2,9,16,19,8,0,0,
            0,3,2,0,0,0,3,2,9,0,
            1,0,8,0,0,0,1,3,0,0,
            34,0,3,0,0,0,1,0,10,0,
            0,0,21,0,5,0,3,0,8,0,
            5,0,21,0,5,0,0,0,21,0,
            37,0,29,7,7,0,7,33,3,16,
            0,30,2,26,0,0,0,0,0,18,
            2,0,0,0,33,0,12,12,3,12,
            14,0,0,0,13,12,3,5,0,0,
            18,0,0,1,0,6,15,0,7,0,
            1,13,0,1,10,0,9,0,1,0,
            0,6,0,0,0,6,3,0,1,0,
            0,0,3,3,0,0,0,0,0,5,
            0,21,18,6,0,1,24,0,0,18,
            3,3,17,0,0,0,3,0,1,0,
            1,0,26,9,0,1,26,6,0,14,
            0,0,1,5,0,1,0,1,0,0,
            0,0,0,4,6,4,0,0,8,3,
            20,0,0,2,2,0,0,2,0,0,
            2,5,0,1,17,0,1,0,26,0,
            0,0,0,0,0,0,0,0,0,12,
            0,0,0,0,0,12,0,18,14,0,
            19,19,15,15,12,15,0,1,0,0,
            19,42,27,19,18,35,0,0,9,26,
            3,0,1,15,8,0,0,0,29,3,
            0,0,0,6,0,1,11,5,0,0,
            2,0,1,4,0,0,0,17,0,4,
            0,1,0,9,8,0,1,0,0,1,
            0,4,0,15,4,0,0,15,3,7,
            0,1,0,0,8,3,0,1,0,6,
            0,0,0,0,0,0,6,6,4,11,
            8,0,0,2,0,0,0,0,0,5,
            5,3,10,7,21,20,0,1,11,0,
            1,0,0,0,0,2,0,5,0,1,
            0,0,11,3,0,0,0,0,0,0,
            0,0,0,0,0,0,12,23,0,5,
            0,13,0,1,0,16,15,31,13,0,
            24,0,31,28,27,4,16,24,28,27,
            16,0,0,25,0,1,5,0,0,2,
            8,22,4,0,0,0,0,2,0,0,
            6,8,0,0,0,6,0,11,5,0,
            1,0,0,0,0,11,0,0,7,5,
            22,4,16,0,1,23,0,11,0,3,
            18,0,1,0,0,7,2,0,0,1,
            0,0,29,2,11,0,6,0,1,0,
            0,6,2,16,0,1,0,0,0,0,
            0,5,2,6,0,0,2,0,0,10,
            5,0,0,2,0,0,0,10,0,0,
            2,0,0,0,0,0,0,38,30,21,
            16,12,16,12,12,10,0,14,14,13,
            0,0,0,3,8,4,0,1,33,0,
            1,0,40,0,1,0,1,0,0,17,
            2,0,0,0,7,0,0,6,17,0,
            4,2,10,10,0,0,0,0,0,3,
            2,16,0,0,2,11,0,0,11,0,
            4,4,0,1,0,0,0,0,2,5,
            5,0,0,0,1,30,23,10,0,0,
            0,0,23,0,6,0,1,0,9,17,
            10,20,0,1,0,0,13,0,0,0,
            0,1,0,0,0,0,12,0,1,22,
            13,0,7,18,11,0,35,19,19,15,
            0,6,11,3,0,23,0,0,0,1,
            0,5,2,0,1,0,0,0,0,0,
            13,0,0,4,0,1,10,0,7,25,
            3,9,0,0,0,0,21,4,0,21,
            0,1,0,0,10,0,0,0,1,0,
            0,34,2,4,12,23,10,0,0,1,
            0,4,0,1,19,5,31,24,0,31,
            0,0,4,0,1,0,0,0,1,0,
            9,2,6,0,0,0,1,0,1,0,
            15,7,0,10,0,0,4,0,4,29,
            0,1,0,0,0,1,0,0,0,6,
            3,22,0,16,6,9,0,1,0,1,
            0,19,10,0,4,2,0,0,0,0,
            3,0,0,7,0,40,0,1,0,0,
            0,7,13,11,13,0,1,8,20,0,
            0,2,14,0,0,2,0,0,1,5,
            20,5,0,0,2,0,0,4,0,1,
            20,0,1,0,0,0,11,0,4,0,
            0,6,0,10,4,0,4,2,0,10,
            0,1,0,1,17,0,8,0,0,0,
            0,0,0,1,4,4,7,10,13,0,
            0,0,14,3,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            653,169,170,164,165,171,172,168,157,167,
            143,158,152,159,156,154,153,141,151,653,
            163,142,145,653,150,162,178,149,148,653,
            653,160,147,155,146,161,144,343,653,166,
            653,346,199,185,184,653,194,345,249,229,
            344,342,653,230,197,341,228,653,653,241,
            250,243,787,240,257,778,226,191,653,653,
            653,192,653,235,234,279,278,656,653,198,
            190,227,511,242,514,653,366,513,653,277,
            369,247,237,238,653,653,175,193,653,309,
            404,512,176,188,745,308,280,653,236,233,
            187,515,186,367,653,239,368,203,653,653,
            195,202,189,204,653,214,213,209,653,220,
            207,653,772,653,246,653,212,222,217,215,
            216,224,245,208,225,221,223,653,653,27,
            286,284,653,653,653,576,251,179,183,653,
            378,377,577,653,201,182,379,244,578,653,
            200,653,653,285,231,232,653,206,653,211,
            205,210,180,653,219,653,254,653,218,275,
            255,653,268,653,653,669,653,653,282,653,
            283,653,312,313,660,652,311,13,267,274,
            653,317,322,310,653,316,315,678,653,653,
            362,653,758,709,363,653,653,332,387,321,
            670,295,386,397,398,653,401,653,416,415,
            653,653,62,66,653,173,433,653,252,258,
            653,574,636,653,434,654,573,635,174,181,
            653,177,587,653,196,586,653,653,248,253,
            653,653,653,653,710,653,653,653,653,653,
            653,653,653,256,653,653,653,782,259,262,
            263,270,653,272,265,271,653,260,653,287,
            653,264,261,269,266,276,653,653,288,653,
            653,653,281,291,653,653,653,273,293,653,
            292,653,294,299,296,290,289,297,653,653,
            653,298,665,653,653,653,300,663,301,653,
            302,653,662,653,653,653,679,305,8,653,
            713,653,307,653,653,653,319,653,306,653,
            653,653,303,653,323,653,325,653,324,653,
            326,653,314,653,328,653,653,653,320,653,
            304,653,757,329,330,653,331,318,333,334,
            653,714,737,327,653,117,653,653,653,336,
            736,653,653,653,338,653,776,335,349,339,
            337,653,653,653,340,348,697,350,653,653,
            347,653,653,354,653,355,351,653,353,653,
            356,352,653,359,357,653,358,653,726,653,
            653,360,653,653,653,361,365,653,370,653,
            653,653,372,373,653,653,653,653,653,375,
            653,364,371,380,653,381,786,653,653,374,
            704,382,376,653,653,653,383,653,385,653,
            388,653,750,384,653,390,747,391,653,389,
            653,653,658,392,653,393,653,667,653,653,
            653,653,653,657,724,394,653,653,395,396,
            746,653,653,655,399,653,653,400,653,653,
            406,403,653,723,405,653,707,653,402,653,
            653,653,653,653,127,653,653,653,653,407,
            653,653,653,653,653,414,653,408,412,653,
            410,411,768,413,417,418,653,699,653,653,
            419,738,781,420,422,409,653,653,427,421,
            424,653,754,423,426,653,653,653,425,428,
            653,653,653,712,653,435,429,431,653,653,
            432,653,437,436,653,653,653,430,653,439,
            653,442,653,438,440,653,443,653,653,446,
            653,445,653,441,447,653,653,444,449,448,
            653,668,653,653,450,451,653,452,653,453,
            653,653,653,653,653,653,455,456,458,454,
            457,653,653,460,653,653,653,653,653,462,
            464,465,461,463,459,659,653,466,467,653,
            468,653,653,653,653,471,653,470,653,472,
            653,653,469,473,653,653,653,653,653,653,
            653,653,653,653,653,653,766,474,653,484,
            653,478,653,487,653,783,480,475,482,653,
            764,653,476,477,779,489,485,769,479,481,
            762,653,653,483,653,488,486,653,653,682,
            491,490,492,653,653,653,653,495,653,653,
            494,493,653,653,653,498,653,496,499,653,
            500,653,653,653,653,501,653,653,502,509,
            497,504,785,653,734,700,653,505,653,675,
            503,653,507,653,653,506,708,653,653,516,
            653,653,694,518,508,653,517,653,519,653,
            653,676,521,510,653,522,653,653,653,653,
            653,523,526,524,653,653,527,653,653,525,
            528,653,653,743,653,653,653,744,653,653,
            535,653,653,653,653,653,653,520,725,529,
            784,788,530,777,531,702,653,532,534,536,
            653,653,653,538,695,537,653,539,533,653,
            685,653,774,653,542,653,735,653,653,540,
            543,653,653,653,544,653,653,545,541,653,
            698,547,701,546,653,653,653,653,653,751,
            727,548,653,653,551,549,653,653,550,653,
            553,554,653,555,653,95,653,653,558,557,
            559,653,653,653,674,733,552,752,653,653,
            653,653,556,28,664,653,564,653,561,560,
            761,759,653,742,653,653,563,653,653,653,
            653,571,653,653,653,653,566,653,741,565,
            570,653,580,567,572,653,562,568,569,773,
            653,739,575,579,653,755,653,653,653,671,
            653,582,728,653,584,653,653,653,653,653,
            583,653,653,590,653,677,588,653,591,581,
            593,592,653,653,653,653,585,594,653,589,
            653,753,653,653,760,653,653,653,598,653,
            653,689,600,717,767,684,597,653,653,601,
            653,599,653,603,763,604,595,765,653,596,
            653,653,602,653,606,653,653,653,688,653,
            607,608,711,653,653,653,610,653,611,653,
            771,609,653,612,653,653,613,653,749,605,
            653,729,653,653,653,616,653,653,653,756,
            618,614,653,789,619,617,653,730,653,703,
            653,615,705,653,672,673,653,653,653,653,
            621,653,653,620,653,775,653,626,63,653,
            653,627,623,625,624,653,629,740,622,653,
            653,630,628,653,653,631,653,653,634,632,
            687,633,653,653,637,653,653,718,653,639,
            686,653,692,653,653,653,638,653,640,653,
            653,693,653,691,721,653,641,643,653,683,
            653,644,653,645,642,78,646,653,67,653,
            653,653,653,732,650,722,649,690,647,653,
            653,653,648,696
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 512,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 789,
           MAX_LA            = 1,
           NUM_RULES         = 136,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 137,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 46,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 652,
           ERROR_ACTION      = 653;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
