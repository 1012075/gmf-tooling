<%
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());

	if(__genExprProvider == null) {

%><%=__importedAbstractClass%>.createNullExpression(<%=__ctxEClassifierAccess%>)<%

	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {	
		
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", <%=__ctxEClassifierAccess%>, <%=__outEnvVarName%>)<%

		} else { 
		
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", <%=__ctxEClassifierAccess%>)<%

		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	

%>new <%=__importedAbstractClass%>(<%=__ctxEClassifierAccess%>) {
	protected Object doEvaluate(Object context, <%=importManager.getImportedName("java.util.Map")%> env) {	
		<%=importManager.getImportedName(evalCtxQualifiedName)%> self = (<%=importManager.getImportedName(evalCtxQualifiedName)%>)context;
<%	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
%>	
		<%=importManager.getImportedName(qualifiedTypeName)%> <%=nextVariableName%> = (<%=importManager.getImportedName(qualifiedTypeName)%>)env.get("<%=nextVariableName%>"); //$NON-NLS-1$
<%		} %>
		return <%=__javaOperationContainer%>.<%=__exprJavaOperName%>(self<%
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){%>, <%=(String)envVarIt.next()%><%}%>);
	}
}
<%}%>
