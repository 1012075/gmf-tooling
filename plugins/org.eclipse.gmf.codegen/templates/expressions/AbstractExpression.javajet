<%@ jet package="org.eclipse.gmf.codegen.templates.expressions" class="AbstractExpressionGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenExpressionProviderContainer providerContainer = genDiagram.getEditorGen().getExpressionProviders();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

<%
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.core.runtime.Status");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
%>

/**
 * @generated
 */
public abstract class <%=providerContainer.getAbstractExpressionClassName()%> {		
	/**
	 * @generated
	 */
	private String body;
	/**
	 * @generated
	 */
	private EClassifier context;
	/**
	 * @generated
	 */	
	private IStatus status = Status.OK_STATUS;	

	/**
	 * @generated
	 */
	protected <%=providerContainer.getAbstractExpressionClassName()%>(EClassifier context) {
		this.context = context;
	}
	
	/**
	 * @generated
	 */	
	protected <%=providerContainer.getAbstractExpressionClassName()%>(String body, EClassifier context, Map env) {
		this.body = body;
		this.context = context;
	}
	
	/**
	 * @generated
	 */	
	protected void setStatus(int severity, String message, Throwable throwable) {		
		String pluginID = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID;
		this.status = new Status(severity, pluginID, -1, (message != null) ? message : "", throwable); //$NON-NLS-1$
		if(!this.status.isOK()) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>
					.getInstance().logError("Expression problem:" + message + "body:"+ body, throwable); //$NON-NLS-1$ //$NON-NLS-2$
		
		}
	}
	
	/**
	 * @generated
	 */	
	protected abstract Object doEvaluate(Object context, Map env);

	/**
	 * @generated
	 */	
	public Object evaluate(Object context) {
		return evaluate(context, Collections.EMPTY_MAP);
	}
	
	/**
	 * @generated
	 */	
	public Object evaluate(Object context, Map env) {
		if(context().isInstance(context)) {
			try {
				return doEvaluate(context, env);
			} catch(Exception e) {
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>
					.getInstance().logError("Expression evaluation failure: " + body, e);
				return null;
			}
		}
		return null;
	}

	/**
	 * @generated
	 */	
	public IStatus getStatus() {
		return status;
	}
	
	/**
	 * @generated
	 */	
	public String body() {
		return body;
	}

	/**
	 * @generated
	 */
	public EClassifier context() {
		return context;
	}
	
	/**
	 * @generated
	 */	
	public static final <%=providerContainer.getAbstractExpressionClassName()%> createNullExpression(EClassifier context) {
		return new <%=providerContainer.getAbstractExpressionClassName()%>(context) {
			protected Object doEvaluate(Object context, Map env) {
				// TODO - log entry about not provider available for this expression
				return null;
			}
		};
	}
}
<%importManager.emitSortedImports();%>
