/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - [235113] alternative parser access
 *                                 [244419] custom parsers
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::providers::ParserUtils»

«DEFINE accessorMethod_delegate2providers FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment("Utility method that consults ParserService")»
	public static org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(org.eclipse.gmf.runtime.emf.type.core.IElementType type, org.eclipse.emf.ecore.EObject object, String parserHint) {
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(new HintAdapter(type, object, parserHint));
	}
«ENDDEFINE»

// invokes method generated with accessorMethod_delegate2providers template
«DEFINE accessorCall_delegate2providers(gmfgen::GenCommonBase elementTypeHolder, gmfgen::LabelModelFacet labelModelFacet, String parsedElement) FOR gmfgen::GenCommonBase-»
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».getParser(«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», «parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(this) FOR labelModelFacet»«ENDIF»)«-»
«ENDDEFINE»

«DEFINE _parserHint(gmfgen::GenCommonBase hintHolder) FOR gmfgen::LabelModelFacet»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR hintHolder»«ENDDEFINE»
«DEFINE _parserHint(gmfgen::GenCommonBase hintHolder) FOR gmfgen::DesignLabelModelFacet»org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION«ENDDEFINE»

«REM»no-op, just to complement accessorMethod_delegate2providers«ENDREM»
«DEFINE accessorMethod_direct FOR gmfgen::GenParsers-»
«ENDDEFINE»

// XXX do I really need GenCommonBase elementTypeHolder, why not use elementType reference directly?
// XXX make HintAdapterClass private - don't use it for DESCRIPTION parsers
«DEFINE accessorCall_direct(gmfgen::GenCommonBase elementTypeHolder, gmfgen::LabelModelFacet labelModelFacet, String parsedElement) FOR gmfgen::GenCommonBase-»
«IF labelModelFacet == null || { labelModelFacet }.typeSelect(DesignLabelModelFacet).size() == 1-»
org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(new «getDiagram().editorGen.labelParsers.getQualifiedClassName()».HintAdapter(«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», «parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(this) FOR labelModelFacet»«ENDIF»))«-»
«ELSE-»
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».«parserAccessorName(this)»()«-»
«ENDIF-»
«ENDDEFINE»

«DEFINE provider_getParserMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(
			org.eclipse.core.runtime.IAdaptable hint) {
		String vid = (String) hint.getAdapter(String.class);
		if (vid != null) {
			return getParser(«EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR editorGen.diagram»(vid));
		}
		org.eclipse.gmf.runtime.notation.View view =
				(org.eclipse.gmf.runtime.notation.View) hint.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
		if (view != null) {
			return getParser(«EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR editorGen.diagram»(view));
		}
		return null;
	}
«ENDDEFINE»

«DEFINE provider_providesMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean provides(org.eclipse.gmf.runtime.common.core.service.IOperation operation) {
		if (operation instanceof org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation) {
			org.eclipse.core.runtime.IAdaptable hint =
					((org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation) operation).getHint();
			if («editorGen.diagram.getElementTypesQualifiedClassName()».getElement(hint) == null) {
				return false;
			}
			return getParser(hint) != null;
		}
		return false;
	}
«ENDDEFINE»

// FIXME private class
«DEFINE HintAdapterClass FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static class HintAdapter extends org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter {

		«EXPAND xpt::Common::generatedMemberComment»
		private final org.eclipse.gmf.runtime.emf.type.core.IElementType elementType;

		«EXPAND xpt::Common::generatedMemberComment»
		public HintAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType type,
				org.eclipse.emf.ecore.EObject object, String parserHint) {
			super(object, parserHint);
			assert type != null;
			elementType = type;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public Object getAdapter(Class adapter) {
			if (org.eclipse.gmf.runtime.emf.type.core.IElementType.class.equals(adapter)) {
				return elementType;
			}
			return super.getAdapter(adapter);
		}
	}
«ENDDEFINE»

«DEFINE getParserByVisualIdMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(int visualID) {
		switch (visualID) {
		«EXPAND _getParsers FOREACH editorGen.diagram.topLevelNodes-»
		«EXPAND _getParsers FOREACH editorGen.diagram.childNodes-»
		«EXPAND _getParsers FOREACH editorGen.diagram.links-»
		}
		return null;
	}
«ENDDEFINE»

«DEFINE _getParsers FOR gmfgen::GenNode»«EXPAND _getParser FOREACH labels»«ENDDEFINE»
«DEFINE _getParsers FOR gmfgen::GenLink»«EXPAND _getParser FOREACH labels»«ENDDEFINE»
«DEFINE _getParsers FOR gmfgen::GenChildLabelNode»«EXPAND _getParser(this) FOR labelModelFacet»«ENDDEFINE»
«DEFINE _getParser FOR gmfgen::GenLabel»«EXPAND _getParser(this) FOR modelFacet»«ENDDEFINE»

«DEFINE _getParser(gmfgen::GenCommonBase element) FOR gmfgen::LabelModelFacet»«ENDDEFINE»

«DEFINE _getParser(gmfgen::GenCommonBase element) FOR gmfgen::FeatureLabelModelFacet-»
	«EXPAND xpt::Common::caseVisualID FOR element» return «parserAccessorName(element)»();
«ENDDEFINE»
