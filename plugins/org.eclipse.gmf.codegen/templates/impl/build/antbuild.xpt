/*
 * Copyright (c) 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION impl::build::BuildUtils /*gmf::EMFUtils*/»

«DEFINE Main FOR gmfgen::GenEditorGenerator-»
<?xml version="1.0" encoding="UTF-8"?>
<project default="main" xmlns:xpt="eclipse.org/gmf/2008/xpand">
<!-- Ant script analogous to org.eclipse.gmf.codegen.util.Generator -->

  <!-- Input, EMF Resource URI (just resource, not GenEditorGenerator element) -->
  <property name="inputURI" value="«self.uri().substringBefore('#' + self.uriFragment())»"/>
  <property name="outputRoot" value="c:/temp"/>«REM»TODO: Perhaps, may use empty for workspace? Need to check generation task impl«ENDREM»<!-- ${osgi.instance.area} -->


  <target name="main" depends="init">
«EXPAND mainTarget-»
  </target>

«EXPAND externalizeSupportTask»
«EXPAND sharedCommandsTask»
«EXPAND parsersTask FOR labelParsers-»
«EXPAND editpoliciesTask FOR diagram»
«EXPAND providersTask FOR diagram»
«REM»
«EXPAND elementtypeTask»
«EXPAND validationTask»
«EXPAND auditsmetricsTask»
«ENDREM»
«EXPAND diagramupdateTask FOR diagramUpdater-»
«EXPAND preferencesTask FOR diagram-»
«EXPAND editorTask FOR editor»
«EXPAND navigatorTask FOR navigator-»
«EXPAND propertysheetTask FOR propertySheet-»
«EXPAND pluginTask FOR plugin»
«EXPAND rcpApplicationTask FOR application-»
«EXPAND actionsTask-»

  <target name="init">
    
    <!-- Destination -->
    <property name="outputPluginRoot" value="${outputRoot}/«plugin.iD»/"/>
    <property name="outputJavaRoot" value="${outputPluginRoot}/src/"/>
    <!-- Template location -->
    <property name="templateRoot" value="platform:/plugin/org.eclipse.gmf.codegen/templates/«IF dynamicTemplates»,«self.templateDirectory»«ENDIF»"/>
    <!-- Template names -->
    <property name="NodeItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::NodeItemSemanticEditPolicy::NodeItemSemanticEditPolicy"/>
    <property name="CreateNodeCommandEmitter" value="xpt::diagram::commands::CreateNodeCommand::CreateNodeCommand"/>
    <property name="NodeEditPartEmitter" value="diagram::editparts::NodeEditPart::Main"/>
    <property name="OpenDiagramEditPolicyEmitter" value="xpt::diagram::editpolicies::OpenDiagram::OpenDiagram"/>
    <property name="ChildContainerCanonicalEditPolicyEmitter" value="xpt::diagram::editpolicies::ChildContainerCanonicalEditPolicy::ChildContainerCanonicalEditPolicy"/>
    <property name="GraphicalNodeEditPolicyEmitter" value="xpt::diagram::editpolicies::GraphicalNodeEditPolicy::GraphicalNodeEditPolicy"/>
    <property name="ExternalNodeLabelEditPartEmitter" value="diagram::editparts::ExternalNodeLabelEditPart::Main"/>
    <property name="NodeLabelEditPartEmitter" value="diagram::editparts::NodeLabelEditPart::Main"/>
    <property name="ChildNodeLabelEditPartEmitter" value="diagram::editparts::ChildNodeLabelEditPart::Main"/>
    <property name="CompartmentEditPartEmitter" value="diagram::editparts::CompartmentEditPart::Main"/>
    <property name="CompartmentItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::CompartmentItemSemanticEditPolicy::CompartmentItemSemanticEditPolicy"/>
    <property name="LinkEditPartEmitter" value="diagram::editparts::LinkEditPart::Main"/>
    <property name="LinkItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::LinkItemSemanticEditPolicy::LinkItemSemanticEditPolicy"/>
    <property name="LinkLabelEditPartEmitter" value="diagram::editparts::LinkLabelEditPart::Main"/>
    <property name="CreateLinkCommandEmitter" value="xpt::diagram::commands::CreateLinkCommand::Main"/>
    <property name="ReorientLinkCommandEmitter" value="xpt::diagram::commands::ReorientLinkCommand::ReorientLinkCommand"/>
    <property name="ReorientRefLinkCommandEmitter" value="xpt::diagram::commands::ReorientRefLinkCommand::ReorientRefLinkCommand"/>
    <property name="EditHelperEmitter" value="xpt::diagram::edithelpers::EditHelper::EditHelper"/>
    <property name="EditHelperAdviceEmitter" value="xpt::diagram::edithelpers::EditHelperAdvice::EditHelperAdvice"/>
    <property name="DiagramEditPartEmitter" value="diagram::editparts::DiagramEditPart::Main"/>
    <property name="EditPartFactoryEmitter" value="xpt::diagram::editparts::EditPartFactory::EditPartFactory"/>
    <property name="ElementInitializersEmitter" value="xpt::providers::ElementInitializers::ElementInitializers"/>
    <property name="ElementTypesEmitter" value="xpt::providers::ElementTypes::ElementTypes"/>
    <!-- Preferences -->
    <property name="PreferenceInitializerEmitter" value="xpt::diagram::preferences::PreferenceInitializer::PreferenceInitializer"/>
    <property name="CustomPreferencePageEmitter" value="impl::preferences::CustomPage::Main"/>
    <property name="StandardPreferencePageEmitter" value="impl::preferences::StandardPage::Main"/>
    <!-- Property Sheet -->
    <property name="PropertySheetLabelProviderEmitter" value="xpt::propsheet::LabelProvider::Class"/>
    <property name="PropertySectionEmitter" value="xpt::propsheet::PropertySection::Class"/>
    <!-- Navigator -->
    <property name="NavigatorContentProviderEmitter" value="xpt::navigator::NavigatorContentProvider::NavigatorContentProvider"/>
    <property name="NavigatorLabelProviderEmitter" value="xpt::navigator::NavigatorLabelProvider::NavigatorLabelProvider"/>
    <property name="NavigatorLinkHelperEmitter" value="xpt::navigator::NavigatorLinkHelper::NavigatorLinkHelper"/>
    <property name="NavigatorSorterEmitter" value="xpt::navigator::NavigatorSorter::NavigatorSorter"/>
    <property name="NavigatorActionProviderEmitter" value="xpt::navigator::NavigatorActionProvider::NavigatorActionProvider"/>
    <property name="AbstractNavigatorItemEmitter" value="xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem"/>
    <property name="NavigatorGroupEmitter" value="xpt::navigator::NavigatorGroup::NavigatorGroup"/>
    <property name="NavigatorItemEmitter" value="xpt::navigator::NavigatorItem::NavigatorItem"/>
    <!-- <property name="navigator group icon" value=""/> -->
    <property name="DomainNavigatorContentProviderEmitter" value="xpt::navigator::DomainNavigatorContentProvider::DomainNavigatorContentProvider"/>
    <property name="DomainNavigatorLabelProviderEmitter" value="xpt::navigator::DomainNavigatorLabelProvider::DomainNavigatorLabelProvider"/>
    <property name="DomainNavigatorItemEmitter" value="xpt::navigator::DomainNavigatorItem::DomainNavigatorItem"/>
    <property name="URIEditorInputTesterEmitter" value="xpt::editor::UriEditorInputTester::UriEditorInputTester"/>
    <!-- Diagram Updater -->
    <property name="DiagramUpdaterEmitter" value="xpt::diagram::updater::DiagramUpdater::DiagramUpdater"/>
    <property name="UpdateCommandEmitter" value="xpt::diagram::updater::UpdateCommand::UpdateCommand"/>
    <property name="NodeDescriptorEmitter" value="xpt::diagram::updater::NodeDescriptor::NodeDescriptor"/>
    <property name="LinkDescriptorEmitter" value="xpt::diagram::updater::LinkDescriptor::LinkDescriptor"/>
    <!--Plugin -->
    <property name="ActivatorEmitter" value="xpt::plugin::Activator::Activator"/>
    <property name="BundleManifestEmitter" value="xpt::plugin::manifest::manifest"/>
    <property name="PluginXmlEmitter" value="xpt::plugin::plugin::plugin"/>
    <property name="PluginPropertiesEmitter" value="xpt::plugin::properties::properties"/>
    <property name="BuildPropertiesEmitter" value="xpt::plugin::build::build"/>
    <property name="OptionsFileEmitter" value="xpt::plugin::options::options"/>
    <!-- Editor -->
    <property name="EditorEmitter" value="xpt::editor::Editor::Editor"/>
    <property name="ActionBarContributorEmitter" value="xpt::editor::ActionBarContributor::ActionBarContributor"/>
    <property name="PaletteEmitter" value="xpt::editor::palette::PaletteFactory::Factory"/>
    <property name="DiagramEditorUtilEmitter" value="xpt::editor::DiagramEditorUtil::DiagramEditorUtil"/>
    <property name="VisualIDRegistryEmitter" value="xpt::editor::VisualIDRegistry::VisualIDRegistry"/>
    <property name="MatchingStrategyEmitter" value="xpt::editor::MatchingStrategy::MatchingStrategy"/>
    <property name="DocumentProviderEmitter" value="xpt::editor::DocumentProvider::DocumentProvider"/>
    <!-- RCP Application -->
    <property name="ApplicationEmitter" value="xpt::application::Application::Application"/>
    <property name="ActionBarAdvisorEmitter" value="xpt::application::ActionBarAdvisor::ActionBarAdvisor"/>
    <property name="PerspectiveEmitter" value="xpt::application::Perspective::Perspective"/>
    <property name="WorkbenchAdvisorEmitter" value="xpt::application::WorkbenchAdvisor::WorkbenchAdvisor"/>
    <property name="WorkbenchWindowAdvisorEmitter" value="xpt::application::WorkbenchWindowAdvisor::WorkbenchWindowAdvisor"/>
    <property name="WizardNewFileCreationPageEmitter" value="xpt::application::WizardNewFileCreationPage::WizardNewFileCreationPage"/>
    <!-- Actions -->
    <property name="CustomActionEmitter" value="impl::actions::CustomAction::Main"/>
    <property name="PredefinedActionEmitter" value="impl::actions::PredefinedAction::Main"/>
    <!-- String externalization -->
    <property name="ExternalizeEmitter" value="xpt::Externalizer::Access"/>
    <property name="MessagesEmitter" value="xpt::Externalizer::Values"/>
    <!-- -->
    <property name="ReorientLinkViewCommandEmitter" value="xpt::diagram::commands::ReorientLinkViewCommand::ReorientLinkViewCommand"/>
    <!-- Parsers -->
    <property name="AbstractParserEmitter" value="impl::parsers::AbstractParser::Main"/>
    <property name="PredefinedParserEmitter" value="parsers::PredefinedParser::Main"/>
    <property name="CustomParserEmitter" value="parsers::CustomParser::Main"/>
    <!-- Providers -->
    <property name="ViewProviderEmitter" value="xpt::providers::ViewProvider::ViewProvider"/>
    <property name="EditPartProviderEmitter" value="xpt::providers::EditPartProvider::EditPartProvider"/>
    <property name="ModelingAssistantProviderEmitter" value="xpt::providers::ModelingAssistantProvider::ModelingAssistantProvider"/>
    <property name="IconProviderEmitter" value="xpt::providers::IconProvider::IconProvider"/>
    <property name="ParserProviderEmitter" value="parsers::ParserProvider::Main"/>
    <!-- Edit Policy --> 
    <property name="TextSelectionEditPolicyEmitter" value="xpt::diagram::editpolicies::TextFeedback::TextSelectionEditPolicy"/>
    <property name="TextNonResizableEditPolicyEmitter" value="xpt::diagram::editpolicies::TextFeedback::TextNonResizableEditPolicy"/>
    <!--
    <property name="" value=""/>
    <property name="" value=""/>
    <property name="" value=""/> 
    -->
    <!-- -->
  </target>

«EXPAND additions»
</project>
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenEditorGenerator»«ENDDEFINE»

«DEFINE mainTarget FOR gmfgen::GenEditorGenerator-»
    <antcall target="externalize-support"/>
    <antcall target="shared-commands"/>

«EXPAND generateNode FOREACH diagram.topLevelNodes-»
«EXPAND generateChildNode FOREACH diagram.childNodes-»
«EXPAND generateCompartment FOREACH diagram.compartments-»
«EXPAND generateLink FOREACH diagram.links-»
«EXPAND generateDiagram FOR diagram-»

    <antcall target="shared-edit-policy"/>
    <antcall target="providers"/>

    <antcall target="diagramupdate"/>
    <antcall target="preferences"/>
    <antcall target="editor"/>
    <antcall target="plugin"/>

«IF not labelParsers.oclIsUndefined()-»
    <antcall target="parsers"/>
«ENDIF-»
«IF not propertySheet.oclIsUndefined()-»
    <antcall target="propertysheet"/>
«ENDIF-»
«IF not navigator.oclIsUndefined()-»
    <antcall target="navigator"/>
«ENDIF-»
«IF not application.oclIsUndefined()-»
    <antcall target="rcp-app"/>
«ENDIF-»
«IF contextMenus->notEmpty()-»
    <antcall target="actions"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE sharedCommandsTask FOR gmfgen::GenEditorGenerator-»
  <target name="shared-commands">
«IF diagram.getAllNodes()->exists(n | not n.modelFacet.oclIsUndefined() and n.reorientedIncomingLinks->notEmpty()) /*see below GraphicalNodeEditPolicyEmitter condition*/-»
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«diagram.uriFragment()»">
      <xpt:template name="${ReorientLinkViewCommandEmitter}" outfile="${outputJavaRoot}/«diagram.getReorientConnectionViewCommandQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
«ENDIF-»
  </target>
«ENDDEFINE»

«DEFINE parsersTask FOR gmfgen::GenParsers-»
  <target name="parsers">
    <xpt:template-set templateRoot="${templateRoot}">
«EXPAND invokeParserTemplate FOREACH implementations-»
«IF implementations->exists(i | i.oclIsKindOf(gmfgen::PredefinedParser))-»
      <xpt:template name="${AbstractParserEmitter}" outfile="${outputJavaRoot}/«implPackageName.replace('.','/')»/AbstractParser.java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF-»
    </xpt:template-set>
  </target>
«ENDDEFINE»

«DEFINE invokeParserTemplate FOR gmfgen::GenParserImplementation»«ERROR 'Abstract template invokeParserTemplate for '.concat(self.repr())»«ENDDEFINE»

«DEFINE invokeParserTemplate FOR gmfgen::PredefinedParser-»
      <xpt:template name="${PredefinedParserEmitter}" outfile="${outputJavaRoot}/«getQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»
«DEFINE invokeParserTemplate FOR gmfgen::CustomParser-»
«IF generateBoilerplate-»
      <xpt:template name="${CustomParserEmitter}" outfile="${outputJavaRoot}/«qualifiedName.replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF-»
«ENDDEFINE»


«REM»
                                           N O D E
«ENDREM»


«DEFINE generateNode FOR gmfgen::GenNode-»
    <!-- Node «visualID» -->
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
«EXPAND generateNodeItemSemanticEditPolicy-»
«EXPAND generateCreateNodeCommand-»
«EXPAND generateEditSupport-»
      <xpt:template name="${NodeEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java"/>
«EXPAND generateBehaviours-»
«EXPAND generateChildContainerCanonicalEditPolicy-»
«IF not modelFacet.oclIsUndefined() and reorientedIncomingLinks->notEmpty()-»
      <xpt:template name="${GraphicalNodeEditPolicyEmitter}" outfile="${outputJavaRoot}/«getGraphicalNodeEditPolicyQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«EXPAND generateLabel FOREACH labels-»
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateLabel FOR gmfgen::GenExternalNodeLabel-»
      <xpt:template name="${ExternalNodeLabelEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«DEFINE generateLabel FOR gmfgen::GenNodeLabel-»
      <xpt:template name="${NodeLabelEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«DEFINE generateBehaviours FOR gmfgen::GenCommonBase-»
«EXPAND generateOpenDiagramEditPolicy FOREACH behaviour[gmfgen::OpenDiagramBehaviour] /*FIXME take into account shared behaviors! */-»
«ENDDEFINE»

«DEFINE generateOpenDiagramEditPolicy FOR gmfgen::OpenDiagramBehaviour-»
      <xpt:template name="${OpenDiagramEditPolicyEmitter}" outfile="${outputJavaRoot}/«getEditPolicyQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«DEFINE generateNodeItemSemanticEditPolicy FOR gmfgen::GenNode-»
«IF not sansDomain-»
      <xpt:template name="${NodeItemSemanticEditPolicyEmitter}" outfile="${outputJavaRoot}/«getItemSemanticEditPolicyQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE generateCreateNodeCommand FOR gmfgen::GenNode-»
«IF not modelFacet.oclIsUndefined()-»
      <xpt:template name="${CreateNodeCommandEmitter}" outfile="${outputJavaRoot}/«getCreateCommandQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE generateEditSupport FOR gmfgen::GenCommonBase-»
«IF not elementType.definedExternally-»
«EXPAND generateEditHelperOrAdvice FOR elementType-»
«ENDIF-»
«ENDDEFINE»

«DEFINE generateEditHelperOrAdvice FOR gmfgen::ElementType»«ERROR 'Abstract template generateEditHelperOrAdvice for ' + self.repr()»«ENDDEFINE»
«DEFINE generateEditHelperOrAdvice FOR gmfgen::SpecializationType-»
«IF self.editHelperAdviceClassName <> null /*eIsSet*/-»
      <xpt:template name="${EditHelperAdviceEmitter}" outfile="${outputJavaRoot}/«getEditHelperAdviceQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF-»
«ENDDEFINE»
«DEFINE generateEditHelperOrAdvice FOR gmfgen::MetamodelType-»
      <xpt:template name="${EditHelperEmitter}" outfile="${outputJavaRoot}/«getEditHelperQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«DEFINE generateChildContainerCanonicalEditPolicy FOR gmfgen::GenChildContainer-»
«IF needsCanonicalEditPolicy()-»
      <xpt:template name="${ChildContainerCanonicalEditPolicyEmitter}" outfile="${outputJavaRoot}/«getCanonicalEditPolicyQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«ENDDEFINE»

«REM»
  <target name="generateNode">
    <xpt:template name="" inputURI="${inputURI}" templateroot="${templateRoot}" outfile="${outputJavaRoot}/getItemSemanticEditPolicyQualifiedClassName().replace('.','/')"/>
  </target>
«ENDREM»


«REM»
                                           C H I L D  N O D E
«ENDREM»

«DEFINE generateChildNode FOR gmfgen::GenChildLabelNode-»
    <!-- Child Node «visualID» -->
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
«EXPAND generateNodeItemSemanticEditPolicy-»
«EXPAND generateCreateNodeCommand-»
«EXPAND generateEditSupport-»
«EXPAND generateBehaviours-»
      <xpt:template name="${ChildNodeLabelEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateChildNode FOR gmfgen::GenChildNode»«EXPAND generateNode»«ENDDEFINE»

«REM»
                                           C O M P A R T M E N T
«ENDREM»

«DEFINE generateCompartment FOR gmfgen::GenCompartment-»
    <!-- Compartment «visualID» -->
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${CompartmentEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java"/>
«IF not sansDomain-»
      <xpt:template name="${CompartmentItemSemanticEditPolicyEmitter}" outfile="${outputJavaRoot}/«getItemSemanticEditPolicyQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«EXPAND generateChildContainerCanonicalEditPolicy-»
    </xpt:template-set>
«ENDDEFINE»

«REM»
                                           L I N K
«ENDREM»

«DEFINE generateLink FOR gmfgen::GenLink-»
    <!-- Link «visualID» -->
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
«EXPAND generateEditSupport-»
      <xpt:template name="${LinkEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java"/>
«EXPAND generateBehaviours-»
«IF not sansDomain-»
      <xpt:template name="${LinkItemSemanticEditPolicyEmitter}" outfile="${outputJavaRoot}/«getItemSemanticEditPolicyQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«IF not modelFacet.oclIsUndefined() and (targetReorientingAllowed or sourceReorientingAllowed)-»
      <xpt:template name="${CreateLinkCommandEmitter}" outfile="${outputJavaRoot}/«getCreateCommandQualifiedClassName().replace('.','/')».java"/>
«IF modelFacet.oclIsKindOf(gmfgen::TypeLinkModelFacet)-»
      <xpt:template name="${ReorientLinkCommandEmitter}" outfile="${outputJavaRoot}/«getReorientCommandQualifiedClassName().replace('.','/')».java"/>
«ELSEIF modelFacet.oclIsKindOf(gmfgen::FeatureLinkModelFacet)-»
      <xpt:template name="${ReorientRefLinkCommandEmitter}" outfile="${outputJavaRoot}/«getReorientCommandQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
«ENDIF-»
«EXPAND generateLinkLabel FOREACH labels-»
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateLinkLabel FOR gmfgen::GenLinkLabel-»
      <xpt:template name="${LinkLabelEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«REM»
                                           D I A G R A M
«ENDREM»

«DEFINE generateDiagram FOR gmfgen::GenDiagram-»
    <!-- Diagram «visualID» -->
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
«EXPAND generateEditSupport-»
      <xpt:template name="${DiagramEditPartEmitter}" outfile="${outputJavaRoot}/«getEditPartQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${EditPartFactoryEmitter}" outfile="${outputJavaRoot}/«getEditPartFactoryQualifiedClassName().replace('.','/')».java"/>«REM» Although, EPFactory is rather about editor, not diagram«ENDREM»
      <xpt:template name="${ElementInitializersEmitter}" outfile="${outputJavaRoot}/«providersPackageName.replace('.','/')»/ElementInitializers.java"/>
      <xpt:template name="${ElementTypesEmitter}" outfile="${outputJavaRoot}/«getElementTypesQualifiedClassName().replace('.','/')».java"/>
«EXPAND generateBehaviours-»
    </xpt:template-set>
«ENDDEFINE»

«REM»
                                           P R E F E R E N C E S
«ENDREM»

«DEFINE preferencesTask FOR gmfgen::GenDiagram-»
  <target name="preferences">
    <xpt:template name="${PreferenceInitializerEmitter}" outfile="${outputJavaRoot}/«preferencesPackageName.replace('.','/')»/DiagramPreferenceInitializer.java"«REM» FIXME - in Generator.java, classname is taken from template - get rid of that practice «ENDREM» 
      templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»"/>
«EXPAND generatePreferencePage FOREACH preferencePages-»
  </target>
«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenPreferencePage»«ERROR 'Abstract template generatePreferencePage for' + self.repr()»«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenCustomPreferencePage-»
«IF generateBoilerplate-»
    <xpt:template name="${CustomPreferencePageEmitter}" outfile="${outputJavaRoot}/«qualifiedClassName.replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF-»
«EXPAND generatePreferencePage FOREACH children-»
«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenStandardPreferencePage-»
«IF kind <> gmfgen::StandardPreferencePages::Pathmaps-»
    <xpt:template name="${StandardPreferencePageEmitter}" outfile="${outputJavaRoot}/«getQualifiedClassName().replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF-»
«EXPAND generatePreferencePage FOREACH children-»
«ENDDEFINE»

«REM»
                                           P R O P E R T Y  S H E E T
«ENDREM»

«DEFINE propertysheetTask FOR gmfgen::GenPropertySheet-»
  <target name="propertysheet">
      <xpt:template name="${PropertySheetLabelProviderEmitter}" outfile="${outputJavaRoot}/«getLabelProviderQualifiedClassName().replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»"/>
«FOREACH tabs[gmfgen::GenCustomPropertyTab] AS t-»
      <xpt:template name="${PropertySectionEmitter}" outfile="${outputJavaRoot}/«t.getQualifiedClassName().replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«t.uriFragment()»"/>
«ENDFOREACH-»
  </target>
«ENDDEFINE»

«REM»
                                           N A V I G A T O R
«ENDREM»

«DEFINE navigatorTask FOR gmfgen::GenNavigator-»
  <target name="navigator">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${NavigatorContentProviderEmitter}" outfile="${outputJavaRoot}/«getContentProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorLabelProviderEmitter}" outfile="${outputJavaRoot}/«getLabelProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorLinkHelperEmitter}" outfile="${outputJavaRoot}/«getLinkHelperQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorSorterEmitter}" outfile="${outputJavaRoot}/«getSorterQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorActionProviderEmitter}" outfile="${outputJavaRoot}/«getActionProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${AbstractNavigatorItemEmitter}" outfile="${outputJavaRoot}/«getAbstractNavigatorItemQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorGroupEmitter}" outfile="${outputJavaRoot}/«getNavigatorGroupQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NavigatorItemEmitter}" outfile="${outputJavaRoot}/«getNavigatorItemQualifiedClassName().replace('.','/')».java"/>
      <!--
        Can't generate binary files now
        xpt:template name="/xpt/navigator/navigatorGroup.gif" outfile="${outputJavaRoot}/«FOREACH childReferences->select(not groupIcon.oclIsUndefined() and groupIcon.size() > 0 ).groupIcon->asOrderedSet() AS f SEPARATOR ';'»«f»«ENDFOREACH»"/ 
      -->
«IF generateDomainModelNavigator and not editorGen.domainGenModel.oclIsUndefined()-»
      <!-- Naviagator for domain model -->
      <xpt:template name="${DomainNavigatorContentProviderEmitter}" outfile="${outputJavaRoot}/«getDomainContentProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${DomainNavigatorLabelProviderEmitter}" outfile="${outputJavaRoot}/«getDomainLabelProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${DomainNavigatorItemEmitter}" outfile="${outputJavaRoot}/«getDomainNavigatorItemQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${URIEditorInputTesterEmitter}" outfile="${outputJavaRoot}/«getUriInputTesterQualifiedClassName().replace('.','/')».java"/>
«ENDIF-»
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           E D I T O R
«ENDREM»

«DEFINE editorTask FOR gmfgen::GenEditorView-»
  <target name="editor">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${EditorEmitter}" outfile="${outputJavaRoot}/«getQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${ActionBarContributorEmitter}" outfile="${outputJavaRoot}/«getActionBarContributorQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
«IF not editorGen.diagram.palette.oclIsUndefined()-»
    <xpt:template name="${PaletteEmitter}" outfile="${outputJavaRoot}/«editorGen.diagram.palette.getFactoryQualifiedClassName().replace('.','/')».java" templateRoot="${templateRoot}" inputURI="${inputURI}#«editorGen.diagram.palette.uriFragment()»"/>
«ENDIF-»
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«editorGen.diagram.uriFragment()»">
      <xpt:template name="${DiagramEditorUtilEmitter}" outfile="${outputJavaRoot}/«packageName.replace('.','/')»/«editorGen.diagram.diagramEditorUtilClassName».java"/>
      <xpt:template name="${VisualIDRegistryEmitter}" outfile="${outputJavaRoot}/«editorGen.diagram.getVisualIDRegistryQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${MatchingStrategyEmitter}" outfile="${outputJavaRoot}/«editorGen.diagram.getMatchingStrategyQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${DocumentProviderEmitter}" outfile="${outputJavaRoot}/«editorGen.diagram.getDocumentProviderQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           P L U G I N
«ENDREM»

«DEFINE pluginTask FOR gmfgen::GenPlugin-»
  <target name="plugin">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${ActivatorEmitter}" outfile="${outputJavaRoot}/«getActivatorQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${BundleManifestEmitter}" outfile="${outputPluginRoot}/META-INF/MANIFEST.MF"/>
      <xpt:template name="${PluginXmlEmitter}" outfile="${outputPluginRoot}/plugin.xml"/>
      <xpt:template name="${PluginPropertiesEmitter}" outfile="${outputPluginRoot}/plugin.properties"/>
      <xpt:template name="${BuildPropertiesEmitter}" outfile="${outputPluginRoot}/build.properties"/>
      <xpt:template name="${OptionsFileEmitter}" outfile="${outputPluginRoot}/.options"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           D I A G R A M  U P D A T E R
«ENDREM»

«DEFINE diagramupdateTask FOR gmfgen::GenDiagramUpdater-»
  <target name="diagramupdate">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${DiagramUpdaterEmitter}" outfile="${outputJavaRoot}/«getDiagramUpdaterQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${UpdateCommandEmitter}" outfile="${outputJavaRoot}/«getUpdateCommandQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${NodeDescriptorEmitter}" outfile="${outputJavaRoot}/«getNodeDescriptorQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${LinkDescriptorEmitter}" outfile="${outputJavaRoot}/«getLinkDescriptorQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           R C P     A P P L I C A T I O N
«ENDREM»
«DEFINE rcpApplicationTask FOR gmfgen::GenApplication-»
  <target name="rcp-app">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${ApplicationEmitter}" outfile="${outputJavaRoot}/«getQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${ActionBarAdvisorEmitter}" outfile="${outputJavaRoot}/«getActionBarAdvisorQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${PerspectiveEmitter}" outfile="${outputJavaRoot}/«getPerspectiveQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${WorkbenchAdvisorEmitter}" outfile="${outputJavaRoot}/«getWorkbenchAdvisorQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${WorkbenchWindowAdvisorEmitter}" outfile="${outputJavaRoot}/«getWorkbenchWindowAdvisorQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${WizardNewFileCreationPageEmitter}" outfile="${outputJavaRoot}/«packageName.replace('.','/')»/WizardNewFileCreationPage.java"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           A C T I O N S
                                           FIXME: handle duplicates (processedItems in the original Generator code)
«ENDREM»

«DEFINE actionsTask FOR gmfgen::GenEditorGenerator-»
«IF contextMenus->notEmpty()-»
  <target name="actions">
    <xpt:template-set templateRoot="${templateRoot}">
«FOREACH contextMenus AS m-»
«EXPAND invokeActionTemplate FOREACH m.items-»
«ENDFOREACH-»
    </xpt:template-set>
  </target>
«ENDIF-»
«ENDDEFINE»

«DEFINE invokeActionTemplate FOR gmfgen::GenContributionItem»«ERROR 'Abstract template invokeActionTemplate for '.concat(self.repr())»«ENDDEFINE»
«DEFINE invokeActionTemplate FOR gmfgen::GenCustomAction-»
«IF generateBoilerplate /* and not processedItems->contains(self) FIXME processedItems : List(gmfgen::GenContributionItem)*/»
      <xpt:template name="${CustomActionEmitter}" outfile="${outputJavaRoot}/«qualifiedClassName.replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDIF»
«ENDDEFINE»
«DEFINE invokeActionTemplate FOR gmfgen::GenContributionManager-»
«EXPAND invokeActionTemplate FOREACH items-»
«ENDDEFINE»
«DEFINE invokeActionTemplate FOR gmfgen::GenSharedContributionItem-»
«EXPAND invokeActionTemplate FOR actualItem-»
«ENDDEFINE»
«DEFINE invokeActionTemplate FOR gmfgen::GenAction-»
      <xpt:template name="${PredefinedActionEmitter}" outfile="${outputJavaRoot}/«qualifiedClassName.replace('.','/')».java" inputURI="${inputURI}#«uriFragment()»"/>
«ENDDEFINE»

«REM»
                                           E X T E R N A L I Z E        S U P P O R T
«ENDREM»
«DEFINE externalizeSupportTask FOR gmfgen::GenEditorGenerator-»
  <target name="externalize-support">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${ExternalizeEmitter}" outfile="${outputJavaRoot}/«editor.packageName.replace('.','/')»/Messages.java"/>
      <xpt:template name="${MessagesEmitter}" outfile="${outputPluginRoot}/messages.properties"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           P R O V I D E R S
«ENDREM»
«DEFINE providersTask FOR gmfgen::GenDiagram-»
  <target name="providers">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <xpt:template name="${ViewProviderEmitter}" outfile="${outputJavaRoot}/«getNotationViewProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${EditPartProviderEmitter}" outfile="${outputJavaRoot}/«getEditPartProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${ModelingAssistantProviderEmitter}" outfile="${outputJavaRoot}/«getModelingAssistantProviderQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${IconProviderEmitter}" outfile="${outputJavaRoot}/«getIconProviderQualifiedClassName().replace('.','/')».java"/>
«IF not editorGen.labelParsers.oclIsUndefined() and (editorGen.labelParsers.extensibleViaService or editorGen.labelParsers.implementations->exists(pi | not pi.oclIsKindOf(gmfgen::ExternalParser)) /*existsNonExternalParser*/)-»
      <xpt:template name="${ParserProviderEmitter}" outfile="${outputJavaRoot}/«editorGen.labelParsers.getQualifiedClassName().replace('.','/')».java" inputURI="${inputURI}#«editorGen.labelParsers.uriFragment()»"/>
«ENDIF-»
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           E D I T  P O L I C I E S
«ENDREM»
«DEFINE editpoliciesTask FOR gmfgen::GenDiagram-»
  <target name="shared-edit-policy">
    <xpt:template-set templateRoot="${templateRoot}" inputURI="${inputURI}#«uriFragment()»">
      <!-- BaseItem, -->
      <xpt:template name="${TextSelectionEditPolicyEmitter}" outfile="${outputJavaRoot}/«getTextSelectionEditPolicyQualifiedClassName().replace('.','/')».java"/>
      <xpt:template name="${TextNonResizableEditPolicyEmitter}" outfile="${outputJavaRoot}/«getTextNonResizableEditPolicyQualifiedClassName().replace('.','/')».java"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           whatever
«ENDREM»
