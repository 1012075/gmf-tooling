/*
 * Copyright (c) 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«DEFINE Main FOR gmfgen::GenEditorGenerator-»
<?xml version="1.0" encoding="UTF-8"?>
<project default="main" xmlns:xpt="eclipse.org/gmf/2008/xpand">
<!-- Ant script analogous to org.eclipse.gmf.codegen.util.Generator -->

  <target name="main" depends="init">
«EXPAND mainTarget-»
  </target>

  <target name="init">
    <!-- Destination -->
    <property name="outputRoot" value="c:\\temp"/>«REM»TODO: Perhaps, may use empty for workspace? Need to check generation task impl«ENDREM»
    <property name="outputPluginRoot" value="$outputRoot/«plugin.iD»/"/>
    <property name="outputJavaRoot" value="$outputPluginRoot/src/"/>
    <!-- Template location -->
    <property name="templateRoot" value="platform:/plugin/org.eclipse.gmf.codegen/templates/«IF dynamicTemplates»,«self.templateDirectory»«ENDIF»"/>
    <!-- Template names -->
    <property name="NodeItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::NodeItemSemanticEditPolicy"/>
    <property name="CreateNodeCommandEmitter" value="xpt::diagram::commands::CreateNodeCommand"/>
    <property name="NodeEditPartEmitter" value="diagram::editparts::NodeEditPart"/>
    <property name="OpenDiagramEditPolicyEmitter" value="xpt::diagram::editpolicies::OpenDiagram"/>
    <property name="ChildContainerCanonicalEditPolicyEmitter" value="xpt::diagram::editpolicies::ChildContainerCanonicalEditPolicy"/>
    <property name="GraphicalNodeEditPolicyEmitter" value="xpt::diagram::editpolicies::GraphicalNodeEditPolicy"/>
    <property name="ExternalNodeLabelEditPartEmitter" value="diagram::editparts::ExternalNodeLabelEditPart"/>
    <property name="NodeLabelEditPartEmitter" value="diagram::editparts::NodeLabelEditPart"/>
    <property name="ChildNodeLabelEditPartEmitter" value="diagram::editparts::ChildNodeLabelEditPart"/>
    <property name="CompartmentEditPartEmitter" value="diagram::editparts::CompartmentEditPart"/>
    <property name="CompartmentItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::CompartmentItemSemanticEditPolicy"/>
    <property name="LinkEditPartEmitter" value="diagram::editparts::LinkEditPart"/>
    <property name="LinkItemSemanticEditPolicyEmitter" value="xpt::diagram::editpolicies::LinkItemSemanticEditPolicy"/>
    <property name="LinkLabelEditPartEmitter" value="diagram::editparts::LinkLabelEditPart"/>
    <property name="CreateLinkCommandEmitter" value="xpt::diagram::commands::CreateLinkCommand::Main"/>
    <property name="ReorientLinkCommandEmitter" value="xpt::diagram::commands::ReorientLinkCommand"/>
    <property name="ReorientRefLinkCommandEmitter" value="xpt::diagram::commands::ReorientRefLinkCommand"/>
    <property name="EditHelperEmitter" value="xpt::diagram::edithelpers::EditHelper"/>
    <property name="EditHelperAdviceEmitter" value="xpt::diagram::edithelpers::EditHelperAdvice"/>
    <property name="DiagramEditPartEmitter" value="diagram::editparts::DiagramEditPart"/>
    <property name="EditPartFactoryEmitter" value="xpt::diagram::editparts::EditPartFactory"/>
    <property name="ElementInitializersEmitter" value="xpt::providers::ElementInitializers"/>
    <property name="ElementTypesEmitter" value="xpt::providers::ElementTypes"/>
    <!-- Preferences -->
    <property name="PreferenceInitializerEmitter" value="xpt::diagram::preferences::PreferenceInitializer"/>
    <property name="CustomPreferencePageEmitter" value="impl::preferences::CustomPage::Main"/>
    <property name="StandardPreferencePageEmitter" value="impl::preferences::StandardPage::Main"/>
    <!-- Property Sheet -->
    <property name="PropertySheetLabelProviderEmitter" value="xpt::propsheet::LabelProvider::Class"/>
    <property name="PropertySectionEmitter" value="xpt::propsheet::PropertySection::Class"/>
    <!-- Navigator -->
    <property name="NavigatorContentProviderEmitter" value="xpt::navigator::NavigatorContentProvider::NavigatorContentProvider"/>
    <property name="NavigatorLabelProviderEmitter" value="xpt::navigator::NavigatorLabelProvider::NavigatorLabelProvider"/>
    <property name="NavigatorLinkHelperEmitter" value="xpt::navigator::NavigatorLinkHelper::NavigatorLinkHelper"/>
    <property name="NavigatorSorterEmitter" value="xpt::navigator::NavigatorSorter::NavigatorSorter"/>
    <property name="NavigatorActionProviderEmitter" value="xpt::navigator::NavigatorActionProvider::NavigatorActionProvider"/>
    <property name="AbstractNavigatorItemEmitter" value="xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem"/>
    <property name="NavigatorGroupEmitter" value="xpt::navigator::NavigatorGroup::NavigatorGroup"/>
    <property name="NavigatorItemEmitter" value="xpt::navigator::NavigatorItem::NavigatorItem"/>
    <!-- <property name="navigator group icon" value=""/> -->
    <property name="DomainNavigatorContentProviderEmitter" value="xpt::navigator::DomainNavigatorContentProvider::DomainNavigatorContentProvider"/>
    <property name="DomainNavigatorLabelProviderEmitter" value="xpt::navigator::DomainNavigatorLabelProvider::DomainNavigatorLabelProvider"/>
    <property name="DomainNavigatorItemEmitter" value="xpt::navigator::DomainNavigatorItem::DomainNavigatorItem"/>
    <property name="URIEditorInputTesterEmitter" value="xpt::editor::UriEditorInputTester::UriEditorInputTester"/>
    <!-- Diagram Updater -->
    <property name="DiagramUpdaterEmitter" value="xpt::diagram::updater::DiagramUpdater::DiagramUpdater"/>
    <property name="UpdateCommandEmitter" value="xpt::diagram::updater::UpdateCommand::UpdateCommand"/>
    <property name="NodeDescriptorEmitter" value="xpt::diagram::updater::NodeDescriptor::NodeDescriptor"/>
    <property name="LinkDescriptorEmitter" value="xpt::diagram::updater::LinkDescriptor::LinkDescriptor"/>
    <!--Plugin -->
    <property name="ActivatorEmitter" value="xpt::plugin::Activator::Activator"/>
    <property name="BundleManifestEmitter" value="xpt::plugin::manifest::manifest"/>
    <property name="PluginXmlEmitter" value="xpt::plugin::plugin::plugin"/>
    <property name="PluginPropertiesEmitter" value="xpt::plugin::properties::properties"/>
    <property name="BuildPropertiesEmitter" value="xpt::plugin::build::build"/>
    <property name="OptionsFileEmitter" value="xpt::plugin::options::options"/>
    <!-- Editor -->
    <property name="EditorEmitter" value="xpt::editor::Editor::Editor"/>
    <property name="ActionBarContributorEmitter" value="xpt::editor::ActionBarContributor::ActionBarContributor"/>
    <property name="PaletteEmitter" value="xpt::editor::palette::PaletteFactory::Factory"/>
    <property name="DiagramEditorUtilEmitter" value="xpt::editor::DiagramEditorUtil::DiagramEditorUtil"/>
    <property name="VisualIDRegistryEmitter" value="xpt::editor::VisualIDRegistry::VisualIDRegistry"/>
    <property name="MatchingStrategyEmitter" value="xpt::editor::MatchingStrategy::MatchingStrategy"/>
    <property name="DocumentProviderEmitter" value="xpt::editor::DocumentProvider::DocumentProvider"/>
    <!-- property name="" value=""/>
    <property name="" value=""/>
    <property name="" value=""/ -->
    <!-- -->
  </target>

«EXPAND commandsTask»
«EXPAND parsersTask»
«REM»
«EXPAND externalizeTask»
«EXPAND editpolicyTask»
«EXPAND editpartTask»
«EXPAND providerTask»
«EXPAND elementtypeTask»
«EXPAND validationTask»
«EXPAND auditsmetricsTask»
«ENDREM»
«EXPAND diagramupdateTask FOR diagramUpdater-»
«EXPAND preferencesTask FOR diagram-»
«EXPAND editorTask FOR editor»
«EXPAND navigatorTask FOR navigator-»
«EXPAND propertysheetTask FOR propertySheet-»
«EXPAND pluginTask FOR plugin»
«EXPAND additions»
</project>
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenEditorGenerator»«ENDDEFINE»

«DEFINE mainTarget FOR gmfgen::GenEditorGenerator-»
    <antcall target="commands"/>
    <antcall target="parsers"/>

«EXPAND generateNode FOREACH diagram.topLevelNodes-»
«EXPAND generateChildNode FOREACH diagram.childNodes-»
«EXPAND generateCompartment FOREACH diagram.compartments-»
«EXPAND generateLink FOREACH diagram.links-»
«EXPAND generateDiagram FOR diagram-»

    <antcall target="diagramupdate"/>
    <antcall target="preferences"/>
    <antcall target="editor"/>
    <antcall target="plugin"/>

«IF not propertySheet.oclIsUndefined()-»
    <antcall target="propertysheet"/>
«ENDIF-»
«IF not navigator.oclIsUndefined()-»
    <antcall target="navigator"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE commandsTask FOR gmfgen::GenEditorGenerator-»
  <target name="commands">
  </target>
«ENDDEFINE»

«DEFINE parsersTask FOR gmfgen::GenEditorGenerator-»
  <target name="parsers">
  </target>
«ENDDEFINE»

«REM»
                                           N O D E
«ENDREM»


«DEFINE generateNode FOR gmfgen::GenNode-»
    <!-- Node «visualID» -->
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
«EXPAND generateNodeItemSemanticEditPolicy-»
«EXPAND generateCreateNodeCommand-»
«EXPAND generateEditSupport-»
      <xpt:template name="$NodeEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
«EXPAND generateBehaviours-»
«EXPAND generateChildContainerCanonicalEditPolicy-»
«IF not modelFacet.oclIsUndefined() and reorientedIncomingLinks->notEmpty()-»
      <xpt:template name="$GraphicalNodeEditPolicyEmitter" outfile="«getGraphicalNodeEditPolicyQualifiedClassName()»"/>
«ENDIF-»
«EXPAND generateLabel FOREACH labels-»
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateLabel FOR gmfgen::GenExternalNodeLabel-»
      <xpt:template name="$ExternalNodeLabelEditPartEmitter" outfile="«getEditPartQualifiedClassName()»" inputURI="«self»"/>
«ENDDEFINE»

«DEFINE generateLabel FOR gmfgen::GenNodeLabel-»
      <xpt:template name="$NodeLabelEditPartEmitter" outfile="«getEditPartQualifiedClassName()»" inputURI="«self»"/>
«ENDDEFINE»

«DEFINE generateBehaviours FOR gmfgen::GenCommonBase-»
«EXPAND generateOpenDiagramEditPolicy FOREACH behaviour[gmfgen::OpenDiagramBehaviour] /*FIXME take into account shared behaviors! */-»
«ENDDEFINE»

«DEFINE generateOpenDiagramEditPolicy FOR gmfgen::OpenDiagramBehaviour-»
      <xpt:template name="$OpenDiagramEditPolicyEmitter" outfile="«getEditPolicyQualifiedClassName()»" inputURI="«self»"/>
«ENDDEFINE»

«DEFINE generateNodeItemSemanticEditPolicy FOR gmfgen::GenNode-»
«IF not sansDomain-»
      <xpt:template name="$NodeItemSemanticEditPolicyEmitter" outfile="«getItemSemanticEditPolicyQualifiedClassName()»"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE generateCreateNodeCommand FOR gmfgen::GenNode-»
«IF not modelFacet.oclIsUndefined()-»
      <xpt:template name="$CreateNodeCommandEmitter" outfile="«getCreateCommandQualifiedClassName()»"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE generateEditSupport FOR gmfgen::GenCommonBase-»
«IF not elementType.definedExternally-»
«EXPAND generateEditHelperOrAdvice FOR elementType-»
«ENDIF-»
«ENDDEFINE»

«DEFINE generateEditHelperOrAdvice FOR gmfgen::ElementType»«ERROR 'Abstract template generateEditHelperOrAdvice for ' + self.repr()»«ENDDEFINE»
«DEFINE generateEditHelperOrAdvice FOR gmfgen::SpecializationType-»
«IF self.editHelperAdviceClassName <> null /*eIsSet*/-»
      <xpt:template name="$EditHelperAdviceEmitter" outfile="«getEditHelperAdviceQualifiedClassName()»"/>
«ENDIF-»
«ENDDEFINE»
«DEFINE generateEditHelperOrAdvice FOR gmfgen::MetamodelType-»
      <xpt:template name="$EditHelperEmitter" outfile="«getEditHelperQualifiedClassName()»"/>
«ENDDEFINE»

«DEFINE generateChildContainerCanonicalEditPolicy FOR gmfgen::GenChildContainer-»
«IF needsCanonicalEditPolicy()-»
      <xpt:template name="$ChildContainerCanonicalEditPolicyEmitter" outfile="«getCanonicalEditPolicyQualifiedClassName()»"/>
«ENDIF-»
«ENDDEFINE»

«REM»
  <target name="generateNode">
    <xpt:template name="" inputURI="$inputURI" templateroot="$templateRoot" outfile="getItemSemanticEditPolicyQualifiedClassName()"/>
  </target>
«ENDREM»


«REM»
                                           C H I L D  N O D E
«ENDREM»

«DEFINE generateChildNode FOR gmfgen::GenChildLabelNode-»
    <!-- Child Node «visualID» -->
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
«EXPAND generateNodeItemSemanticEditPolicy-»
«EXPAND generateCreateNodeCommand-»
«EXPAND generateEditSupport-»
«EXPAND generateBehaviours-»
      <xpt:template name="$ChildNodeLabelEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateChildNode FOR gmfgen::GenChildNode»«EXPAND generateNode»«ENDDEFINE»

«REM»
                                           C O M P A R T M E N T
«ENDREM»

«DEFINE generateCompartment FOR gmfgen::GenCompartment-»
    <!-- Compartment «visualID» -->
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
      <xpt:template name="$CompartmentEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
«IF not sansDomain-»
      <xpt:template name="$CompartmentItemSemanticEditPolicyEmitter" outfile="«getItemSemanticEditPolicyQualifiedClassName()»"/>
«ENDIF-»
«EXPAND generateChildContainerCanonicalEditPolicy-»
    </xpt:template-set>
«ENDDEFINE»

«REM»
                                           L I N K
«ENDREM»

«DEFINE generateLink FOR gmfgen::GenLink-»
    <!-- Link «visualID» -->
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
«EXPAND generateEditSupport-»
      <xpt:template name="$LinkEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
«EXPAND generateBehaviours-»
«IF not sansDomain-»
      <xpt:template name="$LinkItemSemanticEditPolicyEmitter" outfile="«getItemSemanticEditPolicyQualifiedClassName()»"/>
«ENDIF-»
«IF not modelFacet.oclIsUndefined() and (targetReorientingAllowed or sourceReorientingAllowed)-»
      <xpt:template name="$CreateLinkCommandEmitter" outfile="«getCreateCommandQualifiedClassName()»"/>
«IF modelFacet.oclIsKindOf(gmfgen::TypeLinkModelFacet)-»
      <xpt:template name="$ReorientLinkCommandEmitter" outfile="«getReorientCommandQualifiedClassName()»"/>
«ELSEIF modelFacet.oclIsKindOf(gmfgen::FeatureLinkModelFacet)-»
      <xpt:template name="$ReorientRefLinkCommandEmitter" outfile="«getReorientCommandQualifiedClassName()»"/>
«ENDIF-»
«ENDIF-»
«EXPAND generateLinkLabel FOREACH labels-»
    </xpt:template-set>
«ENDDEFINE»

«DEFINE generateLinkLabel FOR gmfgen::GenLinkLabel-»
      <xpt:template name="$LinkLabelEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
«ENDDEFINE»

«REM»
                                           D I A G R A M
«ENDREM»

«DEFINE generateDiagram FOR gmfgen::GenDiagram-»
    <!-- Diagram «visualID» -->
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
«EXPAND generateEditSupport-»
      <xpt:template name="$DiagramEditPartEmitter" outfile="«getEditPartQualifiedClassName()»"/>
      <xpt:template name="$EditPartFactoryEmitter" outfile="«getEditPartFactoryQualifiedClassName()»"/>«REM» Although, EPFactory is rather about editor, not diagram«ENDREM»
      <xpt:template name="$ElementInitializersEmitter" outfile="«providersPackageName».ElementInitializers"/>
      <xpt:template name="$ElementTypesEmitter" outfile="«getElementTypesQualifiedClassName()»"/>
«EXPAND generateBehaviours-»
    </xpt:template-set>
«ENDDEFINE»

«REM»
                                           P R E F E R E N C E S
«ENDREM»

«DEFINE preferencesTask FOR gmfgen::GenDiagram-»
  <target name="preferences">
    <xpt:template name="$PreferenceInitializerEmitter" outfile="«preferencesPackageName».DiagramPreferenceInitializer"«REM» FIXME - in Generator.java, classname is taken from template - get rid of that practice «ENDREM» 
      templateRoot="$templateRoot" inputURI="$inputURI"/>
«EXPAND generatePreferencePage FOREACH preferencePages-»
  </target>
«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenPreferencePage»«ERROR 'Abstract template generatePreferencePage for' + self.repr()»«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenCustomPreferencePage-»
«IF generateBoilerplate-»
    <xpt:template name="$CustomPreferencePageEmitter" outfile="«qualifiedClassName»" templateRoot="$templateRoot" inputURI="$inputURI"/>
«ENDIF-»
«EXPAND generatePreferencePage FOREACH children-»
«ENDDEFINE»

«DEFINE generatePreferencePage FOR gmfgen::GenStandardPreferencePage-»
«IF kind <> gmfgen::StandardPreferencePages::Pathmaps-»
    <xpt:template name="$StandardPreferencePageEmitter" outfile="«getQualifiedClassName()»" templateRoot="$templateRoot" inputURI="$inputURI"/>
«ENDIF-»
«EXPAND generatePreferencePage FOREACH children-»
«ENDDEFINE»

«REM»
                                           P R O P E R T Y  S H E E T
«ENDREM»

«DEFINE propertysheetTask FOR gmfgen::GenPropertySheet-»
  <target name="propertysheet">
      <xpt:template name="$PropertySheetLabelProviderEmitter" outfile="«getLabelProviderQualifiedClassName()»" templateRoot="$templateRoot" inputURI="$inputURI"/>
«FOREACH tabs[gmfgen::GenCustomPropertyTab] AS t-»
      <xpt:template name="$PropertySectionEmitter" outfile="«t.getQualifiedClassName()»" templateRoot="$templateRoot" inputURI="«t»"/>
«ENDFOREACH-»
  </target>
«ENDDEFINE»

«REM»
                                           N A V I G A T O R
«ENDREM»

«DEFINE navigatorTask FOR gmfgen::GenNavigator-»
  <target name="navigator">
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
      <xpt:template name="$NavigatorContentProviderEmitter" outfile="«getContentProviderQualifiedClassName()»"/>
      <xpt:template name="$NavigatorLabelProviderEmitter" outfile="«getLabelProviderQualifiedClassName()»"/>
      <xpt:template name="$NavigatorLinkHelper" outfile="«getLinkHelperQualifiedClassName()»"/>
      <xpt:template name="$NavigatorSorter" outfile="«getSorterQualifiedClassName()»"/>
      <xpt:template name="$NavigatorActionProvider" outfile="«getActionProviderQualifiedClassName()»"/>
      <xpt:template name="$AbstractNavigatorItemEmitter" outfile="«getAbstractNavigatorItemQualifiedClassName()»"/>
      <xpt:template name="$NavigatorGroupEmitter" outfile="«getNavigatorGroupQualifiedClassName()»"/>
      <xpt:template name="$NavigatorItemEmitter" outfile="«getNavigatorItemQualifiedClassName()»"/>
      <!--
        Can't generate binary files now
        xpt:template name="/xpt/navigator/navigatorGroup.gif" outfile="«FOREACH childReferences->select(not groupIcon.oclIsUndefined() and groupIcon.size() > 0 ).groupIcon->asOrderedSet() AS f SEPARATOR ';'»«f»«ENDFOREACH»"/ 
      -->
«IF generateDomainModelNavigator and not editorGen.domainGenModel.oclIsUndefined()-»
      <!-- Naviagator for domain model -->
      <xpt:template name="$DomainNavigatorContentProviderEmitter" outfile="«getDomainContentProviderQualifiedClassName()»"/>
      <xpt:template name="$DomainNavigatorLabelProviderEmitter" outfile="«getDomainLabelProviderQualifiedClassName()»"/>
      <xpt:template name="$DomainNavigatorItemEmitter" outfile="«getDomainNavigatorItemQualifiedClassName()»"/>
      <xpt:template name="$URIEditorInputTesterEmitter" outfile="«getUriInputTesterQualifiedClassName()»"/>
«ENDIF-»
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           E D I T O R
«ENDREM»

«DEFINE editorTask FOR gmfgen::GenEditorView-»
  <target name="editor">
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">«REM»FIXME GenEditorView«ENDREM»
      <xpt:template name="$EditorEmitter" outfile="«getQualifiedClassName()»"/>
      <xpt:template name="$ActionBarContributorEmitter" outfile="«getActionBarContributorQualifiedClassName()»"/>
    </xpt:template-set>
«IF not editorGen.diagram.palette.oclIsUndefined()-»
    <xpt:template name="$PaletteEmitter" outfile="«editorGen.diagram.palette.getFactoryQualifiedClassName()»" templateRoot="$templateRoot" inputURI="$inputURI"/>«REM»FIXME GenPalette«ENDREM»
«ENDIF-»
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">«REM»FIXME GenDiagram«ENDREM»
      <xpt:template name="$DiagramEditorUtilEmitter" outfile="«packageName».«editorGen.diagram.diagramEditorUtilClassName»"/>
      <xpt:template name="$VisualIDRegistryEmitter" outfile="«editorGen.diagram.getVisualIDRegistryQualifiedClassName()»"/>
      <xpt:template name="$MatchingStrategyEmitter" outfile="«editorGen.diagram.getMatchingStrategyQualifiedClassName()»"/>
      <xpt:template name="$DocumentProviderEmitter" outfile="«editorGen.diagram.getDocumentProviderQualifiedClassName()»"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           P L U G I N
«ENDREM»

«DEFINE pluginTask FOR gmfgen::GenPlugin-»
  <target name="plugin">
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
      <xpt:template name="$ActivatorEmitter" outfile="«getActivatorQualifiedClassName()»"/>
      <xpt:template name="$BundleManifestEmitte" outfile="META-INF/MANIFEST.MF"/>
      <xpt:template name="$PluginXmlEmitter" outfile="plugin.xml"/>
      <xpt:template name="$PluginPropertiesEmitter" outfile="plugin.properties"/>
      <xpt:template name="$BuildPropertiesEmitter" outfile="build.properties"/>
      <xpt:template name="$OptionsFileEmitter" outfile=".options"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           D I A G R A M  U P D A T E R
«ENDREM»

«DEFINE diagramupdateTask FOR gmfgen::GenDiagramUpdater-»
  <target name="diagramupdate">
    <xpt:template-set templateRoot="$templateRoot" inputURI="$inputURI">
      <xpt:template name="$DiagramUpdaterEmitter" outfile="«getDiagramUpdaterQualifiedClassName()»"/>
      <xpt:template name="$UpdateCommandEmitter" outfile="«getUpdateCommandQualifiedClassName()»"/>
      <xpt:template name="$NodeDescriptorEmitter" outfile="«getNodeDescriptorQualifiedClassName()»"/>
      <xpt:template name="$LinkDescriptorEmitter" outfile="«getLinkDescriptorQualifiedClassName()»"/>
    </xpt:template-set>
  </target>
«ENDDEFINE»

«REM»
                                           whatever
«ENDREM»

