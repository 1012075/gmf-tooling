<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="PropertySectionGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenCustomPropertyTab tab = (GenCustomPropertyTab) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = tab.getSheet().getEditorGen().getDiagram();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.ui.provider.PropertySource;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.sections.AdvancedPropertySection")%> implements <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySourceProvider")%> {

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> getPropertySource(Object object) {
		if (object instanceof IPropertySource) {
			return (IPropertySource) object;
		}
		AdapterFactory af = getAdapterFactory(object);
		if (af != null) {
			IItemPropertySource ips = (IItemPropertySource) af.adapt(object, IItemPropertySource.class);
			if (ips != null) {
				return new PropertySource(object, ips);
			}
		}
		if (object instanceof IAdaptable) {
			return (IPropertySource) ((IAdaptable) object).getAdapter(IPropertySource.class);
		}
		return null;
	}

	/**
	 * Modify/unwrap selection.  
	 * @generated
	 */
	protected Object transformSelection(Object selected) {
<%if ("domain".equals(tab.getID())) /*perhaps, override setInput should obey same condition?*/{
	final String epClassName = importManager.getImportedName("org.eclipse.gef.EditPart");
	final String viewClassName = importManager.getImportedName("org.eclipse.gmf.runtime.notation.View");%>
		if (selected instanceof <%=epClassName%>) {
			Object model = ((<%=epClassName%>) selected).getModel();
			return model instanceof <%=viewClassName%> ? ((<%=viewClassName%>) model).getElement() : null;
		}
		if (selected instanceof <%=viewClassName%>) {
			return ((<%=viewClassName%>) selected).getElement();
		}
<%}%>
		return selected;
	}


	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySourceProvider")%> getPropertySourceProvider() {
		return this; 
	}

	/**
	 * @generated
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		if (selection.isEmpty() || false == selection instanceof StructuredSelection) {
			super.setInput(part, selection);
			return;
		}
		final StructuredSelection structuredSelection = ((StructuredSelection) selection);
		ArrayList transformedSelection = new ArrayList(structuredSelection.size());
		for (Iterator it = structuredSelection.iterator();  it.hasNext();) {
			Object r = transformSelection(it.next());
			if (r != null) {
				transformedSelection.add(r);
			}
		}
		super.setInput(part, new StructuredSelection(transformedSelection));
	}

	/**
	 * @generated
	 */
	protected AdapterFactory getAdapterFactory(Object object) {
		if (getEditingDomain() instanceof AdapterFactoryEditingDomain) {
			return ((AdapterFactoryEditingDomain) getEditingDomain()).getAdapterFactory();
		}
		return null;
	}
}
<%importManager.emitSortedImports();%>
