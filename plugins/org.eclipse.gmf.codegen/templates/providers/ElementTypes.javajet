<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ElementTypesGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getElementTypesClassName()%> {

	/**
	 * @generated
	 */
	private <%=genDiagram.getElementTypesClassName()%>() {}

	/**
	 * @generated
	 */
	private static ImageRegistry imageRegistry;

	/**
	 * @generated
	 */
	private static ImageRegistry getImageRegistry() {
		if (imageRegistry == null) {
			imageRegistry = new ImageRegistry();
		}
		return imageRegistry;
	}

	/**
	 * @generated
	 */
	private static String getImageRegistryKey(ENamedElement element) {
		return element.getName();
	}

	/**
	 * @generated
	 */
	private static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {
		if (element instanceof EStructuralFeature) {
			element = ((EStructuralFeature) element).getEContainingClass();
		}
		if (element instanceof EClass) {
<%
String pluginClassName = importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName());
String semanticFactoryClassName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedFactoryInterfaceName());
%>
			return <%=pluginClassName%>.getInstance().getItemImageDescriptor(
				<%=semanticFactoryClassName%>.eINSTANCE.create((EClass) element));
		}
		// TODO : support structural features
		return null;
	}

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(ENamedElement element) {
		String key = getImageRegistryKey(element);
		ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
		if (imageDescriptor == null) {
			imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
		}
		return imageDescriptor;
	}

	/**
	 * @generated
	 */
	public static Image getImage(ENamedElement element) {
		String key = getImageRegistryKey(element);
		Image image = getImageRegistry().get(key);
		if (image == null) {
			ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
			image = getImageRegistry().get(key);
		}
		return image;
	}

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImageDescriptor(element);
	}

	/**
	 * @generated
	 */
	public static Image getImage(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImage(element);
	}
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>

	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @generated
	 */
	public static ENamedElement getElement(IAdaptable hint) {
		Object type = hint.getAdapter(IElementType.class);
		if (<%=genDiagram.getUniqueIdentifier()%> == type) {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
<%
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id = null;
	ModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = ((GenLink) next).getModelFacet();
	}
	if (modelFacet instanceof TypeModelFacet) {
		GenClass metaClass = ((TypeModelFacet) modelFacet).getMetaClass();
%>
		} else if (<%=id%> == type) {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaClass.getClassifierAccessorName()%>();
<%
	} else if (modelFacet instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) modelFacet).getMetaFeature();
%>
		} else if (<%=id%> == type) {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>();
<%
	}
}
%>
		}
		return null;
	}

	/**
	 * @generated
	 */
	public static final IMetamodelType <%=genDiagram.getUniqueIdentifier()%> = new MetamodelType(
		"<%=genDiagram.getUniqueIdentifier()%>", null, "<%=genDiagram.getClassNamePrefix()%>",
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>(),
		new NullEditHelper());
<%
List types = new ArrayList();
types.add(genDiagram.getUniqueIdentifier());
int elementInitializerCount = 0;
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id;
	TypeModelFacet typeModelFacet = null;
	String semanticEntityInterfaceName = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		typeModelFacet = ((GenNode) next).getModelFacet();
		semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		if (((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
			semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
		}
	} else {
		continue;
	}
	types.add(id);
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
%>

	/**
	 * @generated
	 */
	public static final IMetamodelType <%=id%> = new MetamodelType("<%=id%>", null, "<%=((GenCommonBase) next).getClassNamePrefix()%>",
<%	if (semanticEntityInterfaceName != null) {%>
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticEntityInterfaceName%>(),
<%	} else { %>
		null,
<%	}%>
		new NullEditHelper());
<%}%>

	/**
	 * @generated
	 */
	public static void register() {
<%for (int i = 0; i < types.size(); i++) {%>
		ElementTypeRegistry.getInstance().register(<%=types.get(i)%>);
<%}%>
	}

	/**
	 * @generated
	 */
	public static class NullEditHelper extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper")%> {

		/**
		 * @generated
		 */
		public ICommand getEditCommand(IEditCommandRequest req) {
			if (!(req instanceof ConfigureRequest)) {
				<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("unserved request " + req);
			}
			return null;
		}
	}
<%if(elementInitializerCount > 0) {%>

	/**
	 * @generated
	 */
	public static class Initializers {
<%
for (Iterator it = genDiagram.eAllContents(); it.hasNext(); ) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet != null && modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {				
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();
%>

		/**
		 * @generated
		 */
		public static final ObjectInitializer <%=id%> = new ObjectInitializer(new FeatureInitializer[] {
<%
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
			GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();%>
			new FeatureInitializer("<%=featureValSpec.getBody()%>", //$NON-NLS-1$
						<%=importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=ftInitializer.getElementClassAccessorName()%>(),
						<%=importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=featureValSpec.getFeature().getFeatureAccessorName()
						%>())<%=featInitIt.hasNext() ? "," : ""%>

<%
		} // end of GenFeatureValueSpec iteration
%>
		});
<%
	} // end of GenFeatureSeqInitializer 
} // end of getGenEntities iteration
%>
	
		/** 
		 * @generated
		 */	
		private Initializers() {
		}
		
		/** 
		 * @generated
		 */	
		public static class ObjectInitializer {
			/** 
			 * @generated
			 */		
			private FeatureInitializer[] initExpressions;	
			
			/** 
			 * @generated
			 */		
			ObjectInitializer(FeatureInitializer[] initExpressions) {
				this.initExpressions = initExpressions;
			}
			
			/** 
			 * @generated
			 */		
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
				for (int i = 0; i < initExpressions.length; i++) {
					FeatureInitializer nextExpr = initExpressions[i];
					nextExpr.init(instance);
				}
			}
		} // end of ObjectInitializer
		
		/** 
		 * @generated
		 */	
		static class FeatureInitializer {
			/** 
			 * @generated
			 */		
			private <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> contextClass;	
			/** 
			 * @generated
			 */		
			private <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature;
			/** 
			 * @generated
			 */
			private <%=importManager.getImportedName("java.lang.String")%> expressionBody;		
			/** 
			 * @generated
			 */		
			private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query;
	
			/**
			 * @generated
			 */		
			FeatureInitializer(<%=importManager.getImportedName("java.lang.String")%> expression, 
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> context, 
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature) {
				this.sFeature = sFeature;
				this.expressionBody = expression;
				this.contextClass	= context;
			}
			/** 
			 * @generated
			 */
			void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				if(this.query == null) {
					this.query = <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(expressionBody, contextClass);					
				}
				Object value = query.evaluate(contextInstance);
				if(sFeature.getEType() instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%> && 
					value instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>) {
					value = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>)value).getInstance();
				} else if(value != null && sFeature.isMany()) {
					value = new <%=importManager.getImportedName("org.eclipse.emf.common.util.BasicEList")%>((<%=importManager.getImportedName("java.util.Collection")%>)value);
				}
				contextInstance.eSet(sFeature, value);
			}
		} // end of FeatureInitializer
				
	} // end of Initializers
<%}%>
}
<%importManager.emitSortedImports();%>
