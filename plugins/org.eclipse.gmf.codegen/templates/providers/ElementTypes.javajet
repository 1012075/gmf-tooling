<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ElementTypesGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;
import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.NullElementType;
import org.eclipse.gmf.runtime.emf.type.core.SpecializationType;
import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class ElementTypes {

	/**
	 * @generated
	 */
	private static ImageRegistry imageRegistry;

	/**
	 * @generated
	 */
	private static ImageRegistry getImageRegistry() {
		if (imageRegistry == null) {
			imageRegistry = new ImageRegistry();
		}
		return imageRegistry;
	}

	/**
	 * @generated
	 */
	private static String getImageRegistryKey(ENamedElement element) {
		return element.getName();
	}

	/**
	 * @generated
	 */
	private static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {
		if (element instanceof EStructuralFeature) {
			element = ((EStructuralFeature) element).getEContainingClass();
		}
		if (element instanceof EClass) {
<%
String pluginClassName = importManager.getImportedName(genDiagram.getPluginQualifiedClassName());
String semanticFactoryClassName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedFactoryInterfaceName());
%>
			return <%=pluginClassName%>.getInstance().getItemImageDescriptor(
				<%=semanticFactoryClassName%>.eINSTANCE.create((EClass) element));
		}
		// TODO : support structural features
		return null;
	}

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(ENamedElement element) {
		String key = getImageRegistryKey(element);
		ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
		if (imageDescriptor == null) {
			imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
		}
		return imageDescriptor;
	}

	/**
	 * @generated
	 */
	public static Image getImage(ENamedElement element) {
		String key = getImageRegistryKey(element);
		Image image = getImageRegistry().get(key);
		if (image == null) {
			ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
			image = getImageRegistry().get(key);
		}
		return image;
	}

	/**
	 * @generated
	 */
	public static ImageDescriptor getImageDescriptor(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImageDescriptor(element);
	}

	/**
	 * @generated
	 */
	public static Image getImage(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImage(element);
	}
<%
List types = new ArrayList();
List refLinks = new ArrayList();
Iterator entities = AccessUtil.getGenEntities(genDiagram);
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
	if (entity instanceof GenLinkReferenceOnly) {
		refLinks.add(entity);
		types.add(entity.getUniqueIdentifier());
	}
}
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>

	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @generated
	 */
	public static ENamedElement getElement(IAdaptable hint) {
		Object type = hint.getAdapter(IElementType.class);
		if (type instanceof IMetamodelType) {
			EClass eClass = ((IMetamodelType) type).getEClass();
			if (eClass != null && eClass.getEPackage() == <%=semanticPackageInterfaceName%>.eINSTANCE) {
				return eClass;
			}
			return null;
<%if (!refLinks.isEmpty()) {%>
		} else if (type instanceof ISpecializationType) {
<%
	for (int i = 0; i < refLinks.size(); i++) {
		GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
%>
			if (<%=refLink.getUniqueIdentifier()%> == type) {
				return <%=refLink.getUniqueIdentifier()%>.getEContainerDescriptor().getContainmentFeatures()[0];
			}
<%
	}
}
%>
		}
		return null;
	}

<%
entities = AccessUtil.getGenEntities(genDiagram);
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
	String semanticNodeInterfaceName;
	if (entity instanceof GenDiagram) {
		semanticNodeInterfaceName = genDiagram.getDomainDiagramElement().getName();
	} else if (entity instanceof GenNode) {
		GenNode genNode = (GenNode) entity;
		semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
	} else if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) entity;
		semanticNodeInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
	} else {
		continue;
	}
	types.add(entity.getUniqueIdentifier());
%>

	/**
	 * @generated
	 */
	public static class <%=entity.getUniqueIdentifier()%>_EditHelper extends BaseEditHelper {

		/**
		 * @generated
		 */
		protected ICommand getConfigureCommand(ConfigureRequest req) {
			return new ConfigureElementCommand(req) {
				protected CommandResult doExecute(IProgressMonitor progressMonitor) {
					// To customize newly created domain objects remove @renerated tag of 
					// getConfigureCommand(ConfigureRequest req) method and write your custom
					// code here. Use getElementToEdit() to get created element.
					<%if(entity instanceof GenBaseElement) {
						GenElementInitializer initializer = ((GenBaseElement)entity).getModelElementInitializer();
						if(initializer != null) {%>
							<%=importManager.getImportedName(initializer.getInitializersQualifiedClassName())%>.<%=initializer.getInitializerMethodName()%>(getElementToEdit());
						<%}
					}%>
<%
	if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass linkWithClass = (GenLinkWithClass) entity;
		GenFeature linkFeature = linkWithClass.getDomainLinkTargetFeature();
%>
					((<%=importManager.getImportedName(linkWithClass.getDomainMetaClass().getQualifiedInterfaceName())%>) getElementToEdit()).set<%=linkFeature.getAccessorName()%>((<%=importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName())%>) getRequest().getParameter(CreateRelationshipRequest.TARGET));
<%
	}
%>				
					return newOKCommandResult();
				}
			};
		}
<%
	if (entity instanceof GenNode) {
		GenNode node = (GenNode) entity;
%>

		/**
		 * @generated
		 */
		protected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {
<%
		for (int i = 0; i < refLinks.size(); i++) {
			GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
			GenFeature targetFeature = refLink.getDomainLinkTargetFeature();
			if (node.getDomainMetaClass().equals(targetFeature.getGenClass())) {
%>
			if (<%=refLink.getUniqueIdentifier()%>.equals(reqest.getElementType())) {
				reqest.setContainmentFeature(<%=refLink.getUniqueIdentifier()%>.getEContainerDescriptor().getContainmentFeatures()[0]);
				return new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));
			}
<%
			}
		}
%>
			return super.getCreateRelationshipCommand(reqest);
		}
<%	}%>
	}

	/**
	 * @generated
	 */
	public static final IMetamodelType <%=entity.getUniqueIdentifier()%> = new MetamodelType(
		"<%=entity.getUniqueIdentifier()%>", null, "<%=entity.getUniqueIdentifier()%>",
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>(),
		new <%=entity.getUniqueIdentifier()%>_EditHelper());
<%
}
for (int i = 0; i < refLinks.size(); i++) {
	GenLinkReferenceOnly entity = (GenLinkReferenceOnly) refLinks.get(i);
	GenFeature targetFeature = entity.getDomainLinkTargetFeature();
	String semanticFeatureCapName = targetFeature.getCapName();
	String semanticNodeInterfaceName = targetFeature.getGenClass().getName();
%>

	/**
	 * @generated
	 */
	public static class <%=entity.getUniqueIdentifier()%>_ContainerDescriptor implements IContainerDescriptor {

		/**
		 * @generated
		 */
		private static final EReference[] containmentFeatures = new EReference[] {
			<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName + '_' + semanticFeatureCapName%>()
		};

		/**
		 * @generated
		 */
		public EReference[] getContainmentFeatures() {
			return containmentFeatures;
		}

		/**
		 * @generated
		 */
		public IElementMatcher getMatcher() {
			return new IElementMatcher() {

				/**
				 * @generated
				 */
				public boolean matches(EObject eObject) {
					return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().isInstance(eObject);
				}
			};
		}
	}

	/**
	 * @generated
	 */
	public static class <%=entity.getUniqueIdentifier()%>_EditHelperAdvice extends BaseEditHelperAdvice {}

	/**
	 * @generated
	 */
	public static final ISpecializationType <%=entity.getUniqueIdentifier()%> = new SpecializationType(
		"<%=entity.getUniqueIdentifier()%>", null, "<%=entity.getUniqueIdentifier()%>",
		new IElementType[] { NullElementType.getInstance() }, null,
		new <%=entity.getUniqueIdentifier()%>_ContainerDescriptor(),
		new <%=entity.getUniqueIdentifier()%>_EditHelperAdvice());
<%
}
%>

	/**
	 * @generated
	 */
	public static void register() {
<%for (int i = 0; i < types.size(); i++) {%>
		ElementTypeRegistry.getInstance().register(<%=types.get(i)%>);
<%}%>
	}

	/**
	 * @generated
	 */
	public static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {

		/**
		 * @generated
		 */
		protected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {
			GetEditContextCommand result = null;
			IEditCommandRequest editRequest = reqest.getEditCommandRequest();
			if (editRequest instanceof CreateElementRequest) {
				result = new GetEditContextCommand(reqest);
				EObject container = ((CreateElementRequest) editRequest).getContainer();
				if (container instanceof View) {
					result.setEditContext(((View) container).getElement());
				}
			}
			return result;
		}
	}

	/**
	 * @generated
	 */
	public static class BaseEditHelper extends MSLEditHelper {

		/**
		 * @generated
		 */
		protected ICommand getEditContextCommand(GetEditContextRequest req) {
			GetEditContextCommand result = null;
			IEditCommandRequest editRequest = req.getEditCommandRequest();
			if (editRequest instanceof CreateElementRequest) {
				result = new GetEditContextCommand(req);
				EObject container = ((CreateElementRequest) editRequest).getContainer();
				if (container instanceof View) {
					container = ((View) container).getElement();
				}
				result.setEditContext(container);
			}
			return result;
		}
	}
}
<%importManager.emitSortedImports();%>
