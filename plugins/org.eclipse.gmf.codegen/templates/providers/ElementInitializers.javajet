<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ElementInitializersGenerator"
	imports="java.util.* org.eclipse.emf.ecore.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getElementInitializersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getElementInitializersClassName()%> {
<%
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	EObject nextElement = (EObject)it.next();
	GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
	if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
		
	GenElementInitializer initializer = genElement.getModelElementInitializer();
	if(initializer instanceof GenFeatureSeqInitializer) {
	%>
	/**
	* @generated
	*/
	private static final ObjectInitializer <%=initializer.getElement().getUniqueIdentifier()%> = new ObjectInitializer(new FeatureInitializer[] {
		new FeatureInitializer(	
		<% for(Iterator featInitIt = ((GenFeatureSeqInitializer)initializer).getInitializers().iterator(); featInitIt.hasNext();) { 
				GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();
				String packageClsQName = featureValSpec.getFeature().getGenClass().getGenPackage().getQualifiedPackageInterfaceName();
				String fAccessorName = featureValSpec.getFeature().getFeatureAccessorName();
				
				%>"<%=featureValSpec.getBody()%>", <%=importManager.getImportedName(packageClsQName)%>.eINSTANCE.get<%=fAccessorName%>()), //$NON-NLS-1$
			<%}
		}%>
	});
<%} // end of FeatureSeqInitializer
%>

<%	int initializerCount = 0;
	for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
		EObject nextElement = (EObject)it.next();
		GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
		if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
		
		GenElementInitializer initializer = genElement.getModelElementInitializer();
		initializerCount++;	
	%>
	/**
	* @generated
	*/
	public static final void <%=initializer.getInitializerMethodName()%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
		<%=initializer.getElement().getUniqueIdentifier()%>.init(element);
	}
<%	}%>

	/** 
	 * @generated
	 */	
	private <%=genDiagram.getElementInitializersClassName()%>() {
	}
	
<%if(initializerCount > 0){%>
	/** 
	 * @generated
	 */	
	private static class ObjectInitializer {
		/** 
		 * @generated
		 */		
		private FeatureInitializer[] initExpressions;	
		
		/** 
		 * @generated
		 */		
		ObjectInitializer(FeatureInitializer[] initExpressions) {
			this.initExpressions = initExpressions;
		}
		
		/** 
		 * @generated
		 */		
		void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
			for (int i = 0; i < initExpressions.length; i++) {
				FeatureInitializer nextExpr = initExpressions[i];
				nextExpr.init(instance);
			}
		}
	}
	
	/** 
	 * @generated
	 */	
	private static class FeatureInitializer {
		/** 
		 * @generated
		 */		
		private EStructuralFeature sFeature;
		/** 
		 * @generated
		 */		
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query;

		/**
		 * @generated
		 */		
		FeatureInitializer(String expression, <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature) {
			this.query = <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(expression, sFeature.getEContainingClass());
			this.sFeature = sFeature;
		}
		/** 
		 * @generated
		 */
		void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
			Object value = query.evaluate(contextInstance);
			contextInstance.eSet(sFeature, value);		
		}
	}
<%}%>
}
<%importManager.emitSortedImports();%>
