<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ModelingAssistantProviderGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getModelingAssistantProviderClassName()%> extends ModelingAssistantProvider {

	/**
	 * @generated
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
<%
for (Iterator contents = genDiagram.getAllContainers().iterator(); contents.hasNext(); ) {
	GenContainerBase genContainer = (GenContainerBase) contents.next();
	List children = new ArrayList(genContainer.getContainedNodes());
	if (genContainer instanceof GenNode && ((GenNode) genContainer).isListLayout()) {
		for (Iterator compartments = ((GenNode) genContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			children.addAll(((GenCompartment) compartments.next()).getContainedNodes());
		}
	}
	if (!children.isEmpty()) {
%>
		if (editPart instanceof <%=importManager.getImportedName(genContainer.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
			for (int i = 0; i < children.size(); i++) {
				String id = ((GenNode) children.get(i)).getUniqueIdentifier();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=id%>);
<%			}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}
<%
Map outgoingLinks = new HashMap(); // source -> links going from the source
Map incomingLinks = new HashMap(); // target -> links coming to the target
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
		Collection value = (Collection) outgoingLinks.get(source);
		if (value == null) {
			value = new HashSet();
			outgoingLinks.put(source, value);
		}
		value.add(genLink);
	}
	for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
		Collection value = (Collection) incomingLinks.get(target);
		if (value == null) {
			value = new HashSet();
			incomingLinks.put(target, value);
		}
		value.add(genLink);
	}
}
%>

	/**
	 * @generated
	 */
	public List getRelTypesOnSource(IAdaptable source) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%		}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getRelTypesOnTarget(IAdaptable target) {
<%if (!incomingLinks.isEmpty()) {%>
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
%>
		if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
%>
			types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%		}%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();
%>
			if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getTypesForSource(IAdaptable target, IElementType relationshipType) {
<%if (!incomingLinks.isEmpty()) {%>
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
%>
		if (targetEditPart instanceof <%=importManager.getImportedName(target.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
				GenCommonBase source = (GenCommonBase) sources.next();
%>
			if (relationshipType == <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=source.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public List getTypesForTarget(IAdaptable source, IElementType relationshipType) {
<%if (!outgoingLinks.isEmpty()) {%>
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
<%
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
%>
		if (sourceEditPart instanceof <%=importManager.getImportedName(source.getEditPartQualifiedClassName())%>) {
			List types = new ArrayList();
<%
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();
%>
			if (relationshipType == <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>) {
				types.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=target.getUniqueIdentifier()%>);
			}
<%
			}
		}
%>
			return types;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}
}
<%importManager.emitSortedImports();%>
