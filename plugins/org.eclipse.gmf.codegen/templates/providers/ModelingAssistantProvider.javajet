<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ModelingAssistantProviderGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getModelingAssistantProviderClassName()%> extends ModelingAssistantProvider {

	/**
	 * @generated
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		Object editPart = host.getAdapter(IGraphicalEditPart.class);
		if (editPart instanceof <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) {
			List children = new ArrayList();
<%
List children = genDiagram.getNodes();
for (int i = 0; i < children.size(); i++) {
%>
			children.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=((GenNode) children.get(i)).getUniqueIdentifier()%>);
<%}%>
			return children;
<%
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	if (next instanceof GenChildContainer) {
		GenChildContainer genContainer = (GenChildContainer) next;
		children = genContainer.getChildNodes();
		if (!children.isEmpty()) {
%>
		} else if (editPart instanceof <%=importManager.getImportedName(genContainer.getEditPartQualifiedClassName())%>) {
			List children = new ArrayList();
<%			for (int i = 0; i < children.size(); i++) {%>
			children.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=((GenNode) children.get(i)).getUniqueIdentifier()%>);
<%			}%>
			return children;
<%
		}
	}
}
%>
		}
		return Collections.EMPTY_LIST;
	}
}
<%importManager.emitSortedImports();%>
