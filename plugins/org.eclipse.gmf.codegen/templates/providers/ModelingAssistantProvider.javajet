<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ModelingAssistantProviderGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getModelingAssistantProviderClassName()%> extends ModelingAssistantProvider {

	/**
	 * @generated
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		Object editPart = host.getAdapter(IGraphicalEditPart.class);
<%
List containers = new ArrayList();
containers.add(genDiagram);
containers.addAll(genDiagram.getAllNodes());
for (Iterator contents = containers.iterator(); contents.hasNext(); ) {
	GenContainerBase genContainer = (GenContainerBase) contents.next();
	List children = new ArrayList(genContainer.getContainedNodes());
	if (genContainer instanceof GenNode && ((GenNode) genContainer).isListLayout()) {
		for (Iterator compartments = ((GenNode) genContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			children.addAll(((GenCompartment) compartments.next()).getContainedNodes());
		}
	}
	if (!children.isEmpty()) {
%>
		if (editPart instanceof <%=importManager.getImportedName(genContainer.getEditPartQualifiedClassName())%>) {
			List children = new ArrayList();
<%
			for (int i = 0; i < children.size(); i++) {
				String id = ((GenNode) children.get(i)).getUniqueIdentifier();
%>
			children.add(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=id%>);
<%			}%>
			return children;
		}
<%
	}
}
%>
		return Collections.EMPTY_LIST;
	}
}
<%importManager.emitSortedImports();%>
