<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="MarkerNavigationProviderGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.markImportLocation(stringBuffer);

importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Arrays");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.HashSet");
importManager.addImport("java.util.Set");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.common.util.Diagnostic");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.validation.model.IConstraintStatus");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.ui.providers.marker.AbstractModelMarkerNavigationProvider");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
%>

/**
 * @generated
 */	
public class <%=genDiagram.getMarkerNavigationProviderClassName()%> extends AbstractModelMarkerNavigationProvider {
	/**
	 * @generated
	 */
	public static final String MARKER_TYPE = <%=pluginActivatorClass%>.ID + ".<%=genDiagram.getValidationDiagnosticMarkerType()%>"; //$NON-NLS-1$

	/**
	 * @generated
	 */		
	protected void doGotoMarker(IMarker marker) {
		String elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.core.resources.IMarker.ELEMENT_ID, null);
		if(elementId == null || !(getEditor() instanceof DiagramEditor)) {
			return;
		}
		
		DiagramEditor editor = (DiagramEditor) getEditor();
		Map editPartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();
		EObject targetView = editor.getDiagram().eResource().getEObject(elementId);
		if(targetView == null) {
			return;
		}
		EditPart targetEditPart = (EditPart)editPartRegistry.get(targetView);
		if (targetEditPart != null) {
			<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.selectElementsInDiagram(editor, Arrays.asList(new EditPart[] { targetEditPart }));
		}
	}
	
	/**
	 * @generated
	 */
	public static void createMarkers(IFile diagramFile, IStatus validationStatus, DiagramEditPart diagramEditPart) {
		if(validationStatus.isOK()) return;
		
		final IStatus rootStatus = validationStatus;
		List allStatuses = new ArrayList();
		<%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.LazyElement2ViewMap element2ViewMap = new <%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.LazyElement2ViewMap(
			diagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allStatuses));
		
		for (Iterator it = allStatuses.iterator(); it.hasNext();) {
			IConstraintStatus nextStatus = (IConstraintStatus)it.next();
			View view = <%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.findView(diagramEditPart, nextStatus.getTarget(), element2ViewMap);			
			IMarker newMarker = addMarker(diagramFile, view.eResource().getURIFragment(view), 
					EMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), 
					nextStatus.getMessage(), nextStatus.getSeverity());
			if (newMarker != null) {
				adjustMarker(newMarker, nextStatus);
			}
		}
	}
	
	/**
	 * @generated
	 */
	public static void createMarkers(IFile diagramFile, Diagnostic emfValidationStatus, DiagramEditPart diagramEditPart) {
		if(emfValidationStatus.getSeverity() == Diagnostic.OK) return;
		
		final Diagnostic rootStatus = emfValidationStatus;
		List allDiagnostics = new ArrayList();
		<%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.LazyElement2ViewMap element2ViewMap = new <%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.LazyElement2ViewMap(diagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allDiagnostics));
		
		for (Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
			Diagnostic nextDiagnostic = (Diagnostic) it.next();
			List data = nextDiagnostic.getData();
			if (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {
				EObject element = (EObject) data.get(0);
				View view = <%=genDiagram.getDiagramEditorUtilQualifiedClassName()%>.findView(diagramEditPart, element, element2ViewMap);
				IMarker newMarker = addMarker(diagramFile, view.eResource().getURIFragment(view),
						EMFCoreUtil.getQualifiedName(element, true), nextDiagnostic.getMessage(),
						diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));
				if (newMarker != null) {
					adjustMarker(newMarker, emfValidationStatus);
				}
			}
		}
	}

	/**
	 * @generated
	 */
	public static void deleteMarkers(IResource resource) {
		try {
			resource.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);
		} catch (CoreException e) {
			<%=pluginActivatorClass%>.getInstance().logError("Failed to delete validation markers", e); //$NON-NLS-1$
		}
	}
	
	/**
	 * @generated
	 */
	public static void adjustMarker(IMarker marker, Diagnostic sourceDiagnostic) {
		assert marker != null && sourceDiagnostic != null;
	}

	/**
	 * @generated
	 */
	public static void adjustMarker(IMarker marker, IConstraintStatus sourceStatus) {
		assert marker != null && sourceStatus != null;		
	}
	
	/**
	 * @generated
	 */
	private static IMarker addMarker(IFile file, String elementId, String location, String message, int statusSeverity) {
		IMarker marker = null;
		try {
			marker = file.createMarker(MARKER_TYPE);
			marker.setAttribute(IMarker.MESSAGE, message);
			marker.setAttribute(IMarker.LOCATION, location);
			marker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, elementId);
			int markerSeverity = IMarker.SEVERITY_INFO;
			if(statusSeverity == IStatus.WARNING) {
				markerSeverity = IMarker.SEVERITY_WARNING;    						
			} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {
				markerSeverity = IMarker.SEVERITY_ERROR;
			}
			marker.setAttribute(IMarker.SEVERITY, markerSeverity);
		} catch (CoreException e) {
			<%=pluginActivatorClass%>.getInstance().logError("Failed to create validation marker", e); //$NON-NLS-1$
		}
		return marker;		
	}	
		
	/**
	 * @generated
	 */
	private static int diagnosticToStatusSeverity(int diagnosticSeverity) {
		if (diagnosticSeverity == Diagnostic.OK) {
			return IStatus.OK;
		} else if (diagnosticSeverity == Diagnostic.INFO) {
			return IStatus.INFO;
		} else if (diagnosticSeverity == Diagnostic.WARNING) {
			return IStatus.WARNING;
		} else if (diagnosticSeverity == Diagnostic.ERROR
				|| diagnosticSeverity == Diagnostic.CANCEL) {
			return IStatus.ERROR;
		}
		return IStatus.INFO;
	}	

	/**
	 * @generated
	 */	
	private static Set collectTargetElements(IStatus status, Set targetElementCollector, List allConstraintStatuses) {
		if(status instanceof IConstraintStatus) {
			targetElementCollector.add(((IConstraintStatus)status).getTarget());
			allConstraintStatuses.add(status);
		}
		if(status.isMultiStatus()) {
			IStatus[] children = status.getChildren();
			for (int i = 0; i < children.length; i++) {
				collectTargetElements(children[i], targetElementCollector, allConstraintStatuses);				
			}
		}
		return targetElementCollector;
	}

	/**
	 * @generated
	 */	
	private static Set collectTargetElements(Diagnostic diagnostic, Set targetElementCollector, List allDiagnostics) {
		List data = diagnostic.getData();
		EObject target = null;
		if (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {
			target = (EObject)data.get(0);
			targetElementCollector.add(target);	
			allDiagnostics.add(diagnostic);
		}
		if(diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {
			for (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
				collectTargetElements((Diagnostic)it.next(), targetElementCollector, allDiagnostics);
			}
		}
		return targetElementCollector;
	}
}
<%importManager.emitSortedImports();%>
