<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewFactoryGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenCommonBase genElement = (GenCommonBase) argument;%>
<%GenDiagram genDiagram = genElement.getDiagram();%>
package <%=genDiagram.getNotationViewFactoriesPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>
<%
boolean isLink = genElement instanceof GenLink;
boolean isDiagram = genElement instanceof GenDiagram;
boolean isCompartment = genElement instanceof GenCompartment;
boolean isNode = !isLink && !isDiagram && !isCompartment;
boolean isLeaf = genElement instanceof GenNode &&  ((GenNode) genElement).isListContainerEntry();

boolean isFlowLayout = isCompartment && !((GenCompartment) genElement).getNode().isListLayout();
%>

/**
 * @generated
 */
public class <%=genElement.getNotationViewFactoryClassName()%> extends 
<%if (isLink) {%>
	ConnectionViewFactory
<%} else if (isLeaf) {%>
	AbstractLabelViewFactory
<%} else if (isCompartment) {%>
    ListCompartmentViewFactory
<%} else if (isDiagram) {%>    
	DiagramViewFactory
<%} else {%>
	AbstractShapeViewFactory
<%}%>
{

	/**
	 * @generated
	 */
<%
if (isDiagram) {
%>
	protected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){
		super.decorateView(view, semanticAdapter, diagramKind);
<%
} else {
%>
	protected void decorateView(View containerView, View view, IAdaptable semanticAdapter,
			String semanticHint, int index, boolean persisted) {
		super.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);
<%
}
%>
<%@ include file="createVIDAnnotation.jetinc"%>
<%
ColorAttributes colorAttrs = genElement.getViewmap() != null ? (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class) : null;
if (colorAttrs != null && colorAttrs.getForegroundColor() != null && colorAttrs.getForegroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLineStyle_LineColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getForegroundColor()%>));
<%
}
if (isNode) {
	GenNode genNode = (GenNode) genElement;
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFillStyle_FillColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getBackgroundColor()%>));
<%
	}	
	if (!isLeaf) {
		List labels = genNode.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
			GenNodeLabel label = (GenNodeLabel) labels.get(j);
			String labelViewId;
			if (label instanceof ExternalLabel) {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
			} else {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
			}
%>
		getViewService().createNode(semanticAdapter, view, <%=labelViewId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%
		}
	}
	List genChildContainers = genNode.getCompartments();
	for (int j = 0; j < genChildContainers.size(); j++) {
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
		GenCompartment genChildContainer = (GenCompartment) genChildContainers.get(j);
		String compartmentId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + genChildContainer.getSemanticHintFieldName();
%>
		getViewService().createNode(semanticAdapter, view, <%=compartmentId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%
	}
} else if (isLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	for (int j = 0; j < labels.size(); j++) {
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
		GenLinkLabel label = (GenLinkLabel) labels.get(j);
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + label.getSemanticHintLabelFieldName();
%>
		getViewService().createNode(semanticAdapter, view, <%=labelViewId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%	}
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
%>
		view.setType(<%=importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%
	}
}
%>
	}
<%	
if (isFlowLayout) {
%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> createStyles(View view) {
		<%=importManager.getImportedName("java.util.List")%> styles = super.createStyles(view);
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createShapeStyle());
		return styles;
	}
	
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint")%> createLayoutConstraint() {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createBounds();
	}
	
	/**
	 * @generated
	 */
	protected void initializeFromPreferences(View view) {
		super.initializeFromPreferences(view);

		<%=importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore")%> store = (<%=importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore")%>) getPreferencesHint().getPreferenceStore();

		// fill color
		<%=importManager.getImportedName("org.eclipse.swt.graphics.RGB")%> fillRGB = <%=importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter")%>.getColor(store, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants")%>.PREF_FILL_COLOR);
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFillStyle_FillColor(), <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.RGBToInteger(fillRGB));
	}
<%
}
%>
}
<%importManager.emitSortedImports();%>
