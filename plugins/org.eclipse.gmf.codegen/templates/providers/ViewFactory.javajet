<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewFactoryGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenCommonBase genElement = (GenCommonBase) argument;%>
<%GenDiagram genDiagram = genElement.getDiagram();%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genElement.getNotationViewFactoryClassName()%> extends 
<%if (genElement instanceof GenLink) {%>
	ConnectionViewFactory
<%} else if (genElement instanceof GenChildNode) {%>
	AbstractLabelViewFactory
<%} else if (genElement instanceof GenCompartment) {%>
    ListCompartmentViewFactory
<%} else if (genElement instanceof GenDiagram) {%>    
	DiagramViewFactory
<%} else {%>
	AbstractShapeViewFactory
<%}%>
{

	/**
	 * @generated
	 */
<%
if (genElement instanceof GenDiagram) {
%>
	protected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){
		super.decorateView(view, semanticAdapter, diagramKind);
<%
} else {
%>
	protected void decorateView(View containerView, View view, IAdaptable semanticAdapter,
			String semanticHint, int index, boolean persisted) {
		super.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);
<%
}
%>
<%@ include file="createVIDAnnotation.jetinc"%>
<%
ColorAttributes colorAttrs = genElement.getViewmap() != null ? (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class) : null;
if (colorAttrs != null && colorAttrs.getForegroundColor() != null && colorAttrs.getForegroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLineStyle_LineColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getForegroundColor()%>));
<%
}
if (genElement instanceof GenNode) {
	GenNode genNode = (GenNode) genElement;
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFillStyle_FillColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getBackgroundColor()%>));
<%
	}
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	if (!(genNode instanceof GenChildNode)) {
		List labels = genNode.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			GenNodeLabel label = (GenNodeLabel) labels.get(j);
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
%>
		getViewService().createNode(semanticAdapter, view, <%=labelTextViewId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%
		}
	}
	List genChildContainers = genNode.getCompartments();
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenCompartment genChildContainer = (GenCompartment) genChildContainers.get(j);
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
%>
		getViewService().createNode(semanticAdapter, view, <%=compartmentId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%
	}
} else if (genElement instanceof GenLink) {
	GenLink genLink = (GenLink) genElement;
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	List labels = genLink.getLabels();
	for (int j = 0; j < labels.size(); j++) {
		GenLinkLabel label = (GenLinkLabel) labels.get(j);
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
%>
		getViewService().createNode(semanticAdapter, view, <%=labelViewId%>,
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
<%	}
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
%>
		view.setType(<%=AccessUtil.getSemanticHintsClassName(genLink)%>.VIEW_TYPE);
<%
	}
}
%>
	}
}
<%importManager.emitSortedImports();%>
