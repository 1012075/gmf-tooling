<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewProviderGenerator"
    imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
<%GenModel genModel = genDiagram.getEMFGenModel();%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
import org.eclipse.gmf.runtime.notation.View;
import <%=genDiagram.getEditProvidersPackageName()%>.*;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class ViewProvider extends AbstractViewProvider {

	/**
	 * @generated
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
		if ("<%=genModel.getModelName()%>".equals(diagramKind)) { //$NON-NLS-1$
			return DiagramViewFactory.class;
		}
		return null;
	}

<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>

	/**
	 * @generated
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		EClass semanticType = getSemanticEClass(semanticAdapter);
<%
List genNodes = genDiagram.getNodes();
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().equals(semanticType)) {
<%
	if (genNode.hasNameToEdit()) {
		String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
%>
			if (<%=semanticHintsClassName%>.<%=AccessUtil.getNameSemanticHint(genNode)%>.equals(semanticHint)) {
				return BasicNodeViewFactory.class;
			}
<%	}
	List genChildContainers = genNode.getChildContainers();
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
%>
			if ("<%=genChildContainer.getGroupID()%>".equals(semanticHint)) {
				return ListCompartmentViewFactory.class;
			}
<%	}%>
			return <%=genNode.getNotationViewFactoryClassName()%>.class;
		}
<%
	List genChildNodes = genNode.getChildNodes();
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().equals(semanticType)) {
			return <%=genChildNode.getNotationViewFactoryClassName()%>.class;
		}
<%	}
}
%>
		return null;
	}

	/**
	 * @generated
	 */
	protected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		EClass semanticType = getSemanticEClass(semanticAdapter);
<%
List genLinks = genDiagram.getLinks();
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticLinkInterfaceName%>().equals(semanticType)) {
			return <%=genLink.getNotationViewFactoryClassName()%>.class;
		}
<%
	}
}
%>
		return null;
	}
}
<%importManager.emitSortedImports();%>
