<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewProviderGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
List genLinks = genDiagram.getLinks();
%>
<%@ include file="../copyright4java.jetinc"%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getNotationViewProviderClassName()%> extends AbstractViewProvider {

	/**
	 * @generated
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
<%if (genDiagram.getDomainDiagramElement() != null) {%>
		EObject semanticElement = getSemanticElement(semanticAdapter);
<%}%>
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(diagramKind)
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				&& <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(semanticElement) != -1
<%}%>
				) {
			return <%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.class;
		}
		return null;
	}

	/**
	 * @generated
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		if (containerView == null) {
			return null;
		}

		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
		int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);

		switch (nodeVID) {
<%
for (Iterator containers = genDiagram.getAllChildContainers().iterator(); containers.hasNext();) {
	GenContainerBase container = (GenContainerBase) containers.next();
%>
		case <%=container.getVisualID()%>:
			 return <%=importManager.getImportedName(container.getNotationViewFactoryQualifiedClassName())%>.class;
<%
	if (container instanceof GenNode && !((GenNode) container).isListContainerEntry()) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
%>
		case <%=label.getVisualID()%>:
			return <%=importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName())%>.class;
<%
		}
	}
}
for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
%>
		case <%=linkLabel.getVisualID()%>:
			return <%=importManager.getImportedName(linkLabel.getNotationViewFactoryQualifiedClassName())%>.class;
<%
	}
}
%>
		}
		return null;
	}

	/**
	 * @generated
	 */
	protected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
<%
boolean elementTypeInitialized = false;
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof FeatureModelFacet || genLink.getModelFacet() == null) {
		if (!elementTypeInitialized) {
			elementTypeInitialized = true;
%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementType = getSemanticElementType(semanticAdapter);
<%
		}
%>
		if (<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>.equals(elementType)) {
			return <%=importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName())%>.class;
		}
<%
	}
}
%>

		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);

		int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);
		
		switch (linkVID) {
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
		case <%=genLink.getVisualID()%>:
			return <%=importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName())%>.class;
<%
	}
}
%>
		}
		return getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);
	}
<%if (elementTypeInitialized) {%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> getSemanticElementType(IAdaptable semanticAdapter) {
		if (semanticAdapter == null) {
			return null;
		}
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>) semanticAdapter.getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class);
	}
<%}%>
	
	/**
	 * @generated
	 */
	private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized child node classes here
		return null;
	}
	
}
<%importManager.emitSortedImports();%>
