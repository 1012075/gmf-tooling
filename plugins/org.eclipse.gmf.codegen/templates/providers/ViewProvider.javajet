<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewProviderGenerator"
    imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%
GenDiagram genDiagram = (GenDiagram) argument;
GenModel genModel = genDiagram.getEMFGenModel();
List genLinks = genDiagram.getLinks();
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getViewProviderClassName()%> extends AbstractViewProvider {

	/**
	 * @generated
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
		EObject semanticElement = getSemanticElement(semanticAdapter);
		if ("<%=genModel.getModelName()%>".equals(diagramKind) && <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getDiagramVisualID(semanticElement) != -1) { //$NON-NLS-1$
			return <%=genDiagram.getNotationViewFactoryClassName()%>.class;
		}
		return null;
	}

	/**
	 * @generated
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		if (containerView == null) {
			return null;
		}
		if (!"<%=genModel.getModelName()%>".equals(containerView.getDiagram().getType())) {
			return null;
		}
		
		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
		int nodeVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);

		switch (nodeVID) {
<%
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer container = (GenChildContainer) containers.next();
%>
		case <%=container.getVisualID()%>:
			 return <%=importManager.getImportedName(container.getNotationViewFactoryQualifiedClassName())%>.class;
<%
	if (container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
%>
		case <%=label.getVisualID()%>:
			return <%=importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName())%>.class;
<%
		}
	}
}

for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
%>
		case <%=linkLabel.getVisualID()%>:
			if (<%=labelViewId%>.equals(semanticHint)) {
				return <%=importManager.getImportedName(linkLabel.getNotationViewFactoryQualifiedClassName())%>.class;
			} else { 
				return <%=importManager.getImportedName(linkLabel.getTextNotationViewFactoryQualifiedClassName())%>.class;
			}
<%
	}
}
%>
		}
		return getUnrecognizedNodeViewClass(semanticAdapter, containerView, semanticHint);
	}
	
	/**
	 * @generated
	 */
	 private Class getUnrecognizedNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized node classes here
	 	return null;
	 }

	/**
	 * @generated
	 */
	protected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		IElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
%>
		if (ElementTypes.<%=genLink.getUniqueIdentifier()%>.equals(elementType)) {
			return <%=genLink.getNotationViewFactoryClassName()%>.class;
		}
<%
	}
}
%>

		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);

		int linkVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);
		
		switch (linkVID) {
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
		case <%=genLink.getVisualID()%>:
			return <%=genLink.getNotationViewFactoryClassName()%>.class;
<%
	}
}
%>
		}
		return getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);
	}
	
	/**
	 * @generated
	 */
	 private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized child node classes here
	 	return null;
	 }
	
}
<%importManager.emitSortedImports();%>
