<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewProviderGenerator"
    imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
<%GenModel genModel = genDiagram.getEMFGenModel();%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import <%=genDiagram.getEditProvidersPackageName()%>.*;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class ViewProvider extends AbstractViewProvider {

	/**
	 * @generated
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
		EObject semanticElement = getSemanticElement(semanticAdapter);
		if ("<%=genModel.getModelName()%>".equals(diagramKind) && isDiagram<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>_<%=genDiagram.getVisualID()%>((<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) semanticElement)) { //$NON-NLS-1$
			return DiagramViewFactory.class;
		}
		return null;
	}

<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>

	/**
	 * @generated
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		boolean isTopLevel = containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0);
		if (isTopLevel) {
			return getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);
		} else {
			return getChildNodeViewClass(semanticAdapter, containerView, semanticHint);
		}
	}
	
	/**
	 * @generated
	 */
	private Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
<%
List genNodes = genDiagram.getNodes();
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().equals(semanticType) && isNode<%=semanticNodeInterfaceName%>_<%=genNode.getVisualID()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) semanticElement)) {
<%
	if (genNode.hasNameToEdit()) {
		String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
%>
			if (<%=semanticHintsClassName%>.<%=AccessUtil.getNameSemanticHint(genNode)%>.equals(semanticHint)) {
				return BasicNodeViewFactory.class;
			}
<%	}
	List genChildContainers = genNode.getChildContainers();
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
%>
			if ("<%=genChildContainer.getGroupID()%>".equals(semanticHint)) {
				return ListCompartmentViewFactory.class;
			}
<%	}%>
			return <%=genNode.getNotationViewFactoryClassName()%>.class;
		}
<%
}
%>
		return getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);
	}
	
	/**
	 * @generated
	 */
	 private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized node classes here
	 	return null;
	 }

	/**
	 * @generated
	 */
	private Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
<%
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = genNode.getChildNodes();
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().equals(semanticType) && isChildNode<%=semanticChildNodeInterfaceName%>_<%=genChildNode.getVisualID()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) semanticElement)) {
			return <%=genChildNode.getNotationViewFactoryClassName()%>.class;
		}
<%	}
}
%>
		return getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);
	}
	
	/**
	 * @generated
	 */
	 private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized child node classes here
	 	return null;
	 }

	/**
	 * @generated
	 */
	protected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
<%
List genLinks = genDiagram.getLinks();
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticLinkInterfaceName%>().equals(semanticType) && isConnector<%=semanticLinkInterfaceName%>_<%=genLinkWithClass.getVisualID()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) semanticElement)) {
			return <%=genLink.getNotationViewFactoryClassName()%>.class;
		}
<%
	}
}
%>
		return getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);
	}
	
	/**
	 * @generated
	 */
	 private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
	 	// Handle unrecognized child node classes here
	 	return null;
	 }
	
	/**
	 * @generated
	 */
	private boolean isDiagram<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>_<%=genDiagram.getVisualID()%>(<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> element) {
		return true;
	}
	
<%
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedNodeInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
	/**
	 * @generated
	 */
	private boolean isNode<%=semanticNodeInterfaceName%>_<%=genNode.getVisualID()%>(<%=importManager.getImportedName(qualifiedNodeInterfaceName)%> element) {
		return true;
	}

<%
	List genChildNodes = genNode.getChildNodes();
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedChildNodeInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
	/**
	 * @generated
	 */
	private boolean isChildNode<%=semanticChildNodeInterfaceName%>_<%=genChildNode.getVisualID()%>(<%=importManager.getImportedName(qualifiedChildNodeInterfaceName)%> element) {
		return true;
	}

<%	}
}
%>
	
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
%>
	/**
	 * @generated
	 */
	private boolean isConnector<%=semanticLinkInterfaceName%>_<%=genLinkWithClass.getVisualID()%>(<%=importManager.getImportedName(qualifiedInterfaceName)%> element) {
		return true;
	}
<%
	}
}
%>
	
}
<%importManager.emitSortedImports();%>
