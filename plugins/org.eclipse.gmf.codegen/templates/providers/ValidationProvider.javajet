<%@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ValidationProviderGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.internal.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
final GenAuditRoot audits = genDiagram.getEditorGen().getAudits();
final boolean hasNotationModelAudit;
{
 boolean hasDiagramElementRule = false;
 if (audits != null) {
  for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
   GenAuditRule r = (GenAuditRule) it.next();
   if (r.getTarget() instanceof GenDiagramElementTarget || r.getTarget() instanceof GenNotationElementTarget) {
    hasDiagramElementRule = true;
    break;
   }
  }
 }
 hasNotationModelAudit = audits != null && hasDiagramElementRule;
}
final boolean rcp = genDiagram.getEditorGen().getApplication() != null;
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
final java.util.HashSet<String> innerClasses = new java.util.HashSet<String>();
final String __javaOperationContainer = "JavaAudits";
if(audits != null) {
	innerClasses.add(__javaOperationContainer);
	//innerClasses.addAll(audits.getAllRequiredConstraintAdaptersLocalClassNames());
	for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
		GenAuditRule nextAudit = (GenAuditRule) it.next();
		if (nextAudit.isRequiresConstraintAdapter()) {
			String nextClassName = nextAudit.getConstraintAdapterLocalClassName();
			if (nextClassName != null) {
				innerClasses.add(nextClassName);
			}
		}
	}
	//innerClasses.addAll(audits.getAllContextSelectorsLocalClassNames());
	for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
		String nextClassName = ((GenAuditRule) it.next()).getContextSelectorLocalClassName();
		if(nextClassName != null) {
			innerClasses.add(nextClassName);
		}			
	}	
}
innerClasses.add("CtxSwitchStrategy");
innerClasses.add("ValidateAction");
for(java.util.Iterator it = innerClasses.iterator(); it.hasNext();) importManager.registerInnerClass((String)it.next()); 

importManager.markImportLocation(stringBuffer);

if (!rcp) {
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.emf.workspace.util.WorkspaceSynchronizer");
}
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.common.util.Diagnostic");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.util.Diagnostician");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.emf.transaction.util.TransactionUtil");
importManager.addImport("org.eclipse.emf.validation.model.EvaluationMode");
importManager.addImport("org.eclipse.emf.validation.service.IBatchValidator");
importManager.addImport("org.eclipse.emf.validation.service.ModelValidationService");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.jface.action.Action");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.ui.IEditorPart");
importManager.addImport("org.eclipse.ui.PlatformUI");
%>

/**
 * @generated
 */
public class <%=genDiagram.getValidationProviderClassName()%> extends AbstractContributionItemProvider {
	/**
	 * @generated
	 */
	private static boolean constraintsActive = false;	
	
	/**
	 * @generated
	 */
	public static boolean shouldConstraintsBePrivate() {
		return false;
	}
	
	/**
	 * @generated
	 */
	protected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {
		if (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {
			return new ValidateAction(partDescriptor);
		}
		return super.createAction(actionId, partDescriptor);
	}
	
	/**
	 * @generated
	 */
	public static class ValidateAction extends Action {
		/**
		 * @generated
		 */		
		public static final String VALIDATE_ACTION_KEY = "validateAction"; //$NON-NLS-1$
		/**
		 * @generated
		 */
		private IWorkbenchPartDescriptor workbenchPartDescriptor;
		/**
		 * @generated
		 */
		public ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {
			setId(VALIDATE_ACTION_KEY);
			setText("Validate");
			this.workbenchPartDescriptor = workbenchPartDescriptor;
		}
		/**
		 * @generated
		 */
		public void run() {
			IWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();
			if(workbenchPart instanceof IDiagramWorkbenchPart) {
				final IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;
				try {
					<%if (!rcp) {%>new <%=importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation")%>(<%}%>
						new <%=importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress")%>() {
							public void run(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) throws InterruptedException, <%=importManager.getImportedName("java.lang.reflect.InvocationTargetException")%> {
								runValidation(part.getDiagramEditPart(), part.getDiagram());
							}
						}
					<%if (!rcp) {%>)<%}%>
					.run(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());			
				} catch (Exception e) {
					<%=pluginActivatorClass%>.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
				}
			}
		}

		/** 
		 * @generated
		 */
		public static void runValidation(View view) {
			try {
				if(<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagram(view.eResource())) {
					IEditorPart editorPart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
					if(editorPart instanceof IDiagramWorkbenchPart) {
						runValidation(((IDiagramWorkbenchPart)editorPart).getDiagramEditPart(), view);
					} else {
						runNonUIValidation(view);
					}
				}
			} catch(Exception e) {
				<%=pluginActivatorClass%>.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
			}
		}
		
		/**
		 * @generated
		 */
		public static void runNonUIValidation(View view) {
			DiagramEditPart diagramEditPart = OffscreenEditPartFactory.getInstance().createDiagramEditPart(view.getDiagram());
			runValidation(diagramEditPart, view);
		}		

		/**
		 * @generated
		 */
		public static void runValidation(DiagramEditPart diagramEditPart, View view) {
			final View target = view;
			final DiagramEditPart diagramPart = diagramEditPart;
			Runnable task = new Runnable() {
				public void run() {
					try {
						constraintsActive = true;
						validate(diagramPart, target);
					} finally {
						constraintsActive = false;
					}
				}
			};
			TransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);
			if(txDomain != null) {
				try {
					txDomain.runExclusive(task);
				} catch (Exception e) {
					<%=pluginActivatorClass%>.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
				}
			} else {
				task.run();
			}
		}

		/**
		 * @generated
		 */
		private static Diagnostic runEMFValidator(View target) {
			if(target.isSetElement() && target.getElement() != null) {
				return new Diagnostician() {
					public String getObjectLabel(EObject eObject) {
						return EMFCoreUtil.getQualifiedName(eObject, true);
					}
				}.validate(target.getElement());
			}
			return Diagnostic.OK_INSTANCE;
		}
	
		/**
		 * @generated
		 */
		private static void validate(DiagramEditPart diagramEditPart, View target) {
<%if (!rcp) {%>
			IFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;
			if (diagramFile != null) {
				<%=importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName())%>.deleteMarkers(diagramFile);
			}
<%}%>
			Diagnostic diagnostic = runEMFValidator(target);
<%if (rcp) {%>
			if (diagnostic.getSeverity() != Diagnostic.OK) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%>.getCurrent().getActiveShell(), "Validation", "Validation failed.",
					<%=importManager.getImportedName("org.eclipse.emf.common.util.BasicDiagnostic")%>.toIStatus(diagnostic));
				return;
			}
<%} else {%>
			if (diagramFile != null) {
				<%=importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName())%>.createMarkers(diagramFile, diagnostic, diagramEditPart);
			}
<%}%>
			IBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);
			validator.setIncludeLiveConstraints(true);
			if (target.isSetElement() && target.getElement() != null) {
				IStatus status = validator.validate(target.getElement());
<%if (rcp) {%>
				if (status.getSeverity() != IStatus.OK) {
					<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(
						<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%>.getCurrent().getActiveShell(), "Validation", "Validation failed.", status);
					return;
				}
<%} else {%>
				if (diagramFile != null) {
					<%=importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName())%>.createMarkers(diagramFile, status, diagramEditPart);
				}				
<%}%>
			}

<%if(hasNotationModelAudit) {%>
			validator.setTraversalStrategy(getNotationTraversalStrategy(validator));
			IStatus status = validator.validate(target);
<%if (rcp) {%>
			if (status.getSeverity() != IStatus.OK) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%>.getCurrent().getActiveShell(), "Validation", "Validation failed.", status);
				return;
			}
<%} else {%>
			if (diagramFile != null) {
				<%=importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName())%>.createMarkers(diagramFile, status, diagramEditPart);
			}
<%}%>
<%}%>
<%if (rcp) {%>
			<%=importManager.getImportedName("org.eclipse.swt.widgets.MessageBox")%> mb =
				new <%=importManager.getImportedName("org.eclipse.swt.widgets.MessageBox")%>(
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%>.getCurrent().getActiveShell(),
					<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.OK);
			mb.setText("Validation");
			mb.setMessage("Model is valid.");
			mb.open();
<%}%>
		}
	}

	/**
	* @generated
	*/
	static boolean isInDefaultEditorContext(Object object) {
		if(shouldConstraintsBePrivate() && !constraintsActive) {
			return false;
		}
		if (object instanceof View) {
			return constraintsActive && <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID((View)object));
		}
		return true;
	}	
<%
boolean usesNotationContextSwitch = false;
java.util.List allAudits = (audits != null) ? audits.getRules() : java.util.Collections.EMPTY_LIST;
// mere pairs
java.util.HashMap<String, GenAuditRule> contextId2Audit = new java.util.HashMap<String, GenAuditRule>();
java.util.Map<GenCommonBase, String> view2SelectorMap = new java.util.IdentityHashMap<GenCommonBase, String>();
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule audit = (GenAuditRule)it.next();
	String contextID = (audit.getTarget() != null) ? audit.getTarget().getClientContextID() : null;
	if(contextID == null || contextId2Audit.containsKey(contextID)) continue;
	contextId2Audit.put(contextID, audit);
}
for (GenAuditRule audit : contextId2Audit.values()) {
	String selectorClassName = audit.getContextSelectorLocalClassName();
%>
	/**
	* @generated
	*/
	public static class <%=selectorClassName%> implements <%=importManager.getImportedName("org.eclipse.emf.validation.model.IClientSelector")%> {
<%
	if(audit.getTarget() instanceof GenDiagramElementTarget) {
		usesNotationContextSwitch = true;
		GenDiagramElementTarget	diagramElement = (GenDiagramElementTarget)audit.getTarget();
		for(java.util.Iterator diagramElementIt = diagramElement.getElement().iterator(); diagramElementIt.hasNext();) {
			GenCommonBase nextElement = (GenCommonBase) diagramElementIt.next();
			view2SelectorMap.put(nextElement, selectorClassName);
		}
%>
		/**
		* @generated
		*/
		public boolean selects(Object object) {		
			if(isInDefaultEditorContext(object) && object instanceof View) {
				String id = ((View) object).getType();
				return id != null && semanticCtxIdMap.get(id) == <%=selectorClassName%>.class;
			}
			return false;
		}
	}
<%	} else {%>
		/**
		* @generated
		*/
		public boolean selects(Object object) {
			return isInDefaultEditorContext(object);	
		}	
	}		
<%
	} 
} // end of audits iteration
		
if(usesNotationContextSwitch) {
%>

	/**
	* @generated
	*/
	static final <%=importManager.getImportedName("java.util.Map")%> semanticCtxIdMap = new <%=importManager.getImportedName("java.util.HashMap")%>();
	/**
	* @generated
	*/
	static {
<%
	for(java.util.Iterator it = view2SelectorMap.keySet().iterator(); it.hasNext();) {
		GenCommonBase nextView = (GenCommonBase)it.next();
%>
		semanticCtxIdMap.put(String.valueOf(<%=importManager.getImportedName(nextView.getEditPartQualifiedClassName()) + ".VISUAL_ID"%>), <%=view2SelectorMap.get(nextView)%>.class); //$NON-NLS-1$
<%	} // end of view ID iteration %>
	}
<%
} // end of context map generation //usesNotationContextSwitch 
%>

<%if(hasNotationModelAudit) {%>
	/**
	* @generated
	*/
	static <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> getNotationTraversalStrategy(IBatchValidator validator) {
<%	if(usesNotationContextSwitch) {%>	
		return new CtxSwitchStrategy(validator);
<%} else {%>			
		return validator.getDefaultTraversalStrategy();
<%	} // end of usesNotationContextSwitch %>
	}
<%} // end of hasNotationModelAudit			

if(usesNotationContextSwitch) {%>
	/**
	 * @generated
	 */
	private static class CtxSwitchStrategy implements <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> {
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy")%> defaultStrategy;
		/**
		 * @generated
		 */
		private String currentSemanticCtxId;
		/**
		 * @generated
		 */
		private boolean ctxChanged = true;
		/**
		 * @generated
		 */
		private EObject currentTarget;	
		/**
		 * @generated
		 */
		private EObject preFetchedNextTarget;		
	
		/**
		 * @generated
		 */
		CtxSwitchStrategy(IBatchValidator validator) {
			this.defaultStrategy = validator.getDefaultTraversalStrategy();
		}
		
		/**
		 * @generated
		 */
		public void elementValidated(EObject element, IStatus status) {
			defaultStrategy.elementValidated(element, status);
		}

		/**
		 * @generated
		 */
		public boolean hasNext() {
			return defaultStrategy.hasNext();
		}

		/**
		 * @generated
		 */
		public boolean isClientContextChanged() {
			if(preFetchedNextTarget == null) {
				preFetchedNextTarget = next();
				prepareNextClientContext(preFetchedNextTarget);				
			}			  			
			return ctxChanged;
		}

		/**
		 * @generated
		 */
		public EObject next() {
			EObject nextTarget = preFetchedNextTarget;
			if(nextTarget == null) {
				nextTarget = defaultStrategy.next();
			}
			this.preFetchedNextTarget = null;
			return this.currentTarget = nextTarget;
		}

		/**
		 * @generated
		 */
		public void startTraversal(<%=importManager.getImportedName("java.util.Collection")%> traversalRoots,
				<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) {
			defaultStrategy.startTraversal(traversalRoots, monitor);
		}
		
		/**
		 * @generated
		 */
		private void prepareNextClientContext(EObject nextTarget) { 
			if (nextTarget != null && currentTarget != null) {
				if (nextTarget instanceof View) {
					String id = ((View) nextTarget).getType();
					String nextSemanticId = id != null
							&& semanticCtxIdMap.containsKey(id) ? id : null;
					if ((currentSemanticCtxId != null && !currentSemanticCtxId
							.equals(nextSemanticId))
							|| (nextSemanticId != null && !nextSemanticId
									.equals(currentSemanticCtxId))) {
						this.ctxChanged = true;
					}
					currentSemanticCtxId = nextSemanticId;
				} else {
					// context of domain model
					this.ctxChanged = currentSemanticCtxId != null;
					currentSemanticCtxId = null;
				}
			} else {
				this.ctxChanged = false;
			}
		}		
	}// CtxSwitchStrategy
<%} // end of usesNotationContextSwitch

final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final java.util.Map __exprEnvVariables = java.util.Collections.EMPTY_MAP;
final String __outEnvVarName = ""; // no env to setup //$NON-NLS-1$ 
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule nextAudit = (GenAuditRule)it.next();
	if(nextAudit.isRequiresConstraintAdapter() && nextAudit.getRule() != null && nextAudit.getTarget() != null && nextAudit.getTarget().getContext() != null) {
		GenClassifier __genExprContext = nextAudit.getTarget().getContext();		 
		ValueExpression __genValueExpression = nextAudit.getRule();
		String importedExpressionBase = (expressionProviders != null) ? importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()) : "null"; //$NON-NLS-1$
%>
	/**
	 * @generated
	 */
	public static class <%=nextAudit.getConstraintAdapterLocalClassName()%> extends <%=importManager.getImportedName("org.eclipse.emf.validation.AbstractModelConstraint")%> {
		/**
		 * @generated
		 */
		private <%=importedExpressionBase%> expression;
		/**
		 * @generated
		 */
		public <%=nextAudit.getConstraintAdapterLocalClassName()%>() {
			expression = <%@ include file="../expressions/getExpression.jetinc"%>;		
		}		
		/**
		 * @generated
		 */
		public IStatus validate(<%=importManager.getImportedName("org.eclipse.emf.validation.IValidationContext")%> ctx) {
			Object evalCtx = ctx.getTarget();
<%		if(nextAudit.getTarget() instanceof GenDomainAttributeTarget) {
			GenDomainAttributeTarget attrTarget = (GenDomainAttributeTarget) nextAudit.getTarget();
			if(attrTarget.getAttribute() != null) {
				String fGetter = (attrTarget.getAttribute() != null) ? importManager.getImportedName(attrTarget.getAttribute().getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + attrTarget.getAttribute().getFeatureAccessorName() : ""; //$NON-NLS-1$ //$NON-NLS-2$
%>
			if(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(<%=fGetter%>());
			if(evalCtx == null) {
<%				if(attrTarget.isNullAsError()) { %>
				return ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });
<%				} else {%>
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
<%				} %>
			}			
<%			}
		} else if(nextAudit.getTarget() instanceof GenAuditedMetricTarget) {
			GenAuditedMetricTarget metricTarget = (GenAuditedMetricTarget)nextAudit.getTarget();
			String metricKey = (metricTarget.getMetric() != null) ? metricTarget.getMetric().getKey() : "";
			String metricProviderClassName = importManager.getImportedName(genDiagram.getMetricProviderQualifiedClassName());%>			
			evalCtx = <%=metricProviderClassName%>.calculateMetric(<%=Conversions.toStringLiteral(metricKey)%>, evalCtx);
<%
		}
%>		
			Object result = expression.evaluate(evalCtx);
			if(result instanceof Boolean && ((Boolean)result).booleanValue()) {
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			}
			return ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); 
		}
	}
<%
	}
} /*end of Adapters iteration*/

final java.util.List<GenAuditRule> javaExpressions = new java.util.ArrayList<GenAuditRule>();
if (audits != null && audits.getEditorGen().getExpressionProviders() != null) {
  GenExpressionProviderContainer exprProviders = audits.getEditorGen().getExpressionProviders();
  for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
    GenAuditRule nextAudit = (GenAuditRule) it.next();
    if(nextAudit.getRule() != null && exprProviders.getProvider(nextAudit.getRule()) instanceof GenJavaExpressionProvider) {
      javaExpressions.add(nextAudit);
    }
  }
}

if(!javaExpressions.isEmpty()) {
%>
/**
 * @generated
 */
static class <%=__javaOperationContainer%> {
<%
	for (GenAuditRule nextJavaRule : javaExpressions) {
		GenClassifier __genExprContext = nextJavaRule.getTarget().getContext();		
		ValueExpression __genValueExpression = nextJavaRule.getRule();
		String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
	}
%>
} //<%=__javaOperationContainer%>
<%
} /* end of Java expression methods */
%>
} //<%=genDiagram.getValidationProviderClassName()%>
<%importManager.emitSortedImports();%>
