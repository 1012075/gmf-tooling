/*
 * Copyright (c) 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/gmf/2006/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";


//
// FIXME this odd code cries for meta-model refactoring/cleanup to simplify feature initialization
//


List[GenFeatureValueSpec] getFeatureInitializers(GenFeatureSeqInitializer si, GenJavaExpressionProvider jp) :
	si.initializers.typeSelect(GenFeatureValueSpec).select(x | jp.expressions.contains(x)).union(
	si.initializers.typeSelect(GenReferenceNewElementSpec).collect(x | getFeatureInitializers(x, jp)).flatten())
;

private List[GenFeatureValueSpec] getFeatureInitializers(GenReferenceNewElementSpec x, GenJavaExpressionProvider jp) :
	getNestedFeatureSeqInitializers(x).collect(y | getFeatureInitializers(y, jp)).flatten()
; 

private List[GenFeatureSeqInitializer] getAllFeatureSeqInitializers(GenFeatureSeqInitializer si) :
	{si}.union(si.initializers.typeSelect(GenReferenceNewElementSpec).getNestedFeatureSeqInitializers().flatten())
;

private List[GenFeatureSeqInitializer] getNestedFeatureSeqInitializers(GenReferenceNewElementSpec s) :
	s.newElementInitializers.getAllFeatureSeqInitializers().flatten()
;
