/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::EMFUtils»

«DEFINE MetricProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «metricProviderClassName»
		extends org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider {

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.HashMap context2MetricsMap;

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.List metricsRegistry;

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.HashMap key2MetricMap;

	«EXPAND xpt::Common::generatedMemberComment»
	private static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.jface.action.IAction createAction(String actionId,
			org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor partDescriptor) {
		if (MetricsAction.ACTION_KEY.equals(actionId)) {
			return new MetricsAction(partDescriptor);
		}
		return super.createAction(actionId, partDescriptor);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class MetricsAction extends org.eclipse.jface.action.Action {

		«EXPAND xpt::Common::generatedMemberComment»
		public static final String ACTION_KEY = "metricsAction"; //$NON-NLS-1$

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor;

		«EXPAND xpt::Common::generatedMemberComment»
		public MetricsAction(org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor) {
			setId(ACTION_KEY);
			setText("Metrics");
			this.workbenchPartDescriptor = workbenchPartDescriptor;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public void run() {
			org.eclipse.ui.IWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();
			org.eclipse.ui.IViewPart metricsView = null;
			try {
				metricsView = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);
				if (metricsView == null) {
					metricsView = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);
				} else {
					if (metricsView != null && workbenchPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
						final org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart part =
								(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) workbenchPart;
						((ResultView) metricsView).setInput(part);
					}
					workbenchPart.getSite().getPage().activate(metricsView);
				}
			} catch (org.eclipse.ui.PartInitException e) {
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Diagram metric view failure", e); //$NON-NLS-1$
			}
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	static java.util.List calculateMetrics(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart) {
		final org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart = diagramPart.getDiagramEditPart();
		try {
			return (java.util.List) diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(
				new org.eclipse.emf.transaction.RunnableWithResult.Impl() {

					public void run() {
						org.eclipse.gmf.runtime.notation.Diagram diagram = diagramEditPart.getDiagramView();
						java.util.List metrics = calculateMetrics(diagram, new java.util.ArrayList(50));
						if (diagram.getElement() != null) {
							calculateMetrics(diagram.getElement(), metrics);
						}
						// detach from EObject and bind to viewID
						java.util.HashSet elements = new java.util.HashSet();
						for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
							ElementMetrics elementMetrics = (ElementMetrics) it.next();
							elements.add(elementMetrics.target);
						}
						«getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap =
								new «getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(diagram, elements);
						for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
							ElementMetrics elementMetrics = (ElementMetrics) it.next();
							org.eclipse.gmf.runtime.notation.View targetView = «getDiagramEditorUtilQualifiedClassName()».findView(diagramEditPart, elementMetrics.target, element2ViewMap);
							elementMetrics.target = null; // detach EObject
							elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
						}
						setResult(metrics);
					}
				});
		} catch (InterruptedException e) {
			return java.util.Collections.EMPTY_LIST;
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	static java.util.List calculateMetrics(org.eclipse.emf.ecore.EObject target, java.util.List metricsList) {
		final org.eclipse.emf.ecore.EObject root = target;
		java.util.Iterator it = new java.util.Iterator() {

			java.util.Iterator contentsIt = root.eAllContents();
			boolean isInRoot = true;

			public boolean hasNext() {
				return isInRoot || contentsIt.hasNext();
			}

			public Object next() {
				if (isInRoot) {
					isInRoot = false;
					return root;
				}
				return contentsIt.next();
			}

			public void remove() {
				throw new UnsupportedOperationException();
			}
		};
		java.util.ArrayList metricsPerContext = new java.util.ArrayList();
		while (it.hasNext()) {
			Object nextElement = it.next();
			if (nextElement instanceof org.eclipse.emf.ecore.EObject) {
				org.eclipse.emf.ecore.EObject nextEObj = (org.eclipse.emf.ecore.EObject) nextElement;
				org.eclipse.emf.ecore.EClass nextTarget = nextEObj.eClass();
				java.util.Iterator superTypeIt = nextTarget.getEAllSuperTypes().iterator();
				while (nextTarget != null) {
					java.util.List metricList = getMetricsForTarget(nextTarget);
					if (metricList != null) {
						for (java.util.Iterator metricIt = metricList.iterator(); metricIt.hasNext();) {
							MetricDef nextMetric = (MetricDef) metricIt.next();
							if (nextMetric.appliesTo(nextEObj)) {
								Metric metric = new Metric(nextMetric, nextEObj);
								metricsPerContext.add(metric);
							}
						}
					}
					nextTarget = superTypeIt.hasNext() ? (org.eclipse.emf.ecore.EClass) superTypeIt.next() : null; 
				}
				if (!metricsPerContext.isEmpty()) {
					metricsList.add(new ElementMetrics(nextEObj, (Metric[]) metricsPerContext.toArray(new Metric[metricsPerContext.size()])));
					metricsPerContext.clear();
				}
			}
		}
		return metricsList;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static class ResultView extends org.eclipse.ui.part.ViewPart {

		«EXPAND xpt::Common::generatedMemberComment»
		public static final String VIEW_ID = "«getMetricViewID()»"; //$NON-NLS-1$

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.jface.viewers.TableViewer viewer;

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.emf.ecore.resource.Resource diagramResource;

		«EXPAND xpt::Common::generatedMemberComment»
	    void setInput(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart) {
			diagramResource = diagramPart.getDiagram().eResource();
			setTitleToolTip(diagramResource.getURI().path());
			java.util.List metrics = calculateMetrics(diagramPart);
	    	adjustLayout(metrics);
	    	viewer.setInput(metrics); 
	    }

		«EXPAND xpt::Common::generatedMemberComment»
	    private void adjustLayout(java.util.List metricResultList) {
	    	java.util.Map maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);
			org.eclipse.swt.widgets.Table table = viewer.getTable();
			org.eclipse.jface.viewers.TableLayout layout = new org.eclipse.jface.viewers.TableLayout();
			org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(table);
			gc.setFont(org.eclipse.jface.resource.JFaceResources.getDialogFont());
			int padding = gc.stringExtent("X").x * 2; //$NON-NLS-1$
			for (int i = 0; i < getMetrics().size(); i++) {
				MetricDef nextMetric = (MetricDef) getMetrics().get(i);
				String valueStr = (String) maxValStrMap.get(nextMetric.key);
				int minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;
				layout.addColumnData(new org.eclipse.jface.viewers.ColumnPixelData(minWidth, true));
			}
			gc.dispose();
			layout.addColumnData(new org.eclipse.jface.viewers.ColumnWeightData(1, 50, true));
			viewer.getTable().setLayout(layout);
			viewer.getTable().layout(true, true);
	    }

		«EXPAND xpt::Common::generatedMemberComment»
		public void createPartControl(org.eclipse.swt.widgets.Composite parent) {
			this.viewer = new org.eclipse.jface.viewers.TableViewer(parent, org.eclipse.swt.SWT.FULL_SELECTION);
			final org.eclipse.swt.widgets.Table table = viewer.getTable();
			table.setHeaderVisible(true);
			table.setLinesVisible(true);
			for (int i = 0; i < getMetrics().size(); i++) {
				MetricDef nextMetric = ((MetricDef) getMetrics().get(i));
				org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
				column.setAlignment(org.eclipse.swt.SWT.RIGHT);
				column.setMoveable(true);
				column.setText(nextMetric.key);
				column.setToolTipText(nextMetric.getToolTipText());
			}
			org.eclipse.swt.widgets.TableColumn objectColumn = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
			objectColumn.setText("Element");
			objectColumn.setToolTipText("Measurement element");
			viewer.setLabelProvider(new Labels());
			viewer.setContentProvider(new org.eclipse.jface.viewers.ArrayContentProvider());
			viewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() {

				public void open(org.eclipse.jface.viewers.OpenEvent event) {
					handleOpen(event);
				}
			});
			org.eclipse.swt.events.SelectionListener headerSelListener = new org.eclipse.swt.events.SelectionListener() {

				public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
					table.setSortColumn((org.eclipse.swt.widgets.TableColumn) e.getSource());  
					table.setSortDirection((table.getSortDirection() != org.eclipse.swt.SWT.DOWN) ? org.eclipse.swt.SWT.DOWN : org.eclipse.swt.SWT.UP);
					viewer.refresh();
				}

				public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) {
				}
			};
			org.eclipse.swt.widgets.TableColumn[] columns = viewer.getTable().getColumns();
			for (int i = 0; i < columns.length; i++) {
				columns[i].addSelectionListener(headerSelListener);
			}
			viewer.setSorter(new org.eclipse.jface.viewers.ViewerSorter() {

				public int compare(org.eclipse.jface.viewers.Viewer viewer, Object e1, Object e2) {
					org.eclipse.swt.widgets.TableColumn c = table.getSortColumn();
					int result = 0;
					if (c != null) {
						Metric mc1 = ((ElementMetrics) e1).getMetricByKey(c.getText());
						Metric mc2 = ((ElementMetrics) e2).getMetricByKey(c.getText());
						result = (mc1 != null && mc2 != null) ?
							mc1.compareTo(mc2) : (mc1 == null ? -1 : 1);
					} else {
						result = ((ElementMetrics) e1).targetElementQName.compareTo(((ElementMetrics) e2).targetElementQName);
					}
					return table.getSortDirection() == org.eclipse.swt.SWT.DOWN ? result : -result;
				}
			});
	        org.eclipse.ui.IEditorPart editor = getSite().getPage().getActiveEditor();
	        if (editor != null && editor.getClass().equals(«editorGen.editor.getQualifiedClassName()».class)) {
				setInput((«editorGen.editor.getQualifiedClassName()») editor);
	        }
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private void handleOpen(org.eclipse.jface.viewers.OpenEvent event) {
			try {
				org.eclipse.ui.IEditorPart editorPart = getSite().getPage().openEditor(
						new org.eclipse.ui.part.FileEditorInput(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(diagramResource)),
						«editorGen.editor.getQualifiedClassName()».ID);
				if (editorPart == null) {
					return;
				}
				org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart =
						(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) editorPart.getAdapter(
								org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart.class);
				ElementMetrics selection = (ElementMetrics) ((org.eclipse.jface.viewers.IStructuredSelection) event.getSelection()).getFirstElement();
				String viewID = selection.diagramElementID;
				if (viewID != null) {
					org.eclipse.gmf.runtime.notation.View targetView =
							(org.eclipse.gmf.runtime.notation.View) diagramPart.getDiagram().eResource().getEObject(viewID);
					if (targetView != null) {
						org.eclipse.gef.EditPart targetEditPart =
								(org.eclipse.gef.EditPart) diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(targetView);
						if (targetEditPart != null) {
							«getDiagramEditorUtilQualifiedClassName()».selectElementsInDiagram(
									diagramPart, java.util.Collections.singletonList(targetEditPart));
						}
					}
				}
			} catch (org.eclipse.ui.PartInitException e) {
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Can't open diagram editor", e); //$NON-NLS-1$
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private static java.util.Map calcMetricMaxValueStrLenMap(java.util.List allMetrics) {
			java.util.Map metric2MaxStrLen = new java.util.HashMap();
			for (int i = 0; i < getMetrics().size(); i++) {
				String nextKey = ((MetricDef) getMetrics().get(i)).key; 
				int trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);
				metric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));
			}
			for (java.util.Iterator it = allMetrics.iterator(); it.hasNext();) {
				ElementMetrics elementMetrics = (ElementMetrics) it.next();
				for (int i = 0; i < elementMetrics.metrics.length; i++) {
					Metric metric = elementMetrics.metrics[i];
					String valueStr = (String) metric2MaxStrLen.get(metric.def.key);
					if (valueStr == null || metric.displayValue.length() > valueStr.length()) {
						metric2MaxStrLen.put(metric.def.key, metric.displayValue);	
					}
				}
			}
			return metric2MaxStrLen;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public void setFocus() {
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private class Labels extends org.eclipse.jface.viewers.LabelProvider
				implements org.eclipse.jface.viewers.ITableLabelProvider, org.eclipse.jface.viewers.ITableColorProvider {

			«EXPAND xpt::Common::generatedMemberComment»
			private boolean isElementColumn(int columnIndex) {
				return columnIndex >= getMetrics().size();
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Image getColumnImage(Object element, int columnIndex) {
				return isElementColumn(columnIndex) ? ((ElementMetrics) element).elementImage : null;
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public String getColumnText(Object element, int columnIndex) {
				ElementMetrics elementMetrics = (ElementMetrics) element;
				if (columnIndex == getMetrics().size()) {
					return elementMetrics.targetElementQName;
				}
				String key = ((MetricDef) getMetrics().get(columnIndex)).key;
				Metric metric = elementMetrics.getMetricByKey(key);
				return (metric != null) ? metric.displayValue : "-"; //$NON-NLS-1$
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Color getBackground(Object element, int columnIndex) {
				return null; 
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Color getForeground(Object element, int columnIndex) {
				if (isElementColumn(columnIndex)) {
					return null;
				}
				ElementMetrics columnElement = (ElementMetrics) element;
				String key = ((MetricDef) getMetrics().get(columnIndex)).key;
				Metric metric = columnElement.getMetricByKey(key);
				if (metric != null && metric.value != null) {
					if (metric.def.highLimit != null && metric.def.highLimit.longValue() < metric.value.longValue()) {
						return org.eclipse.draw2d.ColorConstants.red;
					} else if (metric.def.lowLimit != null && metric.def.lowLimit.longValue() > metric.value.longValue()) {
						return org.eclipse.draw2d.ColorConstants.blue;
					}
				}
				return null;
			}
		}		
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class ElementMetrics {

		«EXPAND xpt::Common::generatedMemberComment»
		final Metric[] metrics;

		«EXPAND xpt::Common::generatedMemberComment»
		final String targetElementQName;

		«EXPAND xpt::Common::generatedMemberComment»
		final org.eclipse.swt.graphics.Image elementImage;

		«EXPAND xpt::Common::generatedMemberComment»
		String diagramElementID;

		«EXPAND xpt::Common::generatedMemberComment»
		org.eclipse.emf.ecore.EObject target;

		«EXPAND xpt::Common::generatedMemberComment»
		ElementMetrics(org.eclipse.emf.ecore.EObject target, Metric[] metrics) {
			this.metrics = metrics;	
			assert metrics.length > 0;
			this.target = target;
			org.eclipse.emf.ecore.EClass imageTarget = target.eClass();
			if (target instanceof org.eclipse.gmf.runtime.notation.View) {
				org.eclipse.gmf.runtime.notation.View viewTarget = (org.eclipse.gmf.runtime.notation.View) target;
				StringBuffer notationQNameBuf = new StringBuffer();
				notationQNameBuf.append(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(viewTarget, true));
				if ("".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$
					notationQNameBuf.append('-').append('>').append(
							org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(viewTarget.getElement(), true));
					imageTarget = viewTarget.getElement().eClass();
				}
				int visualID = «getVisualIDRegistryQualifiedClassName()».getVisualID(viewTarget);
				notationQNameBuf.append('[').append(visualID < 0
					? Integer.toString(System.identityHashCode(viewTarget))
					: Integer.toString(visualID)).append(']');
				this.targetElementQName = notationQNameBuf.toString();
			} else {
				this.targetElementQName = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(target, true);
			}
			this.elementImage = «getElementTypesQualifiedClassName()».getImage(imageTarget);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		Metric getMetricByKey(String key) {
			for (int i = 0; i < metrics.length; i++) {
				if (metrics[i].def.key.equals(key)) {
					return metrics[i]; 
				}
			}
			return null;
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class Metric implements Comparable {

		«EXPAND xpt::Common::generatedMemberComment»
		final MetricDef def;

		«EXPAND xpt::Common::generatedMemberComment»
		final Number value;

		«EXPAND xpt::Common::generatedMemberComment»
		final String displayValue;

		«EXPAND xpt::Common::generatedMemberComment»
		Metric(MetricDef def, org.eclipse.emf.ecore.EObject target) {
			this.def = def;
			value = def.calcMetric(target);
			this.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : "null"; //$NON-NLS-1$
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public int compareTo(Object other) {
			Metric otherMetric = (Metric) other;
			if (value != null && otherMetric.value != null) {
				return (value.longValue() < otherMetric.value.longValue()) ? -1
						: (value.longValue() == otherMetric.value.longValue() ? 0 : 1);
			}
			return (value == null && otherMetric.value == null) ? 0
					: (value == null) ? -1 : 1;
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class MetricDef {

		«EXPAND xpt::Common::generatedMemberComment»
		final Double lowLimit;

		«EXPAND xpt::Common::generatedMemberComment»
		final Double highLimit;

		«EXPAND xpt::Common::generatedMemberComment»
		final String key;

		«EXPAND xpt::Common::generatedMemberComment»
		final «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;

		«EXPAND xpt::Common::generatedMemberComment»
		final int[] semanticIDs;

		«EXPAND xpt::Common::generatedMemberComment»
		final String name;

		«EXPAND xpt::Common::generatedMemberComment»
		final String description;

		«EXPAND xpt::Common::generatedMemberComment»
		MetricDef(String key, «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression, int[] semanticIDs,
			Double low, Double high, String name, String description) {
			this.key = key;
			this.expression = expression;
			this.semanticIDs = semanticIDs;
			this.lowLimit = low;
			this.highLimit = high;
			this.name = name;
			this.description = description;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		Number calcMetric(Object contextInstance) {
			Object val = expression.evaluate(contextInstance);
			return (val instanceof Number) ? (Number) val : null;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		boolean appliesTo(org.eclipse.emf.ecore.EObject eObject) {
			if (eObject instanceof org.eclipse.gmf.runtime.notation.View && semanticIDs != null) {
				int eObjectID = «getVisualIDRegistryQualifiedClassName()».getVisualID((org.eclipse.gmf.runtime.notation.View) eObject); 
				for (int i = 0; i < semanticIDs.length; i++) {
					if (semanticIDs[i] == eObjectID) {
						return true;
					}
				}
				return false;
			}
			return eObject != null && (expression.context() instanceof org.eclipse.emf.ecore.EClass) &&
				((org.eclipse.emf.ecore.EClass) expression.context()).isSuperTypeOf(eObject.eClass());
		}

		«EXPAND xpt::Common::generatedMemberComment»
		String getToolTipText() {
			StringBuffer buf = new StringBuffer();
			if (name != null) {
				buf.append(name);
			}
			if (description != null) {
				buf.append('\n').append(description).append('\n');
			}
			if (lowLimit != null) {
				buf.append("low:").append(lowLimit);
			}
			if (highLimit != null) {
				buf.append(" high:").append(highLimit);
			}
			return buf.toString();
		}	
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static java.util.List/*MetricDef*/ getMetricsForTarget(org.eclipse.emf.ecore.EClass target) {
		if (context2MetricsMap == null) {
			initializeRegistry();
		}
		return (java.util.List) context2MetricsMap.get(target);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static java.util.List getMetrics() {
		if (metricsRegistry == null) {
			initializeRegistry();
		}
		return metricsRegistry;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static Number calculateMetric(String metricKey, Object contextInstance) {
		if (key2MetricMap == null) {
			initializeRegistry();
		}
		MetricDef metric = (MetricDef) key2MetricMap.get(metricKey);
		Number value = (metric != null) ? metric.calcMetric(contextInstance) : null;
		return (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static void initializeRegistry() {
	«IF editorGen.expressionProviders != null-»
		if (context2MetricsMap != null) {
			return;
		}
		«FOREACH editorGen.metrics.metrics AS nextMetric-»
			«IF null != nextMetric.rule && null != nextMetric.target && null != nextMetric.target.getContext()-»
		register(new MetricDef(«toStringLiteral(nextMetric.key)»,
				«EXPAND initializerExpr(nextMetric.rule, nextMetric.target.getContext()) FOR editorGen.expressionProviders.getProvider(nextMetric.rule)»,
				«IF null == nextMetric.target»null«ELSE»«EXPAND ids FOR nextMetric.target»«ENDIF»,
				«IF null == nextMetric.lowLimit»null«ELSE»new Double(«nextMetric.lowLimit»)«ENDIF»,
				«IF null == nextMetric.highLimit»null«ELSE»new Double(«nextMetric.highLimit»)«ENDIF»,
				«toStringLiteral(nextMetric.name)»,
				«toStringLiteral(nextMetric.description)»));
			«ENDIF-»
		«ENDFOREACH-»
	«ENDIF-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static void register(MetricDef metric) {
		if (context2MetricsMap == null) {
			context2MetricsMap = new java.util.HashMap();
			metricsRegistry = new java.util.ArrayList();
			key2MetricMap = new java.util.HashMap();
		}
		java.util.List metrics = (java.util.List) context2MetricsMap.get(metric.expression.context());
		if (metrics == null) {
			metrics = new java.util.ArrayList();
			context2MetricsMap.put(metric.expression.context(), metrics);
		}
		metricsRegistry.add(metric);
		metrics.add(metric);
		key2MetricMap.put(metric.key, metric);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class JavaRules {
	«IF editorGen.expressionProviders != null-»
		«FOREACH editorGen.metrics.metrics AS nextMetric-»
			«IF null != nextMetric.rule && null != nextMetric.target && null != nextMetric.target.getContext()-»
				«EXPAND javaInitializer(nextMetric.rule, nextMetric.target.getContext(), null) FOR editorGen.expressionProviders.getProvider(nextMetric.rule)-»
			«ENDIF-»
		«ENDFOREACH-»
	«ENDIF-»
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE ids FOR GenMeasurable-»
	null
«ENDDEFINE»

«DEFINE ids FOR GenDiagramElementTarget-»
	new int[] {
	«FOREACH element AS element-»
		«element.getEditPartQualifiedClassName()».VISUAL_ID,
	«ENDFOREACH-»
	}
«ENDDEFINE»

«DEFINE initializerExpr(ValueExpression valueExpr, GenClassifier exprContext) FOR GenExpressionProviderBase-»
«ENDDEFINE»

«DEFINE initializerExpr(ValueExpression valueExpr, GenClassifier exprContext) FOR GenExpressionInterpreter-»
	«getQualifiedClassName()».«getExpressionAccessor(valueExpr)»(«valueExpr.getBodyString()», «EXPAND MetaModel::MetaClass FOR exprContext»)
«ENDDEFINE»

«DEFINE initializerExpr(ValueExpression valueExpr, GenClassifier exprContext) FOR GenJavaExpressionProvider-»
	new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND MetaModel::MetaClass FOR exprContext») {

		protected Object doEvaluate(Object context, java.util.Map env) {
			«EXPAND MetaModel::DeclareAndAssign("self", "context", true) FOR exprContext»
			return JavaRules.«getOperationName(valueExpr)»(self);
		}
	}
«ENDDEFINE»

«DEFINE javaInitializer(gmfgen::ValueExpression valueExpr, genmodel::GenClassifier context, genmodel::GenClassifier oppositeEndContext) FOR GenExpressionProviderBase-»
«ENDDEFINE»

«DEFINE javaInitializer(gmfgen::ValueExpression valueExpr, genmodel::GenClassifier context, genmodel::GenClassifier oppositeEndContext) FOR GenJavaExpressionProvider-»
	«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(valueExpr, context, oppositeEndContext)-»
«ENDDEFINE»
