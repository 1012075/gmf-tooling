/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::EMFUtils»
«EXTENSION xpt::providers::Metrics»

«DEFINE MetricProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «metricProviderClassName»
		extends org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider {

	«EXPAND xpt::Common::generatedMemberComment»
	private static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.jface.action.IAction createAction(String actionId,
			org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor partDescriptor) {
		if (MetricsAction.ACTION_KEY.equals(actionId)) {
			return new MetricsAction(partDescriptor);
		}
		return super.createAction(actionId, partDescriptor);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class MetricsAction extends org.eclipse.jface.action.Action {

		«EXPAND xpt::Common::generatedMemberComment»
		public static final String ACTION_KEY = "metricsAction"; //$NON-NLS-1$

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor;

		«EXPAND xpt::Common::generatedMemberComment»
		public MetricsAction(org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor) {
			setId(ACTION_KEY);
			setText("Metrics");
			this.workbenchPartDescriptor = workbenchPartDescriptor;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public void run() {
			org.eclipse.ui.IWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();
			org.eclipse.ui.IViewPart metricsView = null;
			try {
				metricsView = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);
				if (metricsView == null) {
					metricsView = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);
				} else {
					if (metricsView != null && workbenchPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
						final org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart part =
								(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) workbenchPart;
						((ResultView) metricsView).setInput(part);
					}
					workbenchPart.getSite().getPage().activate(metricsView);
				}
			} catch (org.eclipse.ui.PartInitException e) {
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Diagram metric view failure", e); //$NON-NLS-1$
			}
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	static java.util.List calculateMetrics(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart) {
		final org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart = diagramPart.getDiagramEditPart();
		try {
			return (java.util.List) diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(
				new org.eclipse.emf.transaction.RunnableWithResult.Impl() {

					public void run() {
						org.eclipse.gmf.runtime.notation.Diagram diagram = diagramEditPart.getDiagramView();
						java.util.ArrayList/*<ElementMetrics>*/ metrics = new java.util.ArrayList/*<ElementMetrics>*/(50);
«IF !getNotationMetrics(editorGen.metrics).isEmpty()-»
						calculateNotationElementMetrics(diagram, metrics);
«ENDIF-»
«IF !getDiagramMetrics(editorGen.metrics).isEmpty()-»
						calculateDiagramElementMetrics(diagram, metrics);
«ENDIF-»
«IF !getDomainMetrics(editorGen.metrics).isEmpty()-»
						calculateSemanticElementMetrics(diagramEditPart, metrics);
«ENDIF-»
						setResult(metrics);
					}
				});
		} catch (InterruptedException e) {
			return java.util.Collections.EMPTY_LIST;
		}
	}

«IF !getNotationMetrics(editorGen.metrics).isEmpty()»«EXPAND calcNotationMetricsMethod FOR editorGen»«ENDIF»
«IF !getDiagramMetrics(editorGen.metrics).isEmpty()»«EXPAND calcDiagramMetricsMethod FOR editorGen»«ENDIF»
«IF !getDomainMetrics(editorGen.metrics).isEmpty()»«EXPAND calcDomainMetricsMethod FOR editorGen»«ENDIF»

«EXPAND resultsViewClass»

	«EXPAND xpt::Common::generatedMemberComment»
	private static class ElementMetrics {

		«EXPAND xpt::Common::generatedMemberComment»
		final Metric[] metrics;

		«EXPAND xpt::Common::generatedMemberComment»
		final String targetElementQName;

		«EXPAND xpt::Common::generatedMemberComment»
		final org.eclipse.swt.graphics.Image elementImage;

		«EXPAND xpt::Common::generatedMemberComment»
		String diagramElementID; «REM»FIXME add specific constructor for View elements, set diagramElementID from there«ENDREM»

		«EXPAND xpt::Common::generatedMemberComment»
		ElementMetrics(org.eclipse.emf.ecore.EObject target, Metric[] metrics) {
			assert metrics.length > 0;
			this.metrics = metrics;	
			org.eclipse.emf.ecore.EClass imageTarget = target.eClass();
			if (target instanceof org.eclipse.gmf.runtime.notation.View) {
				org.eclipse.gmf.runtime.notation.View viewTarget = (org.eclipse.gmf.runtime.notation.View) target;
				StringBuffer notationQNameBuf = new StringBuffer();
				notationQNameBuf.append(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(viewTarget, true));
				if ("".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$
					notationQNameBuf.append('-').append('>').append(
							org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(viewTarget.getElement(), true));
					imageTarget = viewTarget.getElement().eClass();
				}
				int visualID = «getVisualIDRegistryQualifiedClassName()».getVisualID(viewTarget);
				notationQNameBuf.append('[').append(visualID < 0
					? Integer.toString(System.identityHashCode(viewTarget))
					: Integer.toString(visualID)).append(']');
				this.targetElementQName = notationQNameBuf.toString();
			} else {
				this.targetElementQName = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(target, true);
			}
			this.elementImage = «getElementTypesQualifiedClassName()».getImage(imageTarget);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		Metric getMetricByKey(String key) {
			for (int i = 0; i < metrics.length; i++) {
				if (metrics[i].key.equals(key)) {
					return metrics[i]; 
				}
			}
			return null;
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class Metric implements Comparable {

		«EXPAND xpt::Common::generatedMemberComment»
		final String key;

		«EXPAND xpt::Common::generatedMemberComment»
		final Double value;

		«EXPAND xpt::Common::generatedMemberComment»
		final Double lowLimit;

		«EXPAND xpt::Common::generatedMemberComment»
		final Double highLimit;

		«EXPAND xpt::Common::generatedMemberComment»
		final String displayValue;

		«EXPAND xpt::Common::generatedMemberComment»
		Metric(String key, Double value) {
			this(key, value, null, null);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		Metric(String key, Double value, Double low, Double high) {
			assert key != null;
			this.key = key;
			this.value = value;
			this.lowLimit = low;
			this.highLimit = high;
			this.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : "null"; //$NON-NLS-1$
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public int compareTo(Object other) {
			Metric otherMetric = (Metric) other;
			if (value != null && otherMetric.value != null) {
				return (value.longValue() < otherMetric.value.longValue()) ? -1
						: (value.longValue() == otherMetric.value.longValue() ? 0 : 1);
			}
			return (value == null && otherMetric.value == null) ? 0
					: (value == null) ? -1 : 1;
		}
	}

«EXPAND keysAndToolTipsMethods FOR editorGen.metrics»

«EXPAND metricCalcField FOREACH editorGen.metrics.metrics.select(m | m.rule != null && m.target != null && m.target.getContext() != null)»
«EXPAND metricCalcMethod FOREACH editorGen.metrics.metrics.select(m | m.rule != null && m.target != null && m.target.getContext() != null)»

«EXPAND additions-»
}
«ENDDEFINE»


//////////////////////////////////////////////////////////////////////////


«DEFINE calcNotationMetricsMethod FOR GenEditorGenerator-»
	«EXPAND xpt::Common::generatedMemberComment»
	static void calculateNotationElementMetrics(org.eclipse.gmf.runtime.notation.Diagram diagram, java.util.List/*<ElementMetrics>*/ metricsList) {
		ElementMetrics row = null;
«LET getNotationMetrics(metrics).select(m | ((GenNotationElementTarget) m.target).element.ecoreClass.name == "Diagram") AS diagramMetrics-»
«IF !diagramMetrics.isEmpty()-»
		row = new ElementMetrics(diagram, new Metric[] {
«EXPAND metricResult("diagram", false) FOREACH diagramMetrics SEPARATOR ",\n"»
		});
		row.diagramElementID = diagram.eResource().getURIFragment(diagram);
		metricsList.add(row);
«ENDIF-»
«ENDLET-»
«LET getNotationMetrics(metrics).collect(m | ((GenNotationElementTarget) m.target).element).toSet() AS notationTargets»
		for (java.util.Iterator it = diagram.eAllContents(); it.hasNext(); ) {
			Object next = it.next();
«FOREACH notationTargets.typeSelect(GenClass) AS nt-»
			if («EXPAND MetaModel::IsInstance("next") FOR nt») {
				«EXPAND MetaModel::DeclareAndAssign("_" + nt.ecoreClass.name.toLowerCase(), "next", true) FOR nt»
				row = new ElementMetrics(«"_" + nt.ecoreClass.name.toLowerCase()», new Metric[] {«-»
				«FOREACH getNotationMetrics(metrics).select(m | ((GenNotationElementTarget) m.target).element == nt) AS m SEPARATOR ","»
					«EXPAND metricResult("_" + nt.ecoreClass.name.toLowerCase(), false) FOR m-»
				«ENDFOREACH»
				});
				row.diagramElementID = «"_" + nt.ecoreClass.name.toLowerCase()».eResource().getURIFragment(«"_" + nt.ecoreClass.name.toLowerCase()»);
				metricsList.add(row);
			}
«ENDFOREACH-»
		}
«ENDLET-»
	}
«ENDDEFINE»

«DEFINE calcDiagramMetricsMethod FOR GenEditorGenerator-»
	«EXPAND xpt::Common::generatedMemberComment»
	static void calculateDiagramElementMetrics(org.eclipse.gmf.runtime.notation.Diagram diagram, java.util.List/*<ElementMetrics>*/ metricsList) {
		org.eclipse.emf.ecore.EObject next = diagram;
		java.util.Iterator/*<EObject>*/ it = diagram.eAllContents();
		do {
			if (next instanceof org.eclipse.gmf.runtime.notation.View) {
				org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) next;
				final int vid = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR diagram»(view);
				java.util.ArrayList/*<Metric>*/ res = new java.util.ArrayList/*<Metric>*/(5);
				switch (vid) {
«FOREACH getDiagramMetrics(metrics).collect(m | ((GenDiagramElementTarget) m.target).element).flatten().toSet().typeSelect(GenCommonBase) AS cb-»
					case «EXPAND xpt::editor::VisualIDRegistry::visualID FOR cb» : {«-»
«FOREACH getDiagramMetrics(metrics).select(m | ((GenDiagramElementTarget) m.target).element.contains(cb)) AS m»
						res.add(«EXPAND metricResult("view", true) FOR m»);
«ENDFOREACH-»
						break;
					}
«ENDFOREACH-»
				}
				if (!res.isEmpty()) {
					ElementMetrics row = new ElementMetrics(view, (Metric[]) res.toArray(new Metric[res.size()]));
					row.diagramElementID = view.eResource().getURIFragment(view);
					metricsList.add(row);
				}
			}
			next = it.hasNext() ? (org.eclipse.emf.ecore.EObject) it.next() : null;
		} while (next != null);
	}
«ENDDEFINE»

/*
 * FIXME:
 * 		for now, keep approach from old implementation, i.e. iterate content
 *		of element associated with diagram. Smarter approach would be
 *		iteration over diagram elements, then accessing their respective
 *		semantic elements (if set), and collecting metrics for them.  
 */
«DEFINE calcDomainMetricsMethod FOR GenEditorGenerator»
	«EXPAND xpt::Common::generatedMemberComment("NOTE: metrics are being collected for domain elements contained in the semantic element associated with diagram view, actual diagram content (elements present there) is not taken into account.")»
	static void calculateSemanticElementMetrics(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart, java.util.List/*<ElementMetrics>*/ metricsList) {
		org.eclipse.gmf.runtime.notation.Diagram diagram = diagramEditPart.getDiagramView();
		org.eclipse.emf.ecore.EObject next = diagram.getElement();
		java.util.Iterator/*<EObject>*/ it = next != null ? next.eAllContents() : java.util.Collections.EMPTY_LIST.iterator();
		java.util.HashMap/*<EObject, ElementMetrics>*/ target2row = new java.util.HashMap/*<EObject, ElementMetrics>*/();
		while (next != null) {
			java.util.ArrayList/*<Metric>*/ res = new java.util.ArrayList/*<Metric>*/(5);
«FOREACH metrics.metrics.target.typeSelect(GenDomainElementTarget).element.purgeDups().typeSelect(GenClass) AS e-»
			if («EXPAND MetaModel::MetaClass FOR e».isInstance(next)) {
«FOREACH metrics.metrics.select(m | m.target.getContext() == e) AS m-»
				res.add(«EXPAND metricResult("next", true) FOR m»);
«ENDFOREACH-»
			}
«ENDFOREACH-»
			if (!res.isEmpty()) {
				ElementMetrics row = new ElementMetrics(next, (Metric[]) res.toArray(new Metric[res.size()]));
				metricsList.add(row);
				target2row.put(next, row);
			}
			next = it.hasNext() ? (org.eclipse.emf.ecore.EObject) it.next() : null;
		}
		if (!target2row.isEmpty()) { // list was modified, need to process only semantic metrics
			// bind semantic elements to notation
			«diagram.getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap = new «diagram.getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(diagram, target2row.keySet());
			for (java.util.Iterator it2 = target2row.entrySet().iterator(); it2.hasNext();) {
				java.util.Map.Entry entry = (java.util.Map.Entry) it2.next();
				org.eclipse.emf.ecore.EObject semanticElement = (org.eclipse.emf.ecore.EObject) entry.getKey();
				org.eclipse.gmf.runtime.notation.View targetView = «diagram.getDiagramEditorUtilQualifiedClassName()».findView(diagramEditPart, semanticElement, element2ViewMap);
				ElementMetrics elementMetrics = (ElementMetrics) entry.getValue();
				elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
			}
		}
	}
«ENDDEFINE»


«DEFINE metricCalcMethod FOR GenMetricRule»
	«EXPAND xpt::Common::generatedMemberComment»
	public static«REM»FIXME: (1) refactor to get rid of statics (2) 'public' only those referenced from audits«ENDREM» Double «calcMethodName()»(«EXPAND calcMethodArgs(this) FOR target») {
		«EXPAND calcMethodBody(this) FOR container.editorGen.expressionProviders.getProvider(rule)-»
	}
«ENDDEFINE»

«DEFINE calcMethodArgs(GenMetricRule metric) FOR GenMeasurable»«ERROR "Unrecognized metric target: " + this»«ENDDEFINE»

«DEFINE calcMethodArgs(GenMetricRule metric) FOR GenDomainElementTarget»«EXPAND MetaModel::QualifiedClassName FOR element» target«ENDDEFINE»

«REM»
	We do check all elements to be of specific kind to provide most narrow type cast
	However, GenDiagramElementTargetImpl#getContext uses first element's notation class only
«ENDREM»
«DEFINE calcMethodArgs(GenMetricRule metric) FOR GenDiagramElementTarget-»
«IF element.typeSelect(GenNode).size() == element.size()»org.eclipse.gmf.runtime.notation.Node«-»
«ELSEIF element.typeSelect(GenLink).size() == element.size()»org.eclipse.gmf.runtime.notation.Edge«-»
«ELSEIF element.typeSelect(GenDiagram).size() == element.size()»org.eclipse.gmf.runtime.notation.Diagram«-»
«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target«ENDDEFINE»

«REM»Note, use of QualifiedClassName here assumes it always works the same for the notation model, regardless of 'dynamic model' use (i.e. always gives qName of oeg.runtime.notation.* Java class)«ENDREM»
«DEFINE calcMethodArgs(GenMetricRule metric) FOR GenNotationElementTarget»«EXPAND MetaModel::QualifiedClassName FOR element» target«ENDDEFINE»


«DEFINE calcMethodBody(GenMetricRule metric) FOR GenExpressionProviderBase»«ERROR "No idea how to calculate metric\'s value for " + this»«ENDDEFINE»

«DEFINE calcMethodBody(GenMetricRule metric) FOR GenExpressionInterpreter-»
	if («exprFieldName(metric)» == null) {
		«exprFieldName(metric)» = «EXPAND xpt::expressions::getExpression::getExpression(metric.rule, metric.target.getContext())»;
	}
	Object val = «exprFieldName(metric)».evaluate(target);
	if (val instanceof Number) {
		return val.getClass() == Double.class ? (Double) val : new Double(((Number) val).doubleValue());
	}
	return null;
«ENDDEFINE»

«DEFINE calcMethodBody(GenMetricRule metric) FOR GenJavaExpressionProvider-»
	// TODO: implement this method
	// Ensure that you remove @generated or mark it @generated NOT
	/* Body of value expression:
	 * «metric.rule.body»
	 */«REM»XXX Why not UnsupportedOperationException???«ENDREM»
	throw new «container.getAbstractExpressionQualifiedClassName()».NoImplException("No user java implementation provided"); «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE metricCalcField FOR GenMetricRule-»
«EXPAND metricCalcField(this) FOR container.editorGen.expressionProviders.getProvider(rule)-»
«ENDDEFINE» 

«DEFINE metricCalcField(GenMetricRule metric) FOR GenExpressionProviderBase»«REM»NO-OP«ENDREM»«ENDDEFINE»
«DEFINE metricCalcField(GenMetricRule metric) FOR GenExpressionInterpreter-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static«REM»FIXME: refactor to get rid of static fields«ENDREM» «container.getAbstractExpressionQualifiedClassName()» «exprFieldName(metric)»;
«ENDDEFINE»

«DEFINE invokeCalcMethod(String accessor, boolean isSpecific) FOR GenMetricRule»
«container.editorGen.diagram.getMetricProviderQualifiedClassName()».«calcMethodName()»(«IF !isSpecific /*CastEObject would be better, however need GenClassifier*/»(«EXPAND MetaModel::QualifiedClassName FOR target.getContext()») «ENDIF»«accessor»)«ENDDEFINE»


/*
 * Next two methods should return arrays of identical length, hence are placed into a single template
 */
«DEFINE keysAndToolTipsMethods FOR GenMetricContainer»
	«EXPAND xpt::Common::generatedMemberComment»
	private static String[] getMetricKeys() {
		return new String[] {
			«FOREACH metrics AS m SEPARATOR ",\n"»«toStringLiteral(m.key)»«ENDFOREACH»
		};
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static String[] getMetricToolTips() {
		return new String[] {
			«FOREACH metrics AS m SEPARATOR ",\n"-»
«toStringLiteral(m.name == null ? m.key : m.name)»«IF m.description != null» + '\n' + «toStringLiteral(m.description)» + '\n'«ENDIF»«IF null != m.lowLimit» + «toStringLiteral("low: " + m.lowLimit)»«ENDIF»«IF null != m.highLimit» + «toStringLiteral("high: " + m.highLimit)»«ENDIF-»
			«ENDFOREACH»
		};
	} 
«ENDDEFINE»

«DEFINE metricResult(String targetAccessor, boolean isJustEObject) FOR GenMetricRule-»
new Metric(«toStringLiteral(key)», «calcMethodName()»(«IF isJustEObject && /*safe to assume it is GenClass, nevertheless check*/ !{ target.getContext() }.typeSelect(GenClass).isEmpty()»«EXPAND MetaModel::CastEObject(targetAccessor) FOR (GenClass) target.getContext()»«ELSE»«targetAccessor»«ENDIF»), «IF null == lowLimit»null«ELSE»new Double(«lowLimit»)«ENDIF», «IF null == highLimit»null«ELSE»new Double(«highLimit»)«ENDIF»)
«ENDDEFINE»



////////////////////////////////
//					 ResultView
//
«DEFINE resultsViewClass FOR GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static class ResultView extends org.eclipse.ui.part.ViewPart {

		«EXPAND xpt::Common::generatedMemberComment»
		public static final String VIEW_ID = "«getMetricViewID()»"; //$NON-NLS-1$

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.jface.viewers.TableViewer viewer;

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.emf.ecore.resource.Resource diagramResource;

		«EXPAND xpt::Common::generatedMemberComment»
	    void setInput(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart) {
			diagramResource = diagramPart.getDiagram().eResource();
			setTitleToolTip(diagramResource.getURI().path());
			java.util.List metrics = calculateMetrics(diagramPart);
	    	adjustLayout(metrics);
	    	viewer.setInput(metrics); 
	    }

		«EXPAND xpt::Common::generatedMemberComment»
	    private void adjustLayout(java.util.List metricResultList) {
	    	java.util.Map maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);
			org.eclipse.swt.widgets.Table table = viewer.getTable();
			org.eclipse.jface.viewers.TableLayout layout = new org.eclipse.jface.viewers.TableLayout();
			org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(table);
			gc.setFont(org.eclipse.jface.resource.JFaceResources.getDialogFont());
			int padding = gc.stringExtent("X").x * 2; //$NON-NLS-1$
			for (int i = 0; i < getMetricKeys().length; i++) {
				final String nextKey = getMetricKeys()[i];
				String valueStr = (String) maxValStrMap.get(nextKey);
				int minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;
				layout.addColumnData(new org.eclipse.jface.viewers.ColumnPixelData(minWidth, true));
			}
			gc.dispose();
			layout.addColumnData(new org.eclipse.jface.viewers.ColumnWeightData(1, 50, true));
			viewer.getTable().setLayout(layout);
			viewer.getTable().layout(true, true);
	    }

		«EXPAND xpt::Common::generatedMemberComment»
		public void createPartControl(org.eclipse.swt.widgets.Composite parent) {
			this.viewer = new org.eclipse.jface.viewers.TableViewer(parent, org.eclipse.swt.SWT.FULL_SELECTION);
			final org.eclipse.swt.widgets.Table table = viewer.getTable();
			table.setHeaderVisible(true);
			table.setLinesVisible(true);
			for (int i = 0; i < getMetricKeys().length; i++) {
				org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
				column.setAlignment(org.eclipse.swt.SWT.RIGHT);
				column.setMoveable(true);
				column.setText(getMetricKeys()[i]);
				column.setToolTipText(getMetricToolTips()[i]);
			}
			org.eclipse.swt.widgets.TableColumn objectColumn = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
			objectColumn.setText("Element");
			objectColumn.setToolTipText("Measurement element");
			viewer.setLabelProvider(new Labels());
			viewer.setContentProvider(new org.eclipse.jface.viewers.ArrayContentProvider());
			viewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() {

				public void open(org.eclipse.jface.viewers.OpenEvent event) {
					handleOpen(event);
				}
			});
			org.eclipse.swt.events.SelectionListener headerSelListener = new org.eclipse.swt.events.SelectionListener() {

				public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
					table.setSortColumn((org.eclipse.swt.widgets.TableColumn) e.getSource());  
					table.setSortDirection((table.getSortDirection() != org.eclipse.swt.SWT.DOWN) ? org.eclipse.swt.SWT.DOWN : org.eclipse.swt.SWT.UP);
					viewer.refresh();
				}

				public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) {
				}
			};
			org.eclipse.swt.widgets.TableColumn[] columns = viewer.getTable().getColumns();
			for (int i = 0; i < columns.length; i++) {
				columns[i].addSelectionListener(headerSelListener);
			}
			viewer.setSorter(new org.eclipse.jface.viewers.ViewerSorter() {

				public int compare(org.eclipse.jface.viewers.Viewer viewer, Object e1, Object e2) {
					org.eclipse.swt.widgets.TableColumn c = table.getSortColumn();
					int result = 0;
					if (c != null) {
						Metric mc1 = ((ElementMetrics) e1).getMetricByKey(c.getText());
						Metric mc2 = ((ElementMetrics) e2).getMetricByKey(c.getText());
						result = (mc1 != null && mc2 != null) ?
							mc1.compareTo(mc2) : (mc1 == null ? -1 : 1);
					} else {
						result = ((ElementMetrics) e1).targetElementQName.compareTo(((ElementMetrics) e2).targetElementQName);
					}
					return table.getSortDirection() == org.eclipse.swt.SWT.DOWN ? result : -result;
				}
			});
	        org.eclipse.ui.IEditorPart editor = getSite().getPage().getActiveEditor();
	        if (editor != null && editor.getClass().equals(«editorGen.editor.getQualifiedClassName()».class)) {
				setInput((«editorGen.editor.getQualifiedClassName()») editor);
	        }
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private void handleOpen(org.eclipse.jface.viewers.OpenEvent event) {
			try {
				org.eclipse.ui.IEditorPart editorPart = getSite().getPage().openEditor(
						new org.eclipse.ui.part.FileEditorInput(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(diagramResource)),
						«editorGen.editor.getQualifiedClassName()».ID);
				if (editorPart == null) {
					return;
				}
				org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart diagramPart =
						(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) editorPart.getAdapter(
								org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart.class);
				ElementMetrics selection = (ElementMetrics) ((org.eclipse.jface.viewers.IStructuredSelection) event.getSelection()).getFirstElement();
				String viewID = selection.diagramElementID;
				if (viewID != null) {
					org.eclipse.gmf.runtime.notation.View targetView =
							(org.eclipse.gmf.runtime.notation.View) diagramPart.getDiagram().eResource().getEObject(viewID);
					if (targetView != null) {
						org.eclipse.gef.EditPart targetEditPart =
								(org.eclipse.gef.EditPart) diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(targetView);
						if (targetEditPart != null) {
							«getDiagramEditorUtilQualifiedClassName()».selectElementsInDiagram(
									diagramPart, java.util.Collections.singletonList(targetEditPart));
						}
					}
				}
			} catch (org.eclipse.ui.PartInitException e) {
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Can't open diagram editor", e); //$NON-NLS-1$
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private static java.util.Map calcMetricMaxValueStrLenMap(java.util.List allMetrics) {
			java.util.Map metric2MaxStrLen = new java.util.HashMap();
			for (int i = 0; i < getMetricKeys().length; i++) {
				String nextKey = getMetricKeys()[i]; 
				int trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);
				metric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));
			}
			for (java.util.Iterator it = allMetrics.iterator(); it.hasNext();) {
				ElementMetrics elementMetrics = (ElementMetrics) it.next();
				for (int i = 0; i < elementMetrics.metrics.length; i++) {
					Metric metric = elementMetrics.metrics[i];
					String valueStr = (String) metric2MaxStrLen.get(metric.key);
					if (valueStr == null || metric.displayValue.length() > valueStr.length()) {
						metric2MaxStrLen.put(metric.key, metric.displayValue);	
					}
				}
			}
			return metric2MaxStrLen;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public void setFocus() {
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private class Labels extends org.eclipse.jface.viewers.LabelProvider
				implements org.eclipse.jface.viewers.ITableLabelProvider, org.eclipse.jface.viewers.ITableColorProvider {

			«EXPAND xpt::Common::generatedMemberComment»
			private boolean isElementColumn(int columnIndex) {
				return columnIndex >= getMetricKeys().length;
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Image getColumnImage(Object element, int columnIndex) {
				return isElementColumn(columnIndex) ? ((ElementMetrics) element).elementImage : null;
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public String getColumnText(Object element, int columnIndex) {
				ElementMetrics elementMetrics = (ElementMetrics) element;
				if (columnIndex == getMetricKeys().length) {
					return elementMetrics.targetElementQName;
				}
				final String key = getMetricKeys()[columnIndex];
				Metric metric = elementMetrics.getMetricByKey(key);
				return (metric != null) ? metric.displayValue : "-"; //$NON-NLS-1$
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Color getBackground(Object element, int columnIndex) {
				return null; 
			}

			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.swt.graphics.Color getForeground(Object element, int columnIndex) {
				if (isElementColumn(columnIndex)) {
					return null;
				}
				ElementMetrics columnElement = (ElementMetrics) element;
				final String key = getMetricKeys()[columnIndex];
				Metric metric = columnElement.getMetricByKey(key);
				if (metric != null && metric.value != null) {
					if (metric.highLimit != null && metric.highLimit.longValue() < metric.value.longValue()) {
						return org.eclipse.draw2d.ColorConstants.red;
					} else if (metric.lowLimit != null && metric.lowLimit.longValue() > metric.value.longValue()) {
						return org.eclipse.draw2d.ColorConstants.blue;
					}
				}
				return null;
			}
		}		
	}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»