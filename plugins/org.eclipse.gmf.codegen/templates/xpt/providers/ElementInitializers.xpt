/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - refactored javaInitilizers not to use methods from GMFGen model 
 */

«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::providers::ElementInitializers»
«EXTENSION xpt::GenModelUtils»

«DEFINE ElementInitializers FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class ElementInitializers {
	«EXPAND Initializers(this) FOR editorGen.expressionProviders-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE Initializers(GenDiagram diagram) FOR GenExpressionProviderContainer-»

// TODO move init methods out from nested Initializers class
«EXPAND xpt::Common::generatedClassComment»
public static class Initializers {
	«EXPAND initializer FOREACH diagram.getAllNodes()-»
	«EXPAND initializer FOREACH diagram.links-»

	«EXPAND xpt::Common::generatedMemberComment»
	private Initializers() {}


	«EXPAND xpt::Common::generatedMemberComment»
	static class Java {
		«EXPAND javaInitializer FOREACH diagram.getAllNodes()-»
		«EXPAND javaInitializer FOREACH diagram.links-»
	}
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»


«REM»
	Definitions of initializer objects.
«ENDREM»

«DEFINE initializer FOR GenNode»«EXPAND initializer(this) FOR modelFacet»«ENDDEFINE»

«DEFINE initializer FOR GenLink»«EXPAND initializer(this) FOR modelFacet»«ENDDEFINE»

«DEFINE initializer(GenCommonBase diagramElement) FOR ModelFacet»«ENDDEFINE»

«DEFINE initializer(GenCommonBase diagramElement) FOR TypeModelFacet-»
«EXPAND initializer(diagramElement) FOR modelElementInitializer-»
«ENDDEFINE»

«DEFINE initializer(GenCommonBase diagramElement) FOR GenElementInitializer»«ENDDEFINE»

«DEFINE initializer(GenCommonBase diagramElement) FOR GenFeatureSeqInitializer-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static void init_«diagramElement.getUniqueIdentifier()»(«EXPAND MetaModel::QualifiedClassName FOR elementClass» instance) {
		try {
			«FOREACH initializers AS i»«EXPAND performInit(diagramElement, "instance", elementClass, initializers.indexOf(i)) FOR i»«ENDFOREACH-»
		} catch(RuntimeException e) {
			«diagramElement.getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
		}
	}
«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenFeatureInitializer»«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenFeatureValueSpec-»
«EXPAND initializerExpr(this) FOR diagramElement.getDiagram().editorGen.expressionProviders.getProvider(this)».assignTo(«EXPAND MetaModel::MetaFeature FOR feature», «instanceVar»);
«REM»
 	XXX rewriting initializerExpr (unwrapping right here) would help to get rid of extra DeclareAndAssign
 	though need to consider performCast from assignTo
«EXPAND MetaModel::DeclareAndAssign("valueX", "expr.evaluate("+instanceVar+")", true) FOR findGenClassifier(feature.genClass.genPackage.genModel, feature.ecoreFeature.eType)»
«EXPAND MetaModel::setFeatureValue(instanceVar, instanceClass, "valueX") FOR feature»;
«ENDREM»
«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenReferenceNewElementSpec-»
«FOREACH newElementInitializers AS newElemInit»
«EXPAND MetaModel::NewInstance("newInstance" + count) FOR newElemInit.elementClass»
«IF isListType(feature)-»
«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass) FOR feature».add(newInstance«count»);
«ELSE-»
«EXPAND MetaModel::setFeatureValue(instanceVar, instanceClass, "newInstance" + count) FOR feature»;
«ENDIF-»
«FOREACH newElemInit.initializers AS i»«EXPAND performInit(diagramElement, "newInstance" + count, newElemInit.elementClass, count+100 + newElemInit.initializers.indexOf(i)) FOR i»«ENDFOREACH-»
«ENDFOREACH-»
«ENDDEFINE»


/////////////////////////////////

«DEFINE initializerExpr(GenFeatureValueSpec valueExpr) FOR GenExpressionProviderBase»«ENDDEFINE»

«DEFINE initializerExpr(GenFeatureValueSpec valueExpr) FOR GenExpressionInterpreter-»
	«getQualifiedClassName()».«getExpressionAccessor(valueExpr)»(«valueExpr.getBodyString()», «EXPAND MetaModel::MetaClass FOR valueExpr.featureSeqInitializer.elementClass»)
«ENDDEFINE»

«DEFINE initializerExpr(GenFeatureValueSpec valueExpr) FOR GenJavaExpressionProvider-»
«LET valueExpr.featureSeqInitializer.elementClass AS exprContext-»
	new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND MetaModel::MetaClass FOR exprContext») {

		protected Object doEvaluate(Object context, java.util.Map env) {
			«EXPAND MetaModel::DeclareAndAssign("self", "context", true) FOR exprContext»
			return Java.«getOperationName(valueExpr)»(self);
		}
	}«ENDLET-»
«ENDDEFINE»


«REM»
	Definitions of Java initialization methods.
«ENDREM»

«DEFINE javaInitializer FOR GenNode»«EXPAND javaInitializer(this) FOR modelFacet»«ENDDEFINE»

«DEFINE javaInitializer FOR GenLink»«EXPAND javaInitializer(this) FOR modelFacet»«ENDDEFINE»

«DEFINE javaInitializer(GenCommonBase diagramElement) FOR ModelFacet»«ENDDEFINE»

«DEFINE javaInitializer(GenCommonBase diagramElement) FOR TypeModelFacet-»
«EXPAND javaInitializer(diagramElement) FOR modelElementInitializer-»
«ENDDEFINE»

«DEFINE javaInitializer(GenCommonBase diagramElement) FOR GenElementInitializer»«ENDDEFINE»

«DEFINE javaInitializer(GenCommonBase diagramElement) FOR GenFeatureSeqInitializer-»
«FOREACH diagramElement.getDiagram().editorGen.expressionProviders.providers.typeSelect(GenJavaExpressionProvider) AS jp-»
«FOREACH getFeatureInitializers(this, jp) AS valueExpression-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(valueExpression, valueExpression.featureSeqInitializer.elementClass, null) FOR jp-»
«ENDFOREACH-»
«ENDFOREACH-»
«ENDDEFINE»