/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE className FOR gmfgen::GenDiagram»MessageFormatParser«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«parsersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE MessageFormatParser FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «parsersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» extends «EXPAND xpt::parsers::AbstractParser::qualifiedClassName» {

	«EXPAND xpt::Common::generatedMemberComment»
	private java.text.MessageFormat viewProcessor;

	«EXPAND xpt::Common::generatedMemberComment»
	private java.text.MessageFormat editorProcessor;

	«EXPAND xpt::Common::generatedMemberComment»
	private java.text.MessageFormat editProcessor;

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.ecore.EAttribute[] features) {
		super(features);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setViewPattern(String viewPattern) {
		super.setViewPattern(viewPattern);
		viewProcessor = createViewProcessor(viewPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat createViewProcessor(String viewPattern) {
		return new java.text.MessageFormat(viewPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat getViewProcessor() {
		return viewProcessor;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setEditorPattern(String editorPattern) {
		super.setEditorPattern(editorPattern);
		editorProcessor = createEditorProcessor(editorPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat createEditorProcessor(String editorPattern) {
		return new java.text.MessageFormat(editorPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat getEditorProcessor() {
		return editorProcessor;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setEditPattern(String editPattern) {
		super.setEditPattern(editPattern);
		editProcessor = createEditProcessor(editPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat createEditProcessor(String editPattern) {
		return new java.text.MessageFormat(editPattern);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat getEditProcessor() {
		return editProcessor;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getPrintString(org.eclipse.core.runtime.IAdaptable adapter, int flags) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		return getViewProcessor().format(getValues(element), new StringBuffer(),
				new java.text.FieldPosition(0)).toString();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getEditString(org.eclipse.core.runtime.IAdaptable adapter, int flags) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		return getEditorProcessor().format(getValues(element), new StringBuffer(),
				new java.text.FieldPosition(0)).toString();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus isValidEditString(
			org.eclipse.core.runtime.IAdaptable adapter, String editString) {
		java.text.ParsePosition pos = new java.text.ParsePosition(0);
		Object[] values = getEditProcessor().parse(editString, pos);
		if (values == null) {
			return new org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus(
					«editorGen.plugin.getActivatorQualifiedClassName()».ID,
					org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus.UNEDITABLE,
					"Invalid input at " + pos.getErrorIndex());
		}
		return validateNewValues(values);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.core.command.ICommand getParseCommand(
			org.eclipse.core.runtime.IAdaptable adapter, String newString, int flags) {
		Object[] values = getEditProcessor().parse(newString, new java.text.ParsePosition(0));
		return getParseCommand(adapter, values, flags);
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»
