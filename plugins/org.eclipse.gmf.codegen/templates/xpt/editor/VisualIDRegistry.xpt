/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::editor::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::editpolicies::LinkUtils»

«DEFINE VisualIDRegistry FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «editorGen.editor.packageName»;

	«EXPAND xpt::Common::generatedClassComment(
		"This registry is used to determine which type of visual object should be\n" +
		"created for the corresponding Diagram, Node, ChildNode or Link represented\n" + 
		"by a domain model object.\n"	
	)»
public class «visualIDRegistryClassName» {

	«EXPAND attributes-»

	«EXPAND getViewVisualID-»
	
	«EXPAND getModelID-»
	
	«EXPAND getVisualID-»

	«EXPAND getType-»
	
	«EXPAND getDiagramVisualID-»
	
	«EXPAND getNodeVisualID-»
	
	«EXPAND canCreateNode-»
	
	«EXPAND getLinkWithClassVisualID-»
	
	«EXPAND isDiagram-»
	«EXPAND evaluateInterpreterExpression-»
	«EXPAND javaConstraints-»

	«EXPAND additions-»	
}
«ENDDEFINE»

«REM»
	<Definitions of templates for outside usage>
«ENDREM»

«DEFINE visualID FOR gmfgen::GenCommonBase»«getEditPartQualifiedClassName()».VISUAL_ID«ENDDEFINE»

«DEFINE modelID FOR gmfgen::GenDiagram»«getEditPartQualifiedClassName()».MODEL_ID«ENDDEFINE»

«DEFINE getVisualIDMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getVisualIdMethodName»«ENDDEFINE»

«DEFINE getModelIDMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getModelIDMethodName»«ENDDEFINE»

«DEFINE getTypeMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getTypeMethodName»«ENDDEFINE»

«DEFINE getDiagramVisualIDMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getDiagramVisualIDMethodName»«ENDDEFINE»

«DEFINE getNodeVisualIDMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getNodeVisualIDMethodName»«ENDDEFINE»

«DEFINE canCreateNodeMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND canCreateNodeMethodName»«ENDDEFINE»

«DEFINE getLinkWithClassVisualIDMethodCall FOR gmfgen::GenDiagram»«getVisualIDRegistryQualifiedClassName()».«EXPAND getLinkWithClassVisualIDMethodName»«ENDDEFINE»

«REM»
	</Definitions of templates for outside usage>
«ENDREM»

«DEFINE attributes FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static final String DEBUG_KEY = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getBundle().getSymbolicName() + "/debug/visualID"; «EXPAND xpt::Common::nonNLS»
	«IF null != editorGen.expressionProviders-»
		«EXPAND xpt::expressions::getExpression::defineInterptererExpressionConstant FOREACH getAllNodes()-»
		«EXPAND xpt::expressions::getExpression::defineInterptererExpressionConstant FOREACH links-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getViewVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getVisualIdMethodName»(org.eclipse.gmf.runtime.notation.View view) {
	if (view instanceof org.eclipse.gmf.runtime.notation.Diagram) {
		if («EXPAND modelID».equals(view.getType())) {
			return «EXPAND visualID»;
		} else {
			«EXPAND unrecognizedVID-»
		}
	}
	return «EXPAND getVisualIDMethodCall»(view.getType());
}
«ENDDEFINE»

«DEFINE getVisualIdMethodName FOR gmfgen::GenDiagram»getVisualID«ENDDEFINE»

«DEFINE getModelID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static String «EXPAND getModelIDMethodName»(org.eclipse.gmf.runtime.notation.View view) {
	org.eclipse.gmf.runtime.notation.View diagram = view.getDiagram();
	while (view != diagram) {
		org.eclipse.emf.ecore.EAnnotation annotation = view.getEAnnotation("Shortcut"); «EXPAND xpt::Common::nonNLS»
		if (annotation != null) {
			return (String) annotation.getDetails().get("modelID"); «EXPAND xpt::Common::nonNLS»
		}
		view = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
	}
	return diagram != null ? diagram.getType() : null;
}
«ENDDEFINE»

«DEFINE getModelIDMethodName FOR gmfgen::GenDiagram»getModelID«ENDDEFINE»

«DEFINE getVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getVisualIdMethodName»(String type) {
	try {
		return Integer.parseInt(type);
	} catch (NumberFormatException e) {
		if (Boolean.TRUE.toString().equalsIgnoreCase(org.eclipse.core.runtime.Platform.getDebugOption(DEBUG_KEY))) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to parse view type as a visualID number: " + type);
		}
	}
	«EXPAND unrecognizedVID-»
}
«ENDDEFINE»

«DEFINE getType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static String «EXPAND getTypeMethodName»(int visualID) {
	return String.valueOf(visualID);
}
«ENDDEFINE»

«DEFINE getTypeMethodName FOR gmfgen::GenDiagram»getType«ENDDEFINE»

«DEFINE getDiagramVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getDiagramVisualIDMethodName»(org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null) {
		«EXPAND unrecognizedVID-»
	}
«IF null != domainDiagramElement-»
	«EXPAND returnVisualID-»
«ENDIF-»
	«EXPAND unrecognizedVID-»
}
«ENDDEFINE»

«DEFINE getDiagramVisualIDMethodName FOR gmfgen::GenDiagram»getDiagramVisualID«ENDDEFINE»

«DEFINE returnVisualID FOR gmfgen::GenCommonBase-»
if («EXPAND checkSemanticElement») {
	return «EXPAND visualID»;
}
«ENDDEFINE»

«DEFINE checkSemanticElement FOR gmfgen::GenCommonBase-»
	«ERROR "checkSemanticElement not supported for: " + this-»
«ENDDEFINE»

«DEFINE checkSemanticElement FOR gmfgen::GenDiagram»«EXPAND checkDomainElementMetaclass FOR domainDiagramElement» && «EXPAND isDiagramMethodName»((«getQualifiedInterfaceName(domainDiagramElement)») domainElement)«ENDDEFINE»

«DEFINE checkDomainElementMetaclass FOR genmodel::GenClass»«EXPAND xpt::Common::metaClassAccessor».isSuperTypeOf(domainElement.eClass())«ENDDEFINE»

«DEFINE getNodeVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getNodeVisualIDMethodName»(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null || !«EXPAND modelID».equals(«EXPAND getModelIDMethodCall»(containerView))) {
		«EXPAND unrecognizedVID-»
	}
	switch («EXPAND getVisualIDMethodCall»(containerView)) {
		«EXPAND caseDomainContainerVisualID FOREACH getAllContainers()-»
	}
	«EXPAND unrecognizedVID-»
}
«ENDDEFINE»

«DEFINE getNodeVisualIDMethodName FOR gmfgen::GenDiagram»getNodeVisualID«ENDDEFINE»

«DEFINE caseDomainContainerVisualID FOR gmfgen::GenContainerBase-»
	«IF getContainedSemanticNodes(this).size() > 0-»
«EXPAND xpt::Common::caseVisualID»
	«EXPAND returnVisualID FOREACH getContainedSemanticNodes(this)-»
	break;
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkSemanticElement FOR gmfgen::GenNode»«EXPAND checkDomainElementMetaclass FOR modelFacet.metaClass»«EXPAND checkDomainElementConstraints(this, getDiagram().editorGen.expressionProviders) FOR modelFacet»«ENDDEFINE»

«DEFINE checkDomainElementConstraints(gmfgen::GenCommonBase commonBase, gmfgen::GenExpressionProviderContainer providersContainer) FOR gmfgen::TypeModelFacet-»
«IF null != modelElementSelector && null != providersContainer» && «EXPAND checkDomainElementConstraints(commonBase, modelElementSelector, metaClass) FOR providersContainer.getProvider(modelElementSelector)»«ENDIF-»
«ENDDEFINE»

«DEFINE checkDomainElementConstraints(gmfgen::GenCommonBase commonBase, gmfgen::ValueExpression valueExpression, genmodel::GenClass contextMetaclass) FOR gmfgen::GenExpressionProviderBase-»
	«ERROR "Unsupported expression provider: " + this-»
«ENDDEFINE»

«DEFINE checkDomainElementConstraints(gmfgen::GenCommonBase commonBase, gmfgen::ValueExpression valueExpression, genmodel::GenClass contextMetaclass) FOR gmfgen::GenExpressionInterpreter»evaluate( «EXPAND xpt::expressions::getExpression::interptererExpressionConstantName FOR commonBase», domainElement)«ENDDEFINE»

«DEFINE checkDomainElementConstraints(gmfgen::GenCommonBase commonBase, gmfgen::ValueExpression valueExpression, genmodel::GenClass contextMetaclass) FOR gmfgen::GenJavaExpressionProvider»«EXPAND javaConstraintContainerClassName FOR commonBase».«getOperationName(valueExpression)»((«getQualifiedInstanceClassName(contextMetaclass)») domainElement).booleanValue()«ENDDEFINE»

«DEFINE canCreateNode FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static boolean «EXPAND canCreateNodeMethodName»(org.eclipse.gmf.runtime.notation.View containerView, int nodeVisualID) {
	String containerModelID = «EXPAND getModelIDMethodCall»(containerView);
	if (!«EXPAND modelID».equals(containerModelID)«EXPAND checkContainerModelID FOREACH shortcutsProvidedFor») { «EXPAND xpt::Common::nonNLS({}) FOREACH shortcutsProvidedFor SEPARATOR " "»
		return false;
	}
	int containerVisualID;
	if («EXPAND modelID».equals(containerModelID)) {
		containerVisualID = «EXPAND getVisualIDMethodCall»(containerView);
	} else {
		if (containerView instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			containerVisualID = «EXPAND visualID»;		
		} else {
			return false;
		}
	}
	switch (containerVisualID) {
		«EXPAND caseVisualID FOREACH getAllContainers().select(e| !e.getEssentialVisualChildren().isEmpty())-»
		«EXPAND caseVisualID FOREACH links.select(e| !e.getEssentialVisualChildren().isEmpty())-»
	}
	return false;
}
«ENDDEFINE»

«DEFINE canCreateNodeMethodName FOR gmfgen::GenDiagram»canCreateNode«ENDDEFINE»

«DEFINE checkContainerModelID FOR String» && !"«this»".equals(containerModelID)«ENDDEFINE»

«DEFINE caseVisualID FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID»
	«EXPAND checkEssentialChild FOREACH getEssentialVisualChildren()-»
	break;
«ENDDEFINE»

«DEFINE checkEssentialChild FOR gmfgen::GenCommonBase-»
if («EXPAND visualID» == nodeVisualID) {
	return true;
}
«ENDDEFINE»

«DEFINE getLinkWithClassVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getLinkWithClassVisualIDMethodName»(org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null) {
		«EXPAND unrecognizedVID-»
	}
	«EXPAND returnVisualID FOREACH links.select(link | isTypeLink(link))-»
	«EXPAND unrecognizedVID-»
}
«ENDDEFINE»

«DEFINE getLinkWithClassVisualIDMethodName FOR gmfgen::GenDiagram»getLinkWithClassVisualID«ENDDEFINE»

«DEFINE checkSemanticElement FOR gmfgen::GenLink-»
	«EXPAND checkSemanticElement(this) FOR modelFacet-»
«ENDDEFINE»

«DEFINE checkSemanticElement(gmfgen::GenLink genLink) FOR gmfgen::LinkModelFacet-»
	«ERROR "checkSemanticElement not supported only for TypeLinkModelFacet: " + this-»
«ENDDEFINE»

«DEFINE checkSemanticElement(gmfgen::GenLink genLink) FOR gmfgen::TypeLinkModelFacet»«EXPAND checkDomainElementMetaclass FOR metaClass»«EXPAND checkDomainElementConstraints(genLink, genLink.getDiagram().editorGen.expressionProviders)»«ENDDEFINE»

«DEFINE isDiagram FOR gmfgen::GenDiagram-»
	«IF null != domainDiagramElement-»
		«EXPAND xpt::Common::generatedMemberComment(
			"User can change implementation of this method to handle some specific\n" +
			"situations not covered by default logic.\n"
		)»
private static boolean «EXPAND isDiagramMethodName»(«getQualifiedInterfaceName(domainDiagramElement)» element) {
	return true;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE isDiagramMethodName FOR gmfgen::GenDiagram»isDiagram«ENDDEFINE»

«REM»Can be moved to xpt::expressions::getExpression.xpt«ENDREM»
«DEFINE evaluateInterpreterExpression FOR gmfgen::GenDiagram-»
	«IF null != editorGen.expressionProviders && !editorGen.expressionProviders.providers.typeSelect(gmfgen::GenExpressionInterpreter).isEmpty()-»
	
	«EXPAND xpt::Common::generatedMemberComment»
private static boolean evaluate(«editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression, Object element) {
	Object result = expression.evaluate(element);
	return result instanceof Boolean && ((Boolean)result).booleanValue();			
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE javaConstraints FOR gmfgen::GenDiagram-»
	«IF null != editorGen.expressionProviders && !editorGen.expressionProviders.providers.typeSelect(gmfgen::GenJavaExpressionProvider).isEmpty()-»
	
		«EXPAND xpt::Common::generatedClassComment»
private static class «EXPAND javaConstraintContainerClassName» {
	«EXPAND defineJavaConstraintOperation FOREACH getAllNodes()-»
	«EXPAND defineJavaConstraintOperation FOREACH links-»
	
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation FOR gmfgen::GenNode-»
	«EXPAND defineJavaConstraintOperation(this) FOR modelFacet-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation FOR gmfgen::GenLink-»
	«EXPAND defineJavaConstraintOperation(modelFacet)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::LinkModelFacet modelFacet) FOR gmfgen::GenLink»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::TypeLinkModelFacet typeModelFacet) FOR gmfgen::GenLink-»
	«EXPAND defineJavaConstraintOperation(this) FOR typeModelFacet-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenCommonBase commonBase) FOR gmfgen::TypeModelFacet-»
	«IF null != modelElementSelector-»
		«EXPAND defineJavaConstraintOperation(modelElementSelector, metaClass) FOR commonBase.getDiagram().editorGen.expressionProviders.getProvider(modelElementSelector)-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::ValueExpression valueExpression, genmodel::GenClass genClass) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::ValueExpression valueExpression, genmodel::GenClass genClass) FOR gmfgen::GenJavaExpressionProvider-»
	«IF !container.isCopy(valueExpression)-»

		«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(valueExpression, genClass, null)-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE unrecognizedVID FOR gmfgen::GenDiagram-»
return -1;
«ENDDEFINE»

«REM»Can be moved to xpt::expressions::getExpression.xpt«ENDREM»
«DEFINE javaConstraintContainerClassName FOR gmfgen::GenCommonBase»JavaConstraints«ENDDEFINE»

«DEFINE constraintsNotSupported FOR gmfgen::GenCommonBase-»
	«ERROR "CheckConstraints method not supported for: " + this-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»