«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::editor::palette::Utils»

«DEFINE Factory FOR gmfgen::Palette»
package «packageName»;
«EXPAND xpt::Common::copyright FOR diagram.editorGen»
/**
 * @generated
 */
public class «factoryClassName» {

	/**
	 * @generated
	 */
	public void fillPalette(org.eclipse.gef.palette.PaletteRoot paletteRoot) {
«IF definesStandardTools()-»
		cleanStandardTools(paletteRoot);
«ENDIF-»
		«EXPAND addEntry("paletteRoot") FOREACH groups-»
	}
«IF definesStandardTools()»
«EXPAND cleanStandardToolsHack-»
«ENDIF-»

«EXPAND createGroup FOREACH collectGroups()»
«EXPAND createEntry FOREACH collectTools()»

«IF needsNodeToolEntryClass()»«EXPAND nodeToolEntry»«ENDIF-»
«IF needsLinkToolEntryClass()»«EXPAND linkToolEntry»«ENDIF-»
}
«ENDDEFINE»

«DEFINE createGroup FOR gmfgen::ToolGroup-»
	/**
     * Creates "«title»" palette tool group
	 * @generated
	 */
	private org.eclipse.gef.palette.PaletteContainer «createMethodName»() {
		«EXPAND newContainer("paletteContainer")-»
		«EXPAND setDescription("paletteContainer", this) FOR description-»
		«EXPAND addEntry("paletteContainer") FOREACH entries-»
		return paletteContainer;
	}
«ENDDEFINE»

«DEFINE newContainer(String varName) FOR gmfgen::ToolGroup-»
«IF collapse && toolsOnly-»
		org.eclipse.gef.palette.PaletteDrawer «varName» = new org.eclipse.gef.palette.PaletteDrawer(«EXPAND i18nTitle»); //$NON-NLS-1$
«ELSEIF stack-»
		org.eclipse.gef.palette.PaletteStack «varName» = new org.eclipse.gef.palette.PaletteStack(«EXPAND i18nTitle», null, null); //$NON-NLS-1$
«ELSE-»
		org.eclipse.gef.palette.PaletteGroup «varName» = new org.eclipse.gef.palette.PaletteGroup(«EXPAND i18nTitle»); //$NON-NLS-1$
«ENDIF-»
«ENDDEFINE»

«DEFINE setDescription(String varName, gmfgen::ToolGroup gr) FOR String-»
«varName».setDescription(«EXPAND i18nDesc FOR gr»); //$NON-NLS-1$
«ENDDEFINE»

«DEFINE addEntry(String varName) FOR gmfgen::ToolGroupItem»
«ERROR "abstract addEntry(ToolGroupItem,String) template"»
«ENDDEFINE»

«DEFINE addEntry(String varName) FOR gmfgen::AbstractToolEntry-»
«varName».add(«createMethodName»());
«IF default_ && group.stack-»
«varName».setActiveEntry((org.eclipse.gef.palette.ToolEntry) paletteContainer.getChildren().get(paletteContainer.getChildren().size() - 1));
«ENDIF-»
«ENDDEFINE»

«DEFINE addEntry(String varName) FOR gmfgen::Separator-»
«varName».add(new org.eclipse.gef.palette.PaletteSeparator());
«ENDDEFINE»

«DEFINE addEntry(String varName) FOR gmfgen::ToolGroup-»
«varName».add(«createMethodName»());
«ENDDEFINE»

«DEFINE createEntry FOR gmfgen::AbstractToolEntry-»
	/**
	 * @generated
	 */
	private org.eclipse.gef.palette.ToolEntry «createMethodName»() {
		«EXPAND newEntry("entry")-»
		«EXPAND setSmallImage("entry")-»
		«EXPAND setLargeImage("entry")-»
		«EXPAND setToolClass("entry")-»
		«EXPAND setToolProperty("entry") FOREACH properties-»
		return entry;
	}
«ENDDEFINE»

«DEFINE newEntry(String toolVarName) FOR gmfgen::AbstractToolEntry-»
«ERROR "abstract newEntry(AbstractToolEntry,String) template"»
«ENDDEFINE»

«DEFINE newEntry(String toolVarName) FOR gmfgen::ToolEntry-»
«IF elements.isEmpty()-»
org.eclipse.gef.palette.ToolEntry «toolVarName» = new org.eclipse.gef.palette.ToolEntry(«EXPAND i18nTitle», «EXPAND i18nDesc», null, null) {}; //$NON-NLS-1$ $NON-NLS-2$
«ELSE-»
«LET genNodes.isEmpty() ? "LinkToolEntry" : "NodeToolEntry" AS toolEntryClass-»
java.util.List/*<IElementType>*/ types = new java.util.ArrayList/*<IElementType>*/(«elements.size()»);
«FOREACH elements AS e-»
types.add(«elementTypesClass()».«e.getUniqueIdentifier()»);
«ENDFOREACH-»
«toolEntryClass» «toolVarName» = new «toolEntryClass»(«EXPAND i18nTitle», «EXPAND i18nDesc», types); //$NON-NLS-1$ $NON-NLS-2$
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«DEFINE newEntry(String toolVarName) FOR gmfgen::StandardEntry-»
«IF StandardEntryKind::SELECT.value == kind.value -»
«EXPAND newStdSelectEntry(toolVarName)-»
«ELSEIF kind.value == StandardEntryKind::MARQUEE.value-»
«EXPAND newStdMarqueeEntry(toolVarName)-»
«ELSEIF kind.value == StandardEntryKind::ZOOM.value-»
«EXPAND newStdZoomEntry(toolVarName)-»
«ELSE-»
«EXPAND newStdOtherEntry(toolVarName)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE newStdSelectEntry(String toolVarName) FOR gmfgen::StandardEntry-»
org.eclipse.gef.palette.PanningSelectionToolEntry «toolVarName» = new org.eclipse.gef.palette.PanningSelectionToolEntry();
«ENDDEFINE»

«DEFINE newStdMarqueeEntry(String toolVarName) FOR gmfgen::StandardEntry-»
org.eclipse.gef.palette.MarqueeToolEntry «toolVarName» = new org.eclipse.gef.palette.MarqueeToolEntry();
«ENDDEFINE»

«DEFINE newStdZoomEntry(String toolVarName) FOR gmfgen::StandardEntry-»
FIXME
«ENDDEFINE»

«DEFINE newStdOtherEntry(String toolVarName) FOR gmfgen::StandardEntry-»
«ERROR "override newStdOtherEntry(StandardEntry, String) for kind " + kind.literal»
«ENDDEFINE»

«DEFINE setSmallImage(String toolVarName) FOR gmfgen::AbstractToolEntry-»
«IF null != smallIconPath-»
«toolVarName».setSmallIcon(«activatorFQN()».findImageDescriptor("«smallIconPath»")); //$NON-NLS-1$
«ELSEIF !{this}.typeSelect(gmfgen::ToolEntry).elements.isEmpty()-»
«LET ((gmfgen::ToolEntry) this) AS toolEntry-»
«toolVarName».setSmallIcon(«elementTypesClass(toolEntry)».getImageDescriptor(«elementTypesClass(toolEntry)».«((GenCommonBase) toolEntry.elements.toList().first()).getUniqueIdentifier()»));
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«DEFINE setLargeImage(String toolVarName) FOR gmfgen::AbstractToolEntry-»
«IF null != largeIconPath-»
«toolVarName».setLargeIcon(«activatorFQN()».findImageDescriptor("«largeIconPath»")); //$NON-NLS-1$
«ELSEIF !{this}.typeSelect(gmfgen::ToolEntry).elements.isEmpty()-»
«toolVarName».setLargeIcon(«toolVarName».getSmallIcon());
«ENDIF-»
«ENDDEFINE»

«DEFINE setToolClass(String toolVarName) FOR gmfgen::AbstractToolEntry-»
«IF null != qualifiedToolName-»
«toolVarName».setToolClass(«qualifiedToolName».class);
«ENDIF-»
«ENDDEFINE»

«DEFINE setToolProperty(String toolVarName) FOR ecore::EStringToStringMapEntry-»
«toolVarName».setToolProperty(«key», «value»);
«ENDDEFINE»

«DEFINE i18nTitle FOR gmfgen::ToolEntry-»
«activatorFQN()».getString("«i18nKey()».title")«ENDDEFINE»

«DEFINE i18nTitle FOR gmfgen::ToolGroup-»
«activatorFQN()».getString("«i18nKey()».title")«ENDDEFINE»

«DEFINE i18nDesc FOR gmfgen::ToolEntry-»
«activatorFQN()».getString("«i18nKey()».desc")«ENDDEFINE»

«DEFINE i18nDesc FOR gmfgen::ToolGroup-»
«activatorFQN()».getString("«i18nKey()».desc")«ENDDEFINE»

«DEFINE cleanStandardToolsHack FOR gmfgen::Palette»
	/**
	 * Workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=159289
	 * @generated
	 */
	private void cleanStandardTools(org.eclipse.gef.palette.PaletteRoot paletteRoot) {
		for (java.util.Iterator it = paletteRoot.getChildren().iterator(); it.hasNext();) {
			org.eclipse.gef.palette.PaletteEntry entry = (org.eclipse.gef.palette.PaletteEntry) it.next();
			if (!"standardGroup".equals(entry.getId())) { //$NON-NLS-1$
				continue;
			}
			for (java.util.Iterator it2 = ((org.eclipse.gef.palette.PaletteContainer) entry).getChildren().iterator(); it2.hasNext();) {
				org.eclipse.gef.palette.PaletteEntry entry2 = (org.eclipse.gef.palette.PaletteEntry) it2.next();
				if ("zoomTool".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				} else if ("noteStack".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				} else if ("selectionTool".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				}
				if (paletteRoot.getDefaultEntry() == entry2) {
					paletteRoot.setDefaultEntry(null);
				}
			}
		}
	}
«ENDDEFINE»

«DEFINE nodeToolEntry FOR Object»
	/**
	 * @generated
	 */
	private static class NodeToolEntry extends org.eclipse.gef.palette.ToolEntry {

		/**
		 * @generated
		 */
		private final java.util.List elementTypes;

		/**
		 * @generated
		 */
		private NodeToolEntry(String title, String description, java.util.List elementTypes) {
			super(title, description, null, null);
			this.elementTypes = elementTypes;
		}

		/**
		 * @generated
		 */
		public org.eclipse.gef.Tool createTool() {
			org.eclipse.gef.Tool tool = new org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool(elementTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
«ENDDEFINE»

«DEFINE linkToolEntry FOR Object»
	/**
	 * @generated
	 */
	private static class LinkToolEntry extends org.eclipse.gef.palette.ToolEntry {

		/**
		 * @generated
		 */
		private final java.util.List relationshipTypes;

		/**
		 * @generated
		 */
		private LinkToolEntry(String title, String description, java.util.List relationshipTypes) {
			super(title, description, null, null);
			this.relationshipTypes = relationshipTypes;
		}

		/**
		 * @generated
		 */
		public org.eclipse.gef.Tool createTool() {
			org.eclipse.gef.Tool tool = new org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool(relationshipTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
«ENDDEFINE»
