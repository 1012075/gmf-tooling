/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Dmitry Stadnik (Borland) - rewritten in xpand
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE className FOR gmfgen::GenDiagram»«newDiagramFileWizardClassName»«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«editorGen.editor.packageName».«EXPAND className»«ENDDEFINE»

«DEFINE NewDiagramFileWizard FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» extends org.eclipse.jface.wizard.Wizard {

	«EXPAND xpt::Common::generatedMemberComment»
	private «EXPAND creationPage» myFileCreationPage;

	«EXPAND xpt::Common::generatedMemberComment»
	private «EXPAND xpt::editor::ModelElementSelectionPage::qualifiedClassName» diagramRootElementSelectionPage;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.transaction.TransactionalEditingDomain myEditingDomain;

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.common.util.URI domainModelURI,
			org.eclipse.emf.ecore.EObject diagramRoot,
			org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain) {
		assert domainModelURI != null : "Domain model uri must be specified"; «EXPAND xpt::Common::nonNLS»
	    assert diagramRoot != null : "Doagram root element must be specified"; «EXPAND xpt::Common::nonNLS»
	    assert editingDomain != null : "Editing domain must be specified"; «EXPAND xpt::Common::nonNLS»

		myFileCreationPage = new «EXPAND creationPage»("Initialize new diagram file", org.eclipse.jface.viewers.StructuredSelection.EMPTY);
		myFileCreationPage.setTitle("Diagram file");
		myFileCreationPage.setDescription(
			"Create new diagram based on " + «getEditPartQualifiedClassName()».MODEL_ID + " model content");
		org.eclipse.core.runtime.IPath filePath;
		String fileName = domainModelURI.trimFileExtension().lastSegment();
		if (domainModelURI.isPlatformResource()) {
			filePath = new org.eclipse.core.runtime.Path(domainModelURI.trimSegments(1).toPlatformString(true));
		} else if (domainModelURI.isFile()) {
			filePath = new org.eclipse.core.runtime.Path(domainModelURI.trimSegments(1).toFileString());
		} else {
			// TODO : use some default path
			throw new IllegalArgumentException("Unsupported URI: " + domainModelURI);
		}
		myFileCreationPage.setContainerFullPath(filePath);
		myFileCreationPage.setFileName(«getDiagramEditorUtilQualifiedClassName()».getUniqueFileName(
				filePath, fileName, "«editorGen.diagramFileExtension»")); «EXPAND xpt::Common::nonNLS»

		diagramRootElementSelectionPage = new DiagramRootElementSelectionPage("Select diagram root element");
		diagramRootElementSelectionPage.setTitle("Diagram root element");
		diagramRootElementSelectionPage.setDescription("Select semantic model element to be depicted on diagram");
		diagramRootElementSelectionPage.setModelElement(diagramRoot);

	   	myEditingDomain = editingDomain;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void addPages() {
		addPage(myFileCreationPage);
		addPage(diagramRootElementSelectionPage);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean performFinish() {
		java.util.List affectedFiles = new java.util.LinkedList();
		«IF null == editorGen.application-»
		org.eclipse.core.resources.IFile diagramFile = myFileCreationPage.createNewFile();
		try {
			diagramFile.setCharset("UTF-8", new org.eclipse.core.runtime.NullProgressMonitor()); «EXPAND xpt::Common::nonNLS»
		} catch (org.eclipse.core.runtime.CoreException e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Unable to set charset for diagram file", e); «EXPAND xpt::Common::nonNLS»
		}
		affectedFiles.add(diagramFile);
		org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);
		«ELSE-»
		org.eclipse.core.runtime.IPath diagramModelPath = myFileCreationPage.getContainerFullPath().append(myFileCreationPage.getFileName());
		org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createFileURI(diagramModelPath.toString());
		«ENDIF-»
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet = myEditingDomain.getResourceSet();
		final org.eclipse.emf.ecore.resource.Resource diagramResource = resourceSet.createResource(diagramModelURI);
		org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand command =
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(
				myEditingDomain, "Initializing diagram contents", affectedFiles) { «EXPAND xpt::Common::nonNLS»

			protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
					org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
						throws org.eclipse.core.commands.ExecutionException {
				int diagramVID = «getVisualIDRegistryQualifiedClassName()».getDiagramVisualID(diagramRootElementSelectionPage.getModelElement());
				if (diagramVID != «getEditPartQualifiedClassName()».VISUAL_ID) {
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
						"Incorrect model object stored as a root resource object"); «EXPAND xpt::Common::nonNLS»
				}
				org.eclipse.gmf.runtime.notation.Diagram diagram =
					org.eclipse.gmf.runtime.diagram.core.services.ViewService.createDiagram(
						diagramRootElementSelectionPage.getModelElement(), «getEditPartQualifiedClassName()».MODEL_ID,
						«editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT);
				diagramResource.getContents().add(diagram);
				«IF editorGen.sameFileForDiagramAndModel-»
				diagramResource.getContents().add(diagram.getElement());
				«ENDIF-»
				«IF !synchronized-»
				new «editorGen.editor.packageName».DiagramContentsInitializer().initDiagramContents(diagram, diagramRootElementSelectionPage.getModelElement());
				«ENDIF-»
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
			}
		};
		try {
			org.eclipse.core.commands.operations.OperationHistoryFactory.getOperationHistory().execute(
				command, new org.eclipse.core.runtime.NullProgressMonitor(), null);
			diagramResource.save(java.util.Collections.EMPTY_MAP);
			«getDiagramEditorUtilQualifiedClassName()».openDiagram(diagramResource);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Unable to create model and diagram", e); «EXPAND xpt::Common::nonNLS»
		} catch (java.io.IOException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Save operation failed for: " + diagramModelURI, ex); «EXPAND xpt::Common::nonNLS»
		} catch (org.eclipse.ui.PartInitException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Unable to open editor", ex); «EXPAND xpt::Common::nonNLS»
		}			
		return true;
	}

	«EXPAND xpt::Common::generatedClassComment»
	private static class DiagramRootElementSelectionPage extends «EXPAND xpt::editor::ModelElementSelectionPage::qualifiedClassName» {

		«EXPAND xpt::Common::generatedMemberComment»
		protected DiagramRootElementSelectionPage(String pageName) {
			super(pageName);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected String getSelectionTitle() {
			return "Select diagram root element:";
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected boolean validatePage() {
			if (selectedModelElement == null) {
				setErrorMessage("Diagram root element is not selected");
				return false;
			}
			boolean result = org.eclipse.gmf.runtime.diagram.core.services.ViewService.getInstance().provides(
				new org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation(
					new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(selectedModelElement),
					«getEditPartQualifiedClassName()».MODEL_ID,
					«editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT));
			setErrorMessage(result ? null : "Invalid diagram root element is selected");
			return result;
		}
	}
}
«ENDDEFINE»

«DEFINE creationPage FOR gmfgen::GenDiagram»
«IF null == editorGen.application-»
org.eclipse.ui.dialogs.WizardNewFileCreationPage«ELSE-»
«editorGen.application.packageName».WizardNewFileCreationPage«ENDIF-»
«ENDDEFINE»
