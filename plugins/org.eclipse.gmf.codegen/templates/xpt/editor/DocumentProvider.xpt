/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»

«DEFINE DocumentProvider FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «documentProviderClassName» extends org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider implements org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider {
	
	«EXPAND createElementInfo-»
	
	«EXPAND createDocument-»
	
	«EXPAND setupDocument-»
	
	«EXPAND computeModificationStamp-»
	
	«EXPAND createEmptyDocument-»
	
	«EXPAND createEditingDomain-»
	
	«EXPAND setDocumentContent-»
	
	«EXPAND getModificationStamp-»
	
	«EXPAND getSynchronizationStamp-»
	
	«EXPAND isDeleted-»
	
	«EXPAND getResourceSetInfo-»
	
	«EXPAND disposeElementInfo-»
	
	«EXPAND doValidateState-»
	
	«EXPAND isReadOnly-»
	
	«EXPAND isModifiable-»
	
	«EXPAND updateCache-»
	
	«EXPAND doUpdateStateCache-»
	
	«EXPAND isSynchronized-»
	
	«EXPAND getResetRule-»
	
	«EXPAND getSaveRule-»
	
	«EXPAND getSynchronizeRule-»
	
	«EXPAND getValidateStateRule-»
	
	«EXPAND computeSchedulingRule-»
	
	«EXPAND doSynchronize-»
	
	«EXPAND markWholeResourceSetAsDirty-»
	
	«EXPAND doSaveDocument-»
	
	«EXPAND handleElementChanged-»

	«EXPAND handleElementMoved-»

	«EXPAND createInputWithEditingDomain-»

	«EXPAND getDiagramDocument-»
	
	«EXPAND getOperationRunner-»
	
	«EXPAND xpt::editor::ResourceSetInfo::ResourceSetInfo-»
	
	«EXPAND xpt::editor::ResourceSetModificationListener::ResourceSetModificationListener-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE createElementInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected ElementInfo createElementInfo(Object element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND checkEditorInputInstance-»
	«EXPAND createElementInfoBody-»
}
«ENDDEFINE»

«DEFINE checkEditorInputInstance FOR gmfgen::GenDiagram-»
if (false == element instanceof «EXPAND editorInputClassFQName») {
	throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput", null)); //$NON-NLS-1$ //$NON-NLS-2$
}
«ENDDEFINE»

«DEFINE editorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.ui.part.FileEditorInput«ENDDEFINE»

«DEFINE createElementInfoBody FOR gmfgen::GenDiagram-»
org.eclipse.ui.IEditorInput editorInput = (org.eclipse.ui.IEditorInput) element;
org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);

ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
info.setModificationStamp(computeModificationStamp(info));
info.fStatus = null;
ResourceSetModificationListener modificationListener = new ResourceSetModificationListener(info);
info.getResourceSet().eAdapters().add(modificationListener);
return info;
«ENDDEFINE»

«DEFINE createDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createDocument(Object element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND checkEditorInputInstance-»
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = createEmptyDocument();
	setDocumentContent(document, («EXPAND editorInputClassFQName») element);
	setupDocument(element, document);
	return document;
}
«ENDDEFINE»

«DEFINE setupDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Sets up the given document as it would be provided for the given element. The\n" +
		"content of the document is not changed. This default implementation is empty.\n" +
		"Subclasses may reimplement.\n" +
		"\n" +
		"@param element the blue-print element\n" +
		"@param document the document to set up"
	)»
protected void setupDocument(Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document) {
	// for subclasses
}
«ENDDEFINE»

«DEFINE computeModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private long computeModificationStamp(ResourceSetInfo info) {
	int result = 0;
	for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
		org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
	«IF null == editorGen.application-»
		org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
		if (file != null) {
			if (file.getLocation() != null) {
				result += file.getLocation().toFile().lastModified();
			} else {
				result += file.getModificationStamp();
			}
		}
	«ELSE-»
		java.io.File file = getFile(nextResource.getURI());
		if (file != null && file.exists()) {
			result += file.lastModified();
		}
	«ENDIF-»
	}
	return result;
}
«ENDDEFINE»

«DEFINE createEmptyDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createEmptyDocument() {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument document = new org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument();
	document.setEditingDomain(createEditingDomain());
	return document;
}
«ENDDEFINE»

«DEFINE createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("«editingDomainID»"); //$NON-NLS-1$
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	
	return editingDomain;
}
«ENDDEFINE»

«DEFINE setDocumentContent FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.ui.IEditorInput element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND checkEditorInputInstance-»
	org.eclipse.core.resources.IStorage storage = ((«EXPAND editorInputClassFQName») element).getStorage();
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
//	org.eclipse.gmf.runtime.notation.Diagram diagram = diagramDocument.getDiagram();

//	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
//	diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
//	if (myContentObjectURI != null && diagram != null && diagram.eResource() != null && !diagram.eResource().getURIFragment(diagram).equals(myContentObjectURI)) {
//		org.eclipse.emf.ecore.EObject anotherContentObject = diagram.eResource().getEObject(myContentObjectURI);
//		document.setContent(anotherContentObject);
//	} else {
//		document.setContent(diagram);
//	}

	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
	org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
	document.setContent(diagram);
}
«ENDDEFINE»

«DEFINE getModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public long getModificationStamp(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return computeModificationStamp(info);
	}
	return super.getModificationStamp(element);
}
«ENDDEFINE»

«DEFINE getSynchronizationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public long getSynchronizationStamp(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return info.getModificationStamp();
	}
	return super.getSynchronizationStamp(element);
}
«ENDDEFINE»

«DEFINE isDeleted FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isDeleted(Object element) {
	if (element instanceof org.eclipse.ui.IFileEditorInput) {
		org.eclipse.ui.IFileEditorInput input = (org.eclipse.ui.IFileEditorInput) element;
		org.eclipse.core.runtime.IPath path = input.getFile().getLocation();
		if (path == null) {
			return true;
		}
		return !path.toFile().exists();
	}
	return super.isDeleted(element);
}
«ENDDEFINE»

«DEFINE getResourceSetInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public ResourceSetInfo getResourceSetInfo(Object editorInput) {
	return (ResourceSetInfo) super.getElementInfo(editorInput);
}
«ENDDEFINE»

«DEFINE disposeElementInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void disposeElementInfo(Object element, ElementInfo info) {
	if (info instanceof ResourceSetInfo) {
		ResourceSetInfo resourceSetInfo = (ResourceSetInfo) info;
		resourceSetInfo.dispose();
	}
	super.disposeElementInfo(element, info);
}
«ENDDEFINE»

«DEFINE doValidateState FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doValidateState(Object element, Object computationContext) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection files2Validate = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null && file.isReadOnly()) {
				files2Validate.add(file);
			}
		}
		org.eclipse.core.resources.ResourcesPlugin.getWorkspace().validateEdit((org.eclipse.core.resources.IFile[]) files2Validate.toArray(new org.eclipse.core.resources.IFile[files2Validate.size()]), computationContext);
	}

	super.doValidateState(element, computationContext);
}
«ENDDEFINE»

«DEFINE isReadOnly FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isReadOnly(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		«EXPAND callUpdateCache-»
		return info.isReadOnly();
	}
	return super.isReadOnly(element);
}
«ENDDEFINE»

«DEFINE isModifiable FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isModifiable(Object element) {
	if (!isStateValidated(element)) {
		if (element instanceof org.eclipse.ui.part.FileEditorInput) {
			return true;
		}
	}
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		«EXPAND callUpdateCache-»
		return info.isModifiable();
	}
	return super.isModifiable(element);
}
«ENDDEFINE»

«DEFINE callUpdateCache FOR gmfgen::GenDiagram-»
if (info.isUpdateCache()) {
	try {
		updateCache((org.eclipse.ui.IStorageEditorInput) element);
	} catch (org.eclipse.core.runtime.CoreException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable, ex);
	}
}
«ENDDEFINE»

«DEFINE updateCache FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void updateCache(org.eclipse.ui.IStorageEditorInput input) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(input);
	if (info != null) {
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null && file.isReadOnly()) {
				info.setReadOnly(true);
				info.setModifiable(false);
				return;
			}
		}
		info.setReadOnly(false);
		info.setModifiable(true);
		return;
	}
}
«ENDDEFINE»

«DEFINE doUpdateStateCache FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doUpdateStateCache(Object element) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		info.setUpdateCache(true);
	}
	super.doUpdateStateCache(element);
}
«ENDDEFINE»

«DEFINE isSynchronized FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isSynchronized(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return info.isSynchronized();
	}
	return super.isSynchronized(element);
}
«ENDDEFINE»

«DEFINE getResetRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getResetRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSaveRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getSaveRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(computeSchedulingRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSynchronizeRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getSynchronizeRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().refreshRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getValidateStateRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getValidateStateRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection files = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				files.add(file);
			}
		}
		return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().validateEditRule((org.eclipse.core.resources.IFile[]) files.toArray(new org.eclipse.core.resources.IFile[files.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE computeSchedulingRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.core.runtime.jobs.ISchedulingRule computeSchedulingRule(org.eclipse.core.resources.IResource toCreateOrModify) {
	if (toCreateOrModify.exists())
		return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(toCreateOrModify);

	org.eclipse.core.resources.IResource parent = toCreateOrModify;
	do {
		/*
		 * XXX This is a workaround for
		 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
		 * IResourceRuleFactory.createRule should iterate the hierarchy
		 * itself.
		 */
		toCreateOrModify = parent;
		parent = toCreateOrModify.getParent();
	} while (parent != null && !parent.exists());

	return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().createRule(toCreateOrModify);
}
«ENDDEFINE»

«DEFINE doSynchronize FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doSynchronize(Object element, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null && element instanceof org.eclipse.ui.part.FileEditorInput) {
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			handleElementChanged(info, nextResource, monitor);	
		}
		return;
	}
	super.doSynchronize(element, monitor);
}
«ENDDEFINE»

«DEFINE markWholeResourceSetAsDirty FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void markWholeResourceSetAsDirty(org.eclipse.emf.ecore.resource.ResourceSet resourceSet) {
	for (java.util.Iterator it = resourceSet.getResources().iterator(); it.hasNext();) {
		org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
		nextResource.setModified(true);
	}
}
«ENDDEFINE»

«DEFINE handleElementChanged FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleElementChanged(ResourceSetInfo info, org.eclipse.emf.ecore.resource.Resource changedResource, org.eclipse.core.runtime.IProgressMonitor monitor) {
	«IF null == editorGen.application-»
	org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(changedResource);
	if (file != null) {
		try {
			file.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, monitor);
		} catch (org.eclipse.core.runtime.CoreException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged, ex);
		}
	}
	«ENDIF-»
	changedResource.unload();
	
	fireElementContentAboutToBeReplaced(info.getEditorInput());
	removeUnchangedElementListeners(info.getEditorInput(), info);
	info.fStatus = null;
	try {
		setDocumentContent(info.fDocument, info.getEditorInput());
	} catch (org.eclipse.core.runtime.CoreException e) {
		info.fStatus = e.getStatus();
	}
	if (!info.fCanBeSaved) {
		info.setModificationStamp(computeModificationStamp(info));
	}
	addUnchangedElementListeners(info.getEditorInput(), info);
	fireElementContentReplaced(info.getEditorInput());
}
«ENDDEFINE»

«DEFINE doSaveDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doSaveDocument(org.eclipse.core.runtime.IProgressMonitor monitor, Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, boolean overwrite) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (!overwrite && !info.isSynchronized()) {
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.runtime.IStatus.OK, "The file has been changed on the file system", null)); //$NON-NLS-1$
		}
	«IF null == editorGen.application-»
		info.stopResourceListening();
	«ENDIF-»
		fireElementStateChanging(element);
		java.util.List resources = info.getResourceSet().getResources();
		try {
			monitor.beginTask("Saving diagram", resources.size() + 1);
			java.util.Map options = new java.util.HashMap();
			options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
			for (java.util.Iterator it = resources.iterator(); it.hasNext();) {
				org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
				monitor.setTaskName("Saving " + nextResource.getURI());
				if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
					try {
						nextResource.save(options);
					} catch (java.io.IOException e) {
						fireElementStateChangeFailed(element);
						throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
					}
				}
				monitor.worked(1);
			}
			monitor.done();
		} catch (RuntimeException x) {
			fireElementStateChangeFailed(element);
			throw x;
		} «IF null == editorGen.application» finally {
			info.startResourceListening();
		} «ENDIF»
	}
}
«ENDDEFINE»

«DEFINE handleElementMoved FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleElementMoved(org.eclipse.ui.IEditorInput input, org.eclipse.emf.common.util.URI uri) {
	org.eclipse.core.resources.IFile newFile = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getFile(new org.eclipse.core.runtime.Path(org.eclipse.emf.common.util.URI.decode(uri.path())).removeFirstSegments(1));
	fireElementMoved(input, newFile == null ? null : new org.eclipse.ui.part.FileEditorInput(newFile));
}
«ENDDEFINE»

«DEFINE createInputWithEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.ui.IEditorInput createInputWithEditingDomain(org.eclipse.ui.IEditorInput editorInput, org.eclipse.emf.transaction.TransactionalEditingDomain domain) {
	return editorInput;
}
«ENDDEFINE»

«DEFINE getDiagramDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument getDiagramDocument(Object element) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument doc = getDocument(element);
	if (doc instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
		return (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) doc;
	}
	return null;
}
«ENDDEFINE»

«DEFINE getOperationRunner FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.jface.operation.IRunnableContext getOperationRunner(org.eclipse.core.runtime.IProgressMonitor monitor) {
	return null;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»
«ENDDEFINE»