/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::Utils»

«DEFINE copyright FOR gmfgen::GenEditorGenerator-»
«IF copyrightText != null-»
/*
 * «copyrightText.replaceAll("\n", "\n *")»
 */
«ENDIF-»
«ENDDEFINE»

«DEFINE xcopyright FOR gmfgen::GenEditorGenerator-»
«IF copyrightText != null-»
<!--
«copyrightText»
-->
«ENDIF-»
«ENDDEFINE»

«DEFINE generatedClassComment FOR Object-»
	«EXPAND generatedClassComment("")-»
«ENDDEFINE»
 
«DEFINE generatedClassComment(String comment) FOR Object-»
/**
«IF comment.length() > 0-»
 * «comment.replaceAll("\n", "\n * ")»
«ENDIF-»
 * @generated
 */«ENDDEFINE»

«DEFINE generatedMemberComment FOR Object-»
	«EXPAND generatedMemberComment("")-»
«ENDDEFINE»
 
«DEFINE generatedMemberComment(String comment) FOR Object-»
/**
«IF comment.length() > 0-»
 * «comment.replaceAll("\n", "\n * ")»
«ENDIF-»
 * @generated
 */«ENDDEFINE»

«DEFINE xmlGeneratedTag FOR Object»<?gmfgen generated="true"?>«ENDDEFINE»

«DEFINE getFeatureValue(String containerVar, boolean typedContainer) FOR genmodel::GenFeature-»
	«IF isExternalInterface(genClass)-»
((«getFeatureTargetType()») «IF typedContainer»((org.eclipse.emf.ecore.EObject) «ENDIF»«containerVar»«IF typedContainer»)«ENDIF».eGet(«EXPAND metaFeatureAccessor»))«-»
	«ELSE-»
«IF !typedContainer»((«getQualifiedInterfaceName(genClass)»)«ENDIF»«containerVar»«IF !typedContainer»)«ENDIF».«getGetAccessor()»()«-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE metaClassAccessor FOR genmodel::GenClass»«getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName(this)»()«ENDDEFINE»

«DEFINE metaFeatureAccessor FOR genmodel::GenFeature»«getQualifiedPackageInterfaceName(genClass.genPackage)».eINSTANCE.get«getFeatureAccessorName(this)»()«ENDDEFINE»

// SomeFactory.eINSTANCE.createBlaBla();
«DEFINE newInstance FOR genmodel::GenClass-»
«genPackage.getQualifiedFactoryInterfaceName()».«genPackage.getFactoryInstanceName()».create«ecoreClass.name»()«ENDDEFINE»

«DEFINE newInstance(String varName) FOR genmodel::GenClass-»
«getQualifiedInterfaceName()» «varName» = «EXPAND newInstance»;«ENDDEFINE»