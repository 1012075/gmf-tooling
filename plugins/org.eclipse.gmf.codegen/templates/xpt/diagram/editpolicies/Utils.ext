/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
 
import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";

String getContainerVariable(gmfgen::TypeLinkModelFacet modelFacet) :
	null != modelFacet.sourceMetaFeature
		? "container"
		: "source"
;

boolean hasJavaConstraints(gmfgen::GenDiagram diagram) :
	!getAllExpressionProviders(getValidLinkConstraints(diagram), getExpressionProvider(diagram)).typeSelect(gmfgen::GenJavaExpressionProvider).isEmpty()
;

boolean hasOCLConstraints(gmfgen::GenDiagram diagram) :
	!getAllExpressionProviders(getValidLinkConstraints(diagram), getExpressionProvider(diagram)).typeSelect(gmfgen::GenExpressionInterpreter).isEmpty()
;

private gmfgen::GenExpressionProviderContainer getExpressionProvider(gmfgen::GenDiagram diagram) :
	diagram.editorGen.expressionProviders
;

private List[gmfgen::GenExpressionProviderBase] getAllExpressionProviders(List[gmfgen::GenLinkConstraints] constraints, gmfgen::GenExpressionProviderContainer providersContainer) :
	constraints.collect(c | c.sourceEnd).addAll(constraints.collect(c | c.targetEnd)).select(c | null != c).typeSelect(gmfgen::GenConstraint).collect(c | providersContainer.getProvider(c))
;

String getTargetExpressionVarName(gmfgen::GenLink link) :
	link.getUniqueIdentifier() + "_TargetExpression"
;

String getSourceExpressionVarName(gmfgen::GenLink link) :
	link.getUniqueIdentifier() + "_SourceExpression"
;

List[gmfgen::GenLinkConstraints] getValidLinkConstraints(gmfgen::GenDiagram diagram) :
	diagram.links.select(l | null != l.creationConstraints && l.creationConstraints.isValid()).collect(l | l.creationConstraints)
;

List[gmfgen::GenLink] getAllPotentialLinks(gmfgen::GenNode node) :
	selectValidLinks(node.getDiagram().links).select(l | isSelf(l, node) || isOutgoing(l, node) || isIncoming(l, node))
;

List[gmfgen::GenLink] getReroutableLinks(gmfgen::GenNode node) :
	node.getDiagram().links.select(link | isTypeLink(link) && (canBeSource(link, node) || canBeTarget(link, node)))
;

List[gmfgen::GenLink] getReroutableRefLinks(gmfgen::GenNode node) :
	node.getDiagram().links.select(link | isRefLink(link) && (canBeSource(link, node) || canBeTarget(link, node)))
;

private boolean isTypeLink(gmfgen::GenLink link) :
	{link.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0
;

private boolean isRefLink(gmfgen::GenLink link) :
	{link.modelFacet}.typeSelect(gmfgen::FeatureLinkModelFacet).size() > 0
;

private List[gmfgen::GenLink] selectValidLinks(List[gmfgen::GenLink] allLinks) :
	allLinks.select(l | null != l.modelFacet)
		.select(l | l.outgoingCreationAllowed || l.incomingCreationAllowed)
;

boolean createStartLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	createStartOutgoingLinkCommand(link, node) || createStartIncomingLinkCommand(link, node)
;

boolean createStartOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isSelf(link, node) || (isOutgoing(link, node) && link.outgoingCreationAllowed)
;

boolean createStartIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isIncoming(link, node) && link.incomingCreationAllowed
;

boolean createCompleteLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	createCompleteIncomingLinkCommand(link, node) || createCompleteOutgoingLinkCommand(link, node)
;

boolean createCompleteIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isSelf(link, node) || (isIncoming(link, node) && link.outgoingCreationAllowed)
;

boolean createCompleteOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isOutgoing(link, node) && link.incomingCreationAllowed
;

private boolean isSelf(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeSource(link, node) && canBeTarget(link, node)
;

private boolean isOutgoing(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeSource(link, node) && !isSelf(link, node)
;

private boolean isIncoming(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeTarget(link, node) && !isSelf(link, node)
;

private boolean canBeSource(gmfgen::GenLink link, gmfgen::GenNode node) :
	null != link.modelFacet.getSourceType() && link.modelFacet.getSourceType().ecoreClass.isSuperTypeOf(getMetaclass(node))
;

private boolean canBeTarget(gmfgen::GenLink link, gmfgen::GenNode node) :
	null != link.modelFacet.getTargetType() && link.modelFacet.getTargetType().ecoreClass.isSuperTypeOf(getMetaclass(node))
;

private ecore::EClass getMetaclass(gmfgen::GenNode node) :
	node.modelFacet.metaClass.ecoreClass
;

String i18nKeyForLinkConstraintErrorLog() :
"EvaluateOCLLinkConstraintError"
;

String i18nKeyForOpenCommandName() :
"CommandName.OpenDiagram"
;
