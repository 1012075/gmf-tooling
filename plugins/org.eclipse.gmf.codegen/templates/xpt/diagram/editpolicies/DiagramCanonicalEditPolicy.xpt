/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE DiagramCanonicalEditPolicy FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «editPoliciesPackageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «canonicalEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy {

	«EXPAND xpt::diagram::updater::containerBaseCanonicalMethods::containerBaseCanonicalMethods-»

	«EXPAND getSemanticConnectionsList-»
	
	«EXPAND getSourceElement-»

	«EXPAND getTargetElement-»

	«EXPAND shouldIncludeConnection-»
	
	«EXPAND refreshSemantic-»
	
	«EXPAND getDiagram-»
	
	«EXPAND refreshLinks-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE getSemanticConnectionsList FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getSemanticConnectionsList() {
	return java.util.Collections.EMPTY_LIST;
}
«ENDDEFINE»
	
«DEFINE getSourceElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getSourceElement(org.eclipse.emf.ecore.EObject relationship) {
	return null;
}
«ENDDEFINE»

«DEFINE getTargetElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getTargetElement(org.eclipse.emf.ecore.EObject relationship) {
	return null;
}
«ENDDEFINE»

«DEFINE shouldIncludeConnection FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean shouldIncludeConnection(org.eclipse.gmf.runtime.notation.Edge connector, java.util.Collection children) {
	return false;
}
«ENDDEFINE»

«DEFINE refreshSemantic FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void refreshSemantic() {
	java.util.List createdViews = new java.util.LinkedList();
	createdViews.addAll(refreshSemanticChildren());
	java.util.List createdConnectionViews = new java.util.LinkedList();
	createdConnectionViews.addAll(refreshSemanticConnections());
	«IF !links.isEmpty()-»
	createdConnectionViews.addAll(refreshConnections());
	«ENDIF-»

	if (createdViews.size() > 1) {
		// perform a layout of the container
		org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
		executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
	}

	createdViews.addAll(createdConnectionViews);
	makeViewsImmutable(createdViews);
}
«ENDDEFINE»

«DEFINE refreshLinks FOR gmfgen::GenDiagram-»
	«IF !links.isEmpty()-»
		«EXPAND refreshConnections-»
		
		«EXPAND collectAllLinks-»
		
		«EXPAND getContainedLinksMethod FOREACH getAllSemanticLinks(this)-»
		
		«EXPAND createConnections-»
		
		«EXPAND getEditPart-»
		
		«EXPAND xpt::diagram::editpolicies::LinkDescriptor::LinkDescriptor-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE refreshConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection refreshConnections() {
	java.util.Map domain2NotationMap = new java.util.HashMap();
	java.util.Collection linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
	java.util.Collection existingLinks = new java.util.LinkedList(getDiagram().getEdges());
	for (java.util.Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge nextDiagramLink = (org.eclipse.gmf.runtime.notation.Edge) linksIterator.next();
		org.eclipse.emf.ecore.EObject diagramLinkObject = nextDiagramLink.getElement();
		org.eclipse.emf.ecore.EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
		org.eclipse.emf.ecore.EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
		int diagramLinkVisualID = «getVisualIDRegistryQualifiedClassName()».getVisualID(nextDiagramLink);
		for (java.util.Iterator LinkDescriptorsIterator = linkDescriptors.iterator(); LinkDescriptorsIterator.hasNext();) {
			LinkDescriptor nextLinkDescriptor = (LinkDescriptor) LinkDescriptorsIterator.next();
			if (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
				linksIterator.remove();
				LinkDescriptorsIterator.remove();
			}
		}
	}
	deleteViews(existingLinks.iterator());
	return createConnections(linkDescriptors, domain2NotationMap);
}
«ENDDEFINE»

«DEFINE collectAllLinks FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection collectAllLinks(org.eclipse.gmf.runtime.notation.View view, java.util.Map domain2NotationMap) {
	java.util.Collection result = new java.util.LinkedList();
	switch («getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
		«EXPAND caseModelElementHolder FOREACH getAllNodes().select(node | null != node.modelFacet)-»
		«EXPAND caseModelElementHolder FOREACH links-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	return result;
}
«ENDDEFINE»

«DEFINE caseModelElementHolder FOR gmfgen::GenNode-»
«EXPAND xpt::Common::caseVisualID» {
	«EXPAND storeDomainElement-»
	«EXPAND colectContainedLinks(getDiagram()) FOR modelFacet-»
	break;	
}
«ENDDEFINE»

«DEFINE caseModelElementHolder FOR gmfgen::GenLink-»
	«EXPAND caseModelElementHolder(this) FOR modelFacet-»
«ENDDEFINE»

«DEFINE caseModelElementHolder(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet»«ENDDEFINE»

«DEFINE caseModelElementHolder(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
«EXPAND xpt::Common::caseVisualID FOR link» {
	«EXPAND storeDomainElement FOR link-»
	«EXPAND colectContainedLinks(link.getDiagram())-»
	break;
}
«ENDDEFINE»

«DEFINE storeDomainElement FOR gmfgen::GenCommonBase-»
domain2NotationMap.put(view.getElement(), view);
«ENDDEFINE»

«DEFINE colectContainedLinks(gmfgen::GenDiagram diagram) FOR gmfgen::TypeModelFacet-»
	«IF !getContainedLinks(this, diagram).isEmpty()-»
«metaClass.getQualifiedInterfaceName()» modelElement = («metaClass.getQualifiedInterfaceName()») view.getElement();
«EXPAND colectContainedLink FOREACH getContainedLinks(this, diagram)-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE colectContainedLink FOR gmfgen::GenLink-»
result.addAll(«EXPAND getContainedLinksMethodName»(modelElement));
«ENDDEFINE»

«DEFINE getContainedLinksMethodName FOR gmfgen::GenLink»getContained«EXPAND getContainedLinksMethodFragment FOR modelFacet»_«visualID»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::TypeLinkModelFacet»TypeModelFacetLinks_«metaClass.ecoreClass.name»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::FeatureLinkModelFacet»FeatureModelFacetLinks_«getFeatureAccessorName(metaFeature)»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE getContainedLinksMethod FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection «EXPAND getContainedLinksMethodName»(«getQualifiedInterfaceName(getContainerClass(modelFacet))» container) {
	java.util.Collection result = new java.util.LinkedList();
	«EXPAND getContainedLinksMethodBody(this) FOR modelFacet-»
	return result;	
}
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::TypeLinkModelFacet-»
	«IF childMetaFeature.isListType()-»
for (java.util.Iterator links = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR childMetaFeature».iterator(); links.hasNext();) {
	«getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))» link = («getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))») links.next();
	«ELSE-»
«getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))» link = («getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))») «EXPAND xpt::Common::getFeatureValue("container", getSourceType()) FOR childMetaFeature»;
	«ENDIF-»
int linkVID = «genLink.getDiagram().getVisualIDRegistryQualifiedClassName()».getLinkWithClassVisualID(«EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link);
if (linkVID == «genLink.getEditPartQualifiedClassName()».VISUAL_ID) {
	«IF targetMetaFeature.isListType()-»
	java.util.List targets = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR targetMetaFeature»;
	Object target = targets.size() == 1 ? targets.get(0) : null;
	if (target instanceof «getQualifiedInterfaceName(getTargetType())») {
		«getQualifiedInterfaceName(getTargetType())» dst = («getQualifiedInterfaceName(getTargetType())») target;
	«ELSE-»
	«getQualifiedInterfaceName(getTargetType())» dst = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR targetMetaFeature»;
	«ENDIF-»
	«IF null != sourceMetaFeature-»
		«IF sourceMetaFeature.isListType()-»
	java.util.List sources = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR sourceMetaFeature»;
	Object source = sources.size() == 1 ? sources.get(0) : null;
	if (source instanceof «getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))») {
		«getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))» src = («getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))») structuralFeatureResult;
		«ELSE-»
	«getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))» src = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR sourceMetaFeature»;
		«ENDIF-»
	result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(sourceMetaFeature)»src, «EXPAND xpt::Common::castToEObject FOR getTargetType()»dst, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», linkVID));
		«IF sourceMetaFeature.isListType()-»
	}
		«ENDIF-»
	«ELSE-»
	result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getContainerClass(this)»container, «EXPAND xpt::Common::castToEObject FOR getTargetType()»dst, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», linkVID));
	«ENDIF-»
	«IF targetMetaFeature.isListType()-»
	}
	«ENDIF-»
}
	«IF childMetaFeature.isListType()-»
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::FeatureLinkModelFacet-»
	«IF metaFeature.isListType()-»
for (java.util.Iterator destinations = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR metaFeature».iterator(); destinations.hasNext();) {
	«getQualifiedInterfaceName(getTypeGenClassX(metaFeature))» destination = («getQualifiedInterfaceName(getTypeGenClassX(metaFeature))») destinations.next();
	«ELSE-»
«getQualifiedInterfaceName(getTypeGenClassX(metaFeature))» destination = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR metaFeature»;
	«ENDIF-»
result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getContainerClass(this)»container, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(metaFeature)»destination, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», «genLink.getEditPartQualifiedClassName()».VISUAL_ID));
	«IF metaFeature.isListType()-»
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE createConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection createConnections(java.util.Collection linkDescriptors, java.util.Map domain2NotationMap) {
	java.util.List adapters = new java.util.LinkedList();
	for (java.util.Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
		final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();
		org.eclipse.gef.EditPart sourceEditPart = getEditPart(nextLinkDescriptor.getSource(), domain2NotationMap);
		org.eclipse.gef.EditPart targetEditPart = getEditPart(nextLinkDescriptor.getDestination(), domain2NotationMap);
		if (sourceEditPart == null || targetEditPart == null) {
			continue;
		}
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(descriptor);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sourceEditPart);
		sourceEditPart.getCommand(ccr);
		ccr.setTargetEditPart(targetEditPart);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = targetEditPart.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable viewAdapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			if (viewAdapter != null) {
				adapters.add(viewAdapter);
			}
		}
	}
	return adapters;
}
«ENDDEFINE»

«DEFINE getEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getEditPart(org.eclipse.emf.ecore.EObject domainModelElement, java.util.Map domain2NotationMap) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.get(domainModelElement);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getDiagram FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Diagram getDiagram() {
	return ((org.eclipse.gmf.runtime.notation.View) getHost().getModel()).getDiagram();
}
«ENDDEFINE»

«DEFINE incorrectLinkModelFacet FOR gmfgen::LinkModelFacet-»
	«ERROR "Incorrect LinkModelFacet: " + this»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»