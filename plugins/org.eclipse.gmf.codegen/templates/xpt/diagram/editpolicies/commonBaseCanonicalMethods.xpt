/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE commonBaseCanonicalMethods(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«IF null == getModelElementType()-»
		«REM»
			Supported "this" parameter types:
			- GenDiagram
			- GenNode
			- GenCompartment
		«ENDREM»
		«ERROR "Unrecognized GenCommonBase: " + this»
	«ENDIF-»
	«EXPAND getSemanticChildrenList(nodes)-»
	
	«EXPAND shouldDeleteView(nodes)-»
	
	«EXPAND getDefaultFactoryHint-»
«ENDDEFINE»

«DEFINE getSemanticChildrenList(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getSemanticChildrenList() {
	«IF getChildFeatures(nodes).size() > 0-»
	java.util.List result = new java.util.LinkedList();
	org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	«EXPAND getModelelementType» modelObject = («EXPAND getModelelementType») viewObject.getElement();
	«EXPAND collectAllFeatureFalues(getModelElementType()) FOR getChildFeatures(nodes)-»
	for (java.util.Iterator valuesIterator = allValues.iterator(); valuesIterator.hasNext();) {
		org.eclipse.emf.ecore.EObject nextValue = (org.eclipse.emf.ecore.EObject) valuesIterator.next();
		switch(«getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(viewObject, nextValue)) {
		«EXPAND xpt::Common::caseVisualID FOREACH selectSemanticChildren(nodes)»
			result.add(nextValue);
		}
	}
	return result;
	«ELSE-»
	return java.util.Collections.EMPTY_LIST;
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE getModelelementType FOR gmfgen::GenCommonBase»«getQualifiedInterfaceName(getModelElementType())»«ENDDEFINE»

«DEFINE collectAllFeatureFalues(genmodel::GenClass containerGenClass) FOR Set[genmodel::GenFeature]-»
java.util.List allValues = new java.util.LinkedList();
	«FOREACH this AS childFeature-»
		«IF null == childFeature-»
allValues.add(/*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/);
		«ELSEIF isListType(childFeature)-»
allValues.addAll(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass) FOR childFeature»);
		«ELSE-»
allValues.add(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass) FOR childFeature»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE shouldDeleteView(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean shouldDeleteView(org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND checkShortcutProperty-»
	«IF !selectNotationChildren(nodes).isEmpty()-»
	switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
	«EXPAND xpt::Common::caseVisualID FOREACH selectNotationChildren(nodes)»	
		return true;
	}
	«ENDIF-»
	return false;
}
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenDiagram-»
if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
	return view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());
}
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE getDefaultFactoryHint FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected String getDefaultFactoryHint() {
	return null;
}
«ENDDEFINE»