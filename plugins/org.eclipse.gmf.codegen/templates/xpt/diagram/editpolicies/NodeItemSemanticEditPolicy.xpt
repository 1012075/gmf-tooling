/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
 
«REM»
	This template should be called only for non-design nodes (modelFacet != null) 
	because *ItemSemanticEditPolicy responsible for dealing with semantic model 
	elements and meaningless (should not be generated) for pure design nodes.   
«ENDREM»
 
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»

«DEFINE NodeItemSemanticEditPolicy FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «itemSemanticEditPolicyClassName» extends «getDiagram().getBaseItemSemanticEditPolicyQualifiedClassName()» {
	«IF childNodes.size() > 0-»
	
		«EXPAND xpt::diagram::editpolicies::childContainerCreateCommand::childContainerCreateCommand FOR childNodes-»
	«ENDIF-»

	«EXPAND getDestroyElementCommand-»
	«EXPAND xpt::diagram::editpolicies::linkCommands::linkCommands(getDiagram()) FOR modelFacet-»
	
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE getDestroyElementCommand FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
	org.eclipse.gef.commands.CompoundCommand cc = getDestroyEdgesCommands(req.isConfirmationRequired());
	«EXPAND destroySemanticElement-»
	return cc.unwrap();
}
«ENDDEFINE»

«DEFINE destroySemanticElement FOR gmfgen::GenNode-»
	«LET !{}.add(this).typeSelect(gmfgen::GenTopLevelNode).isEmpty() AS isTopLevel-»
cc.add(getMSLWrapper(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(req) «IF isTopLevel || modelFacet.isPhantomElement()»{
		«IF isTopLevel-»
			«EXPAND destroyShortcut-»
		«ENDIF-»
		«IF modelFacet.isPhantomElement()-»
			«EXPAND destroyPhantomElement-»
		«ENDIF-»
			
}«ENDIF»));
	«ENDLET-»
«ENDDEFINE»

«REM»Method in anonimous inner class - should not be prefixed with @generated javadoc«ENDREM»
«DEFINE destroyShortcut FOR gmfgen::GenTopLevelNode-»

protected org.eclipse.emf.ecore.EObject getElementToDestroy() {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	org.eclipse.emf.ecore.EAnnotation annotation = view.getEAnnotation("Shortcut"); «EXPAND xpt::Common::nonNLS»
	if (annotation != null) {
		return view;
	}
	return super.getElementToDestroy();
}		
«ENDDEFINE»

«REM»Chortcuts supported only for top-level elements«ENDREM»
«DEFINE destroyShortcut FOR gmfgen::GenNode»«ENDDEFINE»

«REM»Method in anonimous inner class - should not be prefixed with @generated javadoc«ENDREM»
«DEFINE destroyPhantomElement FOR gmfgen::GenNode-»

protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor progressMonitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
	org.eclipse.emf.ecore.EObject eObject = getElementToDestroy();
	boolean removeFromResource = eObject.eContainer() == null;
	org.eclipse.gmf.runtime.common.core.command.CommandResult result = super.doExecuteWithResult(progressMonitor, info);
	org.eclipse.emf.ecore.resource.Resource resource = eObject.eResource();
	if (removeFromResource && resource != null) {
		resource.getContents().remove(eObject);
	}
	return result;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenNode»«ENDDEFINE»
