/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE BaseItemSemanticEditPolicy FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «baseItemSemanticEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy {

	«EXPAND xpt::Common::generatedMemberComment("Extended request data key to hold editpart visual id.\n")»
	public static final String VISUAL_ID_KEY = "visual_id"; «EXPAND xpt::Common::nonNLS»

	«EXPAND xpt::Common::generatedMemberComment(
		"Extended request data key to hold editpart visual id.\n" +
		"Add visual id of edited editpart to extended data of the request\n" +
		"so command switch can decide what kind of diagram element is being edited.\n" +
		"It is done in those cases when it\'s not possible to deduce diagram\n" +
		"element kind from domain element.\n"
	)»
	public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
		if (request instanceof org.eclipse.gef.requests.ReconnectRequest) {
			Object view = ((org.eclipse.gef.requests.ReconnectRequest) request).getConnectionEditPart().getModel();
			if (view instanceof org.eclipse.gmf.runtime.notation.View) {
				Integer id = new Integer(«EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»((org.eclipse.gmf.runtime.notation.View) view));
				request.getExtendedData().put(VISUAL_ID_KEY, id);
			}
		}
		return super.getCommand(request);
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Returns visual id from request parameters.\n")»
	protected int getVisualID(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest request) {
		Object id = request.getParameter(VISUAL_ID_KEY);
		return id instanceof Integer ? ((Integer) id).intValue() : -1;
	}

	«EXPAND semanticPart-»

	«EXPAND xpt::Common::generatedMemberComment("Returns editing domain from the host edit part.\n")»
	protected org.eclipse.emf.transaction.TransactionalEditingDomain getEditingDomain() {
		return ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain();
	}

	«EXPAND xpt::Common::generatedMemberComment("Creates command to destroy the link.\n")»
	protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.notation.View view) {
		org.eclipse.gef.EditPart editPart = (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
		org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest request =
				new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(getEditingDomain(), false);
		return editPart.getCommand(
				new org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper(request, java.util.Collections.EMPTY_MAP));
	}

	«EXPAND xpt::Common::generatedMemberComment("Creates commands to destroy all host incoming and outgoing links.\n")»
	protected org.eclipse.gef.commands.CompoundCommand getDestroyEdgesCommand() {
		org.eclipse.gef.commands.CompoundCommand cmd = new org.eclipse.gef.commands.CompoundCommand();
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
		for (java.util.Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
			cmd.add(getDestroyElementCommand((org.eclipse.gmf.runtime.notation.Edge) it.next()));
		}
		for (java.util.Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
			cmd.add(getDestroyElementCommand((org.eclipse.gmf.runtime.notation.Edge) it.next()));
		}
		return cmd;
	}
	
	«EXPAND addDestroyShortcutsCommand-»

	«EXPAND linkConstraints-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE addDestroyShortcutsCommand FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void addDestroyShortcutsCommand(org.eclipse.gef.commands.CompoundCommand command) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	if (view.getEAnnotation("Shortcut") != null) { «EXPAND xpt::Common::nonNLS»
		return;
	}
	for (java.util.Iterator it = view.getDiagram().getChildren().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View) it.next();
		if (nextView.getEAnnotation("Shortcut") == null || !nextView.isSetElement() || nextView.getElement() != view.getElement()) { «EXPAND xpt::Common::nonNLS»
			continue;
		}
		command.add(getDestroyElementCommand(nextView));
	}
}
«ENDDEFINE»

«DEFINE semanticPart FOR gmfgen::GenDiagram-»
	«EXPAND getSemanticCommand-»
	
	«EXPAND getSemanticCommandSwitch-»
	
	«EXPAND getConfigureCommand-»

	«EXPAND getCreateRelationshipCommand-»

	«EXPAND getCreateCommand-»

	«EXPAND getSetCommand-»

	«EXPAND getEditContextCommand-»

	«EXPAND getDestroyElementCommand-»

	«EXPAND getDestroyReferenceCommand-»

	«EXPAND getDuplicateCommand-»

	«EXPAND getMoveCommand-»

	«EXPAND getReorientReferenceRelationshipCommand-»

	«EXPAND getReorientRelationshipCommand-»
	
	«EXPAND getGEFWrapper-»
	«EXPAND getMSLWrapper-»

	«EXPAND getSemanticElement-»
«ENDDEFINE»

«DEFINE getSemanticCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSemanticCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest request) {
	org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest completedRequest = completeRequest(request);
	Object editHelperContext = completedRequest.getEditHelperContext();
	if (editHelperContext instanceof org.eclipse.gmf.runtime.notation.View || (editHelperContext instanceof org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext && ((org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext) editHelperContext).getEObject() instanceof org.eclipse.gmf.runtime.notation.View)) {
		// no semantic commands are provided for pure design elements
		return null;
	}
	if (editHelperContext == null) {
		editHelperContext = org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.resolveSemanticElement((org.eclipse.gmf.runtime.notation.View) getHost().getModel());
	}
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getElementType(editHelperContext);
	if (elementType == org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { «EXPAND xpt::Common::nonNLS» 
	«REM»< % = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()) % >.getInstance().logInfo("Failed to get element type for " + editHelperContext); / / $NON-NLS-1$«ENDREM»«-»
		elementType = null;
	}
	org.eclipse.gef.commands.Command semanticCommand = getSemanticCommandSwitch(completedRequest);
	if (semanticCommand != null) {
		org.eclipse.gmf.runtime.common.core.command.ICommand command = semanticCommand instanceof org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy ? ((org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy) semanticCommand).getICommand() : new org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy(semanticCommand);
		completedRequest.setParameter(«getBaseEditHelperQualifiedClassName()».EDIT_POLICY_COMMAND, command);
	}
	if (elementType != null) {
		org.eclipse.gmf.runtime.common.core.command.ICommand command = elementType.getEditCommand(completedRequest);
		if (command != null) {
			if (!(command instanceof org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand)) {
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain();
				command = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(editingDomain, null).compose(command);
			}
			semanticCommand = new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(command);
		}
	}
	boolean shouldProceed = true;
	if (completedRequest instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
		shouldProceed = shouldProceed((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) completedRequest);
	}
	if (shouldProceed) {
		if (completedRequest instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
			org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain();
			org.eclipse.gef.commands.Command deleteViewCommand = new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(editingDomain, (org.eclipse.gmf.runtime.notation.View) getHost().getModel()));
			semanticCommand = semanticCommand == null ? deleteViewCommand : semanticCommand.chain(deleteViewCommand);
		}
		return semanticCommand;
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSemanticCommandSwitch FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSemanticCommandSwitch(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest req) {
	if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest) {
		return getCreateRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) {
		return getCreateCommand((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest) {
		return getConfigureCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest) {
		return getDestroyElementCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest) {
		return getDestroyReferenceCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest) {
		return getDuplicateCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest) {
		return getEditContextCommand((org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest) {
		return getMoveCommand((org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest) {
		return getReorientReferenceRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest) {
		return getReorientRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest) {
		return getSetCommand((org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest) req);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getConfigureCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getConfigureCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getCreateRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getCreateRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getCreateCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getSetCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSetCommand(org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getEditContextCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getEditContextCommand(org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDestroyElementCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDestroyReferenceCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDestroyReferenceCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDuplicateCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDuplicateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getMoveCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getMoveCommand(org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getReorientReferenceRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReorientReferenceRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest req) {
	return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
}
«ENDDEFINE»

«DEFINE getReorientRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReorientRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest req) {
	return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
}
«ENDDEFINE»

«DEFINE getGEFWrapper FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected final org.eclipse.gef.commands.Command getGEFWrapper(org.eclipse.gmf.runtime.common.core.command.ICommand cmd) {
		return new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(cmd);
	}
«ENDDEFINE»

«DEFINE getMSLWrapper FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("@deprecated use getGEFWrapper() instead")»
	protected final org.eclipse.gef.commands.Command getMSLWrapper(org.eclipse.gmf.runtime.common.core.command.ICommand cmd) {
		// XXX deprecated: use getGEFWrapper() instead
		return getGEFWrapper(cmd);
	}
«ENDDEFINE»

«DEFINE getSemanticElement FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getSemanticElement() {
	return org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.resolveSemanticElement((org.eclipse.gmf.runtime.notation.View) getHost().getModel());
}
«ENDDEFINE»

«DEFINE linkConstraints FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
public static class «getLinkCreationConstraintsClassName()» {
	«IF null != editorGen.expressionProviders-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static final String OPPOSITE_END_VAR = "oppositeEnd"; «EXPAND xpt::Common::nonNLS»
		«EXPAND xpt::expressions::getExpression::defineInterptererExpressionConstants FOREACH getValidLinkConstraints(this)-»
	«ENDIF-»
	«EXPAND canCreate FOREACH links-»
	«EXPAND canExist FOREACH links-»
	«IF null != editorGen.expressionProviders-»
		«IF hasInterpreterConstraints(this)-»
			«EXPAND evaluateInterpreterExpression FOR editorGen.expressionProviders-»
		«ENDIF-»
		«IF hasJavaConstraints(this)-»
			«EXPAND JavaConstraints-»
		«ENDIF-»	
	«ENDIF-»
	
}
«ENDDEFINE»

«DEFINE canCreate FOR gmfgen::GenLink»

«EXPAND xpt::Common::generatedMemberComment»
public static boolean canCreate«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
	«EXPAND checkEMFConstraints FOR modelFacet-»
	return canExist«getUniqueIdentifier()»(«EXPAND canCreateValues FOR modelFacet»);
}
«ENDDEFINE»

«DEFINE canExist FOR gmfgen::GenLink»

«EXPAND xpt::Common::generatedMemberComment»
public static boolean canExist«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
	«IF creationConstraints != null && creationConstraints.isValid() && null != getDiagram().editorGen.expressionProviders-»
		«IF null != creationConstraints.sourceEnd-»
			«EXPAND checkAdditionalConstraint(creationConstraints, true) FOR getDiagram().editorGen.expressionProviders.getProvider(creationConstraints.sourceEnd)-»
		«ENDIF-»
		«IF null != creationConstraints.targetEnd-»
			«EXPAND checkAdditionalConstraint(creationConstraints, false) FOR getDiagram().editorGen.expressionProviders.getProvider(creationConstraints.targetEnd)-»
		«ENDIF-»
	«ENDIF-»
	return true;
}
«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::TypeLinkModelFacet»«IF null != sourceMetaFeature»«containmentMetaFeature.genClass.getQualifiedInterfaceName()» container, «ENDIF»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::FeatureLinkModelFacet»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE sourceTargetParameters FOR gmfgen::LinkModelFacet»«getSourceType().getQualifiedInterfaceName()» source, «getTargetType().getQualifiedInterfaceName()» target«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE canCreateValues FOR gmfgen::TypeLinkModelFacet»«IF null != sourceMetaFeature»container, «ENDIF»«EXPAND sourceTargetValues»«ENDDEFINE»

«DEFINE canCreateValues FOR gmfgen::FeatureLinkModelFacet»«EXPAND sourceTargetValues»«ENDDEFINE»

«DEFINE sourceTargetValues FOR gmfgen::LinkModelFacet»source, target«ENDDEFINE»

«DEFINE canCreateValues FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::TypeLinkModelFacet-»
	«LET childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0 AS checkChildFeatureUpperBound-»
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0 || checkChildFeatureUpperBound-»
if («getContainerVariable()» != null) {
			«EXPAND checkEMFConstraints(this) FOR containmentMetaFeature-»
			«IF checkChildFeatureUpperBound-»
				«EXPAND checkEMFConstraints(this) FOR childMetaFeature-»
			«ENDIF-»
}
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE checkEMFConstraints(gmfgen::TypeLinkModelFacet modelFacet) FOR genmodel::GenFeature-»
	«IF ecoreFeature.upperBound > 0-»
if («EXPAND featureBoundComparator(getContainerVariable(modelFacet), modelFacet.getSourceType())») {
	return false;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE featureBoundComparator(String featureVar, genmodel::GenClass featureVarGenClass) FOR genmodel::GenFeature»«EXPAND xpt::Common::getFeatureValue(featureVar, featureVarGenClass)»«IF ecoreFeature.upperBound == 1» != null«ELSE».size() >= «ecoreFeature.upperBound»«ENDIF»«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::FeatureLinkModelFacet-»
	«LET "source" AS sourceVar-»
if («sourceVar» != null) {
	if (
		«REM»Checking uper bounds if was specified in MM«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound > 0»«EXPAND featureBoundComparator(sourceVar, getSourceType()) FOR metaFeature»«ENDIF-»
		«REM»Checking uniqueness in addition if uper bounds > 1«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound > 1» || «ENDIF-»
		«REM»Checking uniqueness in if uper bounds > 1 or < 0«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound != 1»«EXPAND featureUniquenessComparator(sourceVar, getSourceType()) FOR metaFeature»«ENDIF») {
		return false;
	}
		«IF metaFeature.isContains()»
	if (source == target) {
		return false;
	}
		«ENDIF-»	
}
	«ENDLET-»
«ENDDEFINE»

«DEFINE featureUniquenessComparator(String featureVar, genmodel::GenClass featureVarGenClass) FOR genmodel::GenFeature»«EXPAND xpt::Common::getFeatureValue(featureVar, featureVarGenClass) FOR this».contains(target)«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenExpressionInterpreter-»
if (!evaluate(«EXPAND xpt::expressions::getExpression::interptererExpressionConstantName(checkSource) FOR constraints», «IF checkSource»source, target«ELSE»target, source«ENDIF», «!checkSource»)) {
	return false;
}
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenJavaExpressionProvider-»
if (!JavaConstraints.«getOperationName(checkSource ? constraints.sourceEnd : constraints.targetEnd)»(«IF checkSource»source, target«ELSE»target, source«ENDIF»).booleanValue()) {
	return false;
}
«ENDDEFINE»

«REM»Can be moved to xpt::expressions::getExpression.xpt«ENDREM»
«DEFINE evaluateInterpreterExpression FOR gmfgen::GenExpressionProviderContainer-»

«EXPAND xpt::Common::generatedMemberComment»
private static boolean evaluate(«getAbstractExpressionQualifiedClassName()» constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
	if (sourceEnd == null) {
		return true;
	}
	java.util.Map evalEnv = java.util.Collections.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
	try {
		Object val = constraint.evaluate(sourceEnd, evalEnv);
		return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
	} catch(Exception e) {	
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Link constraint evaluation error", e); «EXPAND xpt::Common::nonNLS»
		return false;
	}
}
«ENDDEFINE»

«REM»Can be moved to xpt::expressions::getExpression.xpt«ENDREM»
«DEFINE JavaConstraints FOR gmfgen::GenDiagram-»

«EXPAND xpt::Common::generatedClassComment»
private static class JavaConstraints {
	«EXPAND javaExpressionOperations FOREACH getValidLinkConstraints()-»
}
«ENDDEFINE»

«DEFINE javaExpressionOperations FOR gmfgen::GenLinkConstraints-»
	«LET link.getDiagram().editorGen.expressionProviders AS expressionProviders-»
		«IF null != sourceEnd-»
		
			«EXPAND defineJAVAConstraint(sourceEnd, getSourceEndContextClass(), getTargetEndContextClass()) FOR expressionProviders.getProvider(sourceEnd)-»
		«ENDIF-»
		«IF null != targetEnd-»
		
			«EXPAND defineJAVAConstraint(targetEnd, getTargetEndContextClass(), getSourceEndContextClass()) FOR expressionProviders.getProvider(targetEnd)-»
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenJavaExpressionProvider»
	«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(constraint, context, oppositeEndContext)-»
«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter»«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionProviderBase»
	«EXPAND incorrectExpressionProviderBase-»
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenExpressionProviderBase-»
	«EXPAND incorrectExpressionProviderBase-»
«ENDDEFINE»

«DEFINE incorrectExpressionProviderBase FOR gmfgen::GenExpressionProviderBase-»
	«ERROR "Unrecognized expression provider: " + this-»
«ENDDEFINE»

«DEFINE incorrectLinkModelFacet FOR gmfgen::LinkModelFacet-»
	«ERROR "Unrecognized link model facet: " + this-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»