/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";
extension xpt::diagram::editpolicies::LinkUtils;

String getContainedLinksMethodNameSuffix() :
	"Contained"
;

String getIncomingLinksMethodNameSuffix() :
	"Incoming"
;

String getOutgoingLinksMethodNameSuffix() :
	"Outgoing"
;

cached List[gmfgen::GenLink] getContainedLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeContainer(link, typeModelFacet))
;

cached List[gmfgen::GenLink] getOutgoingLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeSource(link, typeModelFacet))
;

cached List[gmfgen::GenLink] getIncomingLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeTarget(link, typeModelFacet))
;

List[gmfgen::GenLink] getAllContainedLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeContainer(link, getTypeModelFacet(commonBase))).isEmpty())
;

List[gmfgen::GenLink] getAllIncomingLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeTarget(link, getTypeModelFacet(commonBase))).isEmpty())
;

List[gmfgen::GenLink] getAllOutgoingLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeSource(link, getTypeModelFacet(commonBase))).isEmpty())
;

cached List[gmfgen::GenCommonBase] getAllSemanticElements(gmfgen::GenDiagram diagram) :
	diagram.getAllNodes().toList().addAll(diagram.links).typeSelect(gmfgen::GenCommonBase).select(commonBase | null != getTypeModelFacet(commonBase))
;

gmfgen::TypeModelFacet getTypeModelFacet(gmfgen::GenCommonBase commonBase) :
	null
;

gmfgen::TypeModelFacet getTypeModelFacet(gmfgen::GenNode node) :
	node.modelFacet
;

gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::GenLink link) :
	null != link.modelFacet ? getTypeModelFacet(link.modelFacet) : null
;

private gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::LinkModelFacet modelFacet) :
	null
;

private gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::TypeLinkModelFacet modelFacet) :
	modelFacet
;

boolean hasSemanticChildren(gmfgen::GenContainerBase container) :
	!container.sansDomain && !container.containedNodes.isEmpty()
;

genmodel::GenClass getModelElementType(gmfgen::GenContainerBase containerBase) :
// Never should be here!
	null
;

genmodel::GenClass getModelElementType(gmfgen::GenDiagram diagram) :
	diagram.domainDiagramElement
;

genmodel::GenClass getModelElementType(gmfgen::GenCompartment compartment) :
	getModelElementType(compartment.node)
;

genmodel::GenClass getModelElementType(gmfgen::GenNode node) :
	node.modelFacet.metaClass
;

cached Set[genmodel::GenFeature] getSemanticChildrenChildFeatures(gmfgen::GenContainerBase containerBase) :
	getNonPhantomSemanticChildren(containerBase).collect(node | node.modelFacet.childMetaFeature).toSet()
;

cached List[gmfgen::GenNode] getSemanticChildren(gmfgen::GenContainerBase containerBase, genmodel::GenFeature childMetaFeature) :
	getNonPhantomSemanticChildren(containerBase).select(node | node.modelFacet.childMetaFeature == childMetaFeature)
;

private cached List[gmfgen::GenNode] getNonPhantomSemanticChildren(gmfgen::GenContainerBase containerBase) :
	getSemanticChildren(containerBase).select(node | !node.modelFacet.isPhantomElement())
;

cached List[gmfgen::GenNode] getPhantomNodes(gmfgen::GenContainerBase containerBase) :
	{}
;

cached List[gmfgen::GenNode] getPhantomNodes(gmfgen::GenDiagram diagram) :
	getSemanticChildren(diagram).select(node | node.modelFacet.isPhantomElement())
;

cached List[gmfgen::GenNode] getSemanticChildren(gmfgen::GenContainerBase containerBase) :
	containerBase.containedNodes.select(node | null != node.modelFacet)
;