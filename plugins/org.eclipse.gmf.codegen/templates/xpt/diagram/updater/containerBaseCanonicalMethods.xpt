/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE containerBaseCanonicalMethods FOR gmfgen::GenContainerBase-»
	«EXPAND attributes-»
	
	«EXPAND getSemanticChildrenList-»
	«EXPAND shouldDeleteView-»
	
	«EXPAND isOrphaned-»
	
	«EXPAND getDefaultFactoryHint-»
	«EXPAND getFeaturesToSynchronize-»
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenContainerBase-»
«IF getSemanticChildrenContainmentFeatures(this).size() > 0-»

	«EXPAND xpt::Common::generatedMemberComment»
java.util.Set myFeaturesToSynchronize;
«ENDIF-»
«ENDDEFINE»

«DEFINE getSemanticChildrenList FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getSemanticChildrenList() {
	«IF hasSemanticChildren(this)-»
	org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	java.util.List result = new java.util.LinkedList();
	for (java.util.Iterator it = «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»(viewObject).iterator(); it.hasNext();) {
		result.add(((«getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()») it.next()).getModelElement());
	}
	return result;
	«ELSE-»
	return java.util.Collections.EMPTY_LIST;
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE shouldDeleteView FOR gmfgen::GenContainerBase»«ENDDEFINE»

«DEFINE shouldDeleteView FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
protected boolean shouldDeleteView(org.eclipse.gmf.runtime.notation.View view) {
	return true;
}
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenDiagram-»
	«IF !containsShortcutsTo.isEmpty()-»
if (view.getEAnnotation("Shortcut") != null) {«EXPAND xpt::Common::nonNLS»
	return «editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()».isShortcutOrphaned(view);
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenContainerBase»«ENDDEFINE»

«DEFINE getDefaultFactoryHint FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected String getDefaultFactoryHint() {
	return null;
}
«ENDDEFINE»

«DEFINE isOrphaned FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean isOrphaned(java.util.Collection semanticChildren, final org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND checkShortcutProperty-»
	«IF !getSemanticChildren(this).isEmpty()-»
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(view);
	switch (visualID) {
		«EXPAND xpt::Common::caseVisualID FOREACH getSemanticChildren(this)»
		return !semanticChildren.contains(view.getElement()) || visualID != «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR getDiagram()»((org.eclipse.gmf.runtime.notation.View) getHost().getModel(), view.getElement());
	}
	«ENDIF-»
	return false;	
}
«ENDDEFINE»

«DEFINE getFeaturesToSynchronize FOR gmfgen::GenContainerBase-»
«IF getSemanticChildrenChildFeatures(this).size() > 0-»

		«EXPAND xpt::Common::generatedMemberComment»
protected java.util.Set getFeaturesToSynchronize(){
	if (myFeaturesToSynchronize == null) {
		myFeaturesToSynchronize = new java.util.HashSet();
		«EXPAND addContainmentFeature FOREACH getSemanticChildrenContainmentFeatures(this)-»
	}
	return myFeaturesToSynchronize;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE addContainmentFeature FOR genmodel::GenFeature-»
myFeaturesToSynchronize.add(«EXPAND MetaModel::MetaFeature»);
«ENDDEFINE»