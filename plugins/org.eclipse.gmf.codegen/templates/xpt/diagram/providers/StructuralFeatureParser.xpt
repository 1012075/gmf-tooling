/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE StructuralFeatureParser FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «structuralFeatureParserClassName» extends «getAbstractParserQualifiedClassName()» {

	«EXPAND xpt::Common::generatedMemberComment»
	public static final java.text.MessageFormat DEFAULT_PROCESSOR = new java.text.MessageFormat("{0}"); //$NON-NLS-1$

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EStructuralFeature feature;

	«EXPAND xpt::Common::generatedMemberComment»
	public «structuralFeatureParserClassName»(org.eclipse.emf.ecore.EStructuralFeature feature) {
		this.feature = feature;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat getViewProcessor() {
		java.text.MessageFormat processor = super.getViewProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.text.MessageFormat getEditProcessor() {
		java.text.MessageFormat processor = super.getEditProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject getDomainElement(org.eclipse.emf.ecore.EObject element) {
		return element;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getStringByPattern(
			org.eclipse.core.runtime.IAdaptable adapter, int flags, String pattern, java.text.MessageFormat processor) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		element = getDomainElement(element);
		return getStringByPattern(element, feature, processor);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getStringByPattern(org.eclipse.emf.ecore.EObject element,
			org.eclipse.emf.ecore.EStructuralFeature feature, java.text.MessageFormat processor) {
		Object value = element == null ? null : element.eGet(feature);
		value = getValidValue(feature, value);
		return processor.format(new Object[] { value }, new StringBuffer(), new java.text.FieldPosition(0)).toString();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus validateNewValues(Object[] values) {
		if (values.length > 1) {
			return org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.UNEDITABLE_STATUS;
		}
		Object value = values.length == 1 ? values[0] : null;
		value = getValidNewValue(feature, value);
		if (value instanceof InvalidValue) {
			return new org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus(
					«editorGen.plugin.getActivatorQualifiedClassName()».ID,
					org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus.UNEDITABLE, value.toString());
		}
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.EDITABLE_STATUS;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.core.command.ICommand getParseCommand(
			org.eclipse.core.runtime.IAdaptable adapter, Object[] values) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		element = getDomainElement(element);
		if (element == null) {
			return org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain =
				org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(element);
		if (editingDomain == null) {
			return org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand.INSTANCE;
		}
		Object value = values.length == 1 ? values[0] : null;
		org.eclipse.gmf.runtime.common.core.command.ICommand command = getModificationCommand(element, feature, value);
		return new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(
				editingDomain, command.getLabel(), java.util.Collections.singletonList(command));
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean isAffectingEvent(Object event, int flags) {
		if (event instanceof org.eclipse.emf.common.notify.Notification) {
			return isAffectingFeature(((org.eclipse.emf.common.notify.Notification) event).getFeature());
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean isAffectingFeature(Object eventFeature) {
		return feature == eventFeature;
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»«ENDDEFINE»
