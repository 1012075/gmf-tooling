/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ElementTypes FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

/**
 * @generated
 */
public class «elementTypesClassName» extends ElementInitializers {

	/**
	 * @generated
	 */
	private «elementTypesClassName»() {}

	/**
	 * @generated
	 */
	private static java.util.Map elements;

	/**
	 * @generated
	 */
	private static org.eclipse.jface.resource.ImageRegistry imageRegistry;

	/**
	 * @generated
	 */
	private static org.eclipse.jface.resource.ImageRegistry getImageRegistry() {
		if (imageRegistry == null) {
			imageRegistry = new org.eclipse.jface.resource.ImageRegistry();
		}
		return imageRegistry;
	}

	/**
	 * @generated
	 */
	private static String getImageRegistryKey(org.eclipse.emf.ecore.ENamedElement element) {
		return element.getName();
	}

	/**
	 * @generated
	 */
	private static org.eclipse.jface.resource.ImageDescriptor getProvidedImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
		if (element instanceof org.eclipse.emf.ecore.EStructuralFeature) {
			element = ((org.eclipse.emf.ecore.EStructuralFeature) element).getEContainingClass();
		}
		if (element instanceof org.eclipse.emf.ecore.EClass) {
			org.eclipse.emf.ecore.EClass eClass = (org.eclipse.emf.ecore.EClass) element;
			if (!eClass.isAbstract()) {
				return «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImageDescriptor(
					eClass.getEPackage().getEFactoryInstance().create(eClass));
			}
		}
		// TODO : support structural features
		return null;
	}

	/**
	 * @generated
	 */
	public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
		String key = getImageRegistryKey(element);
		org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
		if (imageDescriptor == null) {
			imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
		}
		return imageDescriptor;
	}

	/**
	 * @generated
	 */
	public static org.eclipse.swt.graphics.Image getImage(org.eclipse.emf.ecore.ENamedElement element) {
		String key = getImageRegistryKey(element);
		org.eclipse.swt.graphics.Image image = getImageRegistry().get(key);
		if (image == null) {
			org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
			image = getImageRegistry().get(key);
		}
		return image;
	}

	/**
	 * @generated
	 */
	public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.core.runtime.IAdaptable hint) {
		org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImageDescriptor(element);
	}

	/**
	 * @generated
	 */
	public static org.eclipse.swt.graphics.Image getImage(org.eclipse.core.runtime.IAdaptable hint) {
		org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImage(element);
	}

	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @generated
	 */
	public static org.eclipse.emf.ecore.ENamedElement getElement(org.eclipse.core.runtime.IAdaptable hint) {
		Object type = hint.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
		if (elements == null) {
			elements = new java.util.IdentityHashMap();
			«EXPAND bindUniqueIdentifierToNamedElement(getUniqueIdentifier()) FOR domainDiagramElement-»
			«FOREACH getNodes() AS node-»
				«EXPAND bindUniqueIdentifierToNamedElement(node.getUniqueIdentifier()) FOR node.modelFacet-»
			«ENDFOREACH-»
			«FOREACH links AS link-»
				«EXPAND bindUniqueIdentifierToNamedElement(link.getUniqueIdentifier()) FOR link.modelFacet-»
			«ENDFOREACH-»
		}
		return (org.eclipse.emf.ecore.ENamedElement) elements.get(type);
	}

	«FOREACH getElements() AS e-»
		«IF null != elementType-»
	/**
	 * @generated
	 */
	public static final org.eclipse.gmf.runtime.emf.type.core.IElementType «e.getUniqueIdentifier()» =
			getElementType("«e.elementType.uniqueIdentifier»"); //$NON-NLS-1$
		«ENDIF-»
	«ENDFOREACH-»

	/**
	 * @generated
	 */
	private static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(String id) {
		return org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType(id);
	}

	/**
	 * @generated
	 */
	private static java.util.Set KNOWN_ELEMENT_TYPES;

	/**
	 * @generated
	 */
	public static boolean isKnownElementType(org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
		if (KNOWN_ELEMENT_TYPES == null) {
			KNOWN_ELEMENT_TYPES = new java.util.HashSet();
			«FOREACH getElements() AS e-»
				«IF null != elementType-»
			KNOWN_ELEMENT_TYPES.add(«e.getUniqueIdentifier()»);
				«ENDIF-»
			«ENDFOREACH-»
		}
		return KNOWN_ELEMENT_TYPES.contains(elementType);
	}
}
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR genmodel::GenClass»
	elements.put(«id», «getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName(this)»());
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::ModelFacet»
	«ERROR "Unsupported model facet: " + this-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::TypeModelFacet»
	«EXPAND bindUniqueIdentifierToNamedElement(id) FOR metaClass-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::FeatureLinkModelFacet»
	elements.put(«id», «getQualifiedPackageInterfaceName(metaFeature.genClass.genPackage)».eINSTANCE.get«getFeatureAccessorName(metaFeature)»());
«ENDDEFINE»
