«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE EditPartFactory FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «editPartsPackageName»;

/**
 * @generated
 */
public class «editPartFactoryClassName» implements org.eclipse.gef.EditPartFactory {

	/**
	 * @generated
	 */
	public org.eclipse.gef.EditPart createEditPart(org.eclipse.gef.EditPart context, Object model) {
		if (model instanceof org.eclipse.gmf.runtime.notation.View) {
			org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) model;
			switch («getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
				«EXPAND createEditPart FOR this-»
				«FOREACH (List[gmfgen::GenNode]) {}.addAll(topLevelNodes).addAll(childNodes) AS node-»
					«EXPAND createEditPart FOR node-»
				 	«FOREACH node.labels AS label-»
						«EXPAND createEditPart FOR label-»
				 	«ENDFOREACH-»
				«ENDFOREACH-»
				«FOREACH compartments AS compartment-»
					«EXPAND createEditPart FOR compartment-»
				«ENDFOREACH-»
				«FOREACH links AS link-»
					«EXPAND createEditPart FOR link-»
					«FOREACH link.labels AS label-»
						«EXPAND createEditPart FOR label-»
					«ENDFOREACH-»
				«ENDFOREACH-»
			}
		}
		return createUnrecognizedEditPart(context, model);
	}

	/**
	 * @generated
	 */
	 private org.eclipse.gef.EditPart createUnrecognizedEditPart(org.eclipse.gef.EditPart context, Object model) {
	 	// Handle creation of unrecognized child node EditParts here
	 	return null;
	 }

	/**
	 * @generated
	 */
	public static org.eclipse.gef.tools.CellEditorLocator getTextCellEditorLocator(
			org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart source) {
        if (source.getFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel)
            return new TextCellEditorLocator((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) source.getFigure());
        else {
            return new LabelCellEditorLocator((org.eclipse.draw2d.Label) source.getFigure());
        }
    }

	/**
	 * @generated
	 */
	static private class TextCellEditorLocator implements org.eclipse.gef.tools.CellEditorLocator {

		/**
		 * @generated
		 */
		private org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel wrapLabel;

		/**
		 * @generated
		 */
		public TextCellEditorLocator(org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel wrapLabel) {
			this.wrapLabel = wrapLabel;
		}

		/**
		 * @generated
		 */
		public org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel getWrapLabel() {
			return wrapLabel;
		}

		/**
		 * @generated
		 */
		public void relocate(org.eclipse.jface.viewers.CellEditor celleditor) {
			org.eclipse.swt.widgets.Text text = (org.eclipse.swt.widgets.Text) celleditor.getControl();
			org.eclipse.draw2d.geometry.Rectangle rect = getWrapLabel().getTextBounds().getCopy();
			getWrapLabel().translateToAbsolute(rect);
			if (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0) {
				rect.setSize(new org.eclipse.draw2d.geometry.Dimension(
					text.computeSize(rect.width, org.eclipse.swt.SWT.DEFAULT)));
			} else {
				int avr = org.eclipse.draw2d.FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
				rect.setSize(new org.eclipse.draw2d.geometry.Dimension(
					text.computeSize(org.eclipse.swt.SWT.DEFAULT, org.eclipse.swt.SWT.DEFAULT)).expand(avr * 2, 0));
			}
			if (!rect.equals(new org.eclipse.draw2d.geometry.Rectangle(text.getBounds()))) {
				text.setBounds(rect.x, rect.y, rect.width, rect.height);
			}
		}

	}

	/**
	 * @generated
	 */
	private static class LabelCellEditorLocator implements org.eclipse.gef.tools.CellEditorLocator {

		/**
		 * @generated
		 */
		private org.eclipse.draw2d.Label label;

		/**
		 * @generated
		 */
		public LabelCellEditorLocator(org.eclipse.draw2d.Label label) {
			this.label = label;
		}

		/**
		 * @generated
		 */
		public org.eclipse.draw2d.Label getLabel() {
			return label;
		}

		/**
		 * @generated
		 */
		public void relocate(org.eclipse.jface.viewers.CellEditor celleditor) {
			org.eclipse.swt.widgets.Text text = (org.eclipse.swt.widgets.Text) celleditor.getControl();
			org.eclipse.draw2d.geometry.Rectangle rect = getLabel().getTextBounds().getCopy();
			getLabel().translateToAbsolute(rect);
			int avr = org.eclipse.draw2d.FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
			rect.setSize(new org.eclipse.draw2d.geometry.Dimension(
				text.computeSize(org.eclipse.swt.SWT.DEFAULT, org.eclipse.swt.SWT.DEFAULT)).expand(avr * 2, 0));
			if (!rect.equals(new org.eclipse.draw2d.geometry.Rectangle(text.getBounds()))) {
				text.setBounds(rect.x, rect.y, rect.width, rect.height);
			}
		}
	}
}
«ENDDEFINE»

«DEFINE createEditPart FOR gmfgen::GenCommonBase»
	case «getEditPartQualifiedClassName()».VISUAL_ID:
		return new «getEditPartQualifiedClassName()»(view);
«ENDDEFINE»
