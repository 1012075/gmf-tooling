/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE ExternalNodeLabelEditPart FOR gmfgen::GenExternalNodeLabel-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPartsPackageName»;

/**
 * @generated
 */
public class «editPartClassName» extends org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart
	implements org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart,
		org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart {

	«EXPAND xpt::diagram::editparts::Common::visualIDConstant FOR this-»

	«EXPAND xpt::diagram::editparts::TextAware::fields FOR this-»

	/**
	 * @generated
	 */
	static {
		registerSnapBackPosition(
			«getDiagram().getVisualIDRegistryQualifiedClassName()».getType(«editPartClassName».VISUAL_ID),
			new org.eclipse.draw2d.geometry.Point(0, 0));
	}

	/**
	 * @generated
	 */
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(org.eclipse.gef.EditPolicy.DIRECT_EDIT_ROLE,
			new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy());
		«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
	}

	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.diagram.ui.figures.IBorderItemLocator getBorderItemLocator() {
		org.eclipse.draw2d.IFigure parentFigure = getFigure().getParent();
		if (parentFigure != null && parentFigure.getLayoutManager() != null) {
			Object constraint = parentFigure.getLayoutManager().getConstraint(getFigure());
			return (org.eclipse.gmf.runtime.diagram.ui.figures.IBorderItemLocator) constraint;
		}
		return null;
	}

	/**
	 * @generated
	 */
	public void refreshBounds() {
		int x = ((Integer) getStructuralFeatureValue(
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X())).intValue();
		int y = ((Integer) getStructuralFeatureValue(
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y())).intValue();
		int width = ((Integer) getStructuralFeatureValue(
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Width())).intValue();
		int height = ((Integer) getStructuralFeatureValue(
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Height())).intValue();
		getBorderItemLocator().setConstraint(new org.eclipse.draw2d.geometry.Rectangle(x, y, width, height));
	}

	«EXPAND xpt::diagram::editparts::TextAware::methods(false, readOnly, elementIcon, viewmap, modelFacet, node, getDiagram()) FOR this-»

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification event) {
		Object feature = event.getFeature();
		«EXPAND xpt::diagram::editparts::Common::handleText FOR this-»
		super.handleNotificationEvent(event);
	}

	«EXPAND xpt::diagram::editparts::Common::labelFigure FOR viewmap-»
}
«ENDDEFINE»
