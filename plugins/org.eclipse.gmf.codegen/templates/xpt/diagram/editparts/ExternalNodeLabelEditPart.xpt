«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE ExternalNodeLabelEditPart FOR gmfgen::GenExternalNodeLabel-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPartsPackageName»;

/**
 * @generated
 */
public class «editPartClassName» extends «getDiagram().getBaseExternalNodeLabelEditPartQualifiedClassName()»
	implements org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart {

	«EXPAND xpt::diagram::editparts::Common::visualIDConstant FOR this-»

	«EXPAND xpt::diagram::editparts::TextAware::fields FOR this-»

	/**
	 * @generated
	 */
	static {
		registerSnapBackPosition(
			«getDiagram().getVisualIDRegistryQualifiedClassName()».getType(«editPartClassName».VISUAL_ID),
			new org.eclipse.draw2d.geometry.Point(0, 0));
	}

	/**
	 * @generated
	 */
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(org.eclipse.gef.EditPolicy.DIRECT_EDIT_ROLE,
			new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy());
		«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
	}

	«EXPAND xpt::diagram::editparts::TextAware::methods(false, readOnly, elementIcon, viewmap, modelFacet, node, getDiagram()) FOR this-»

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification event) {
		Object feature = event.getFeature();
		«EXPAND handleText FOR this-»
		super.handleNotificationEvent(event);
	}

	«EXPAND labelFigure FOR viewmap-»
}
«ENDDEFINE»

«DEFINE handleText FOR gmfgen::GenLabel-»
	if (org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
		Integer c = (Integer) event.getNewValue();
		setFontColor(org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry.getInstance().getColor(c));
	} else if (org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
		refreshUnderline();
	} else if (org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
		refreshStrikeThrough();
	} else if (org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) ||
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) ||
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) ||
			org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
		refreshFont();
	} else {
		if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
			refreshLabel();
		}
		if (getParser() instanceof org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser) {
			org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser modelParser =
				(org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser) getParser();
			if (modelParser.areSemanticElementsAffected(null, event)) {
				removeSemanticListeners();
				if (resolveSemanticElement() != null) {
					addSemanticListeners();
				}
				refreshLabel();
			}
		}
	}
«ENDDEFINE»

«DEFINE labelFigure FOR gmfgen::ParentAssignedViewmap-»
	/**
	 * @generated
	 */
	protected org.eclipse.draw2d.IFigure createFigure() {
		// Parent should assign one using «IF setterName == null-»setLabel«ELSE-»«setterName»«ENDIF-»() method
		return null;
	}
«ENDDEFINE»

«DEFINE labelFigure FOR gmfgen::Viewmap-»
	/**
	 * @generated
	 */
	protected org.eclipse.draw2d.IFigure createFigure() {
		org.eclipse.draw2d.IFigure label = createFigurePrim();
		defaultText = getLabelTextHelper(label);
		return label;
	}

	/**
	 * @generated
	 */
	protected org.eclipse.draw2d.IFigure createFigurePrim() {
		«EXPAND labelFigurePrim FOR this-»
«ENDDEFINE»

«DEFINE labelFigurePrim FOR gmfgen::FigureViewmap-»
«IF figureQualifiedClassName == null-»
	return new org.eclipse.draw2d.Label();
«ELSE-»
	return new «figureQualifiedClassName»();
«ENDIF-»
	}
«ENDDEFINE»

«DEFINE labelFigurePrim FOR gmfgen::SnippetViewmap-»
	return «body»;
	}
«ENDDEFINE»

«DEFINE labelFigurePrim FOR gmfgen::InnerClassViewmap-»
	return new «className»();
	}

	«classBody»
«ENDDEFINE»

«DEFINE labelFigurePrim FOR gmfgen::Viewmap-»
	«ERROR "Unknown viewmap: " + this-»
	}
«ENDDEFINE»
