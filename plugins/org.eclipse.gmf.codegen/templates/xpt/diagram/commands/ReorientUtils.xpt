/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::Utils»
«EXTENSION xpt::diagram::Utils»

«REM»
	Expands to all accessor methods for link and it's ends.
«ENDREM»
«DEFINE accessors FOR gmfgen::GenLink-»
	«EXPAND linkAccessor FOR modelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::TypeLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(metaClass)» getLink() {
		return («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	}
«ENDDEFINE»

«REM»
	Generates canExecute() method for the command that reorients link.
	Implementation should perform all static checks that command can be executed.
«ENDREM»
«DEFINE canReorient(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		«EXPAND checkLinkValidity-»
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return canReorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return canReorientTarget();
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientSource() {
		«EXPAND checkSourceRequestValidity(link)-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientTarget() {
		«EXPAND checkTargetRequestValidity(link)-»
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::TypeLinkModelFacet-»
	if (!(getElementToEdit() instanceof «getQualifiedInterfaceName(metaClass)»)) {
		return false;
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::FeatureLinkModelFacet-»
	if (!(referenceOwner instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getSourceType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
	«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») newEnd;
	«EXPAND extractFeatureWithCheck("getLink()", "target", getQualifiedInterfaceName(getTargetType())) FOR targetMetaFeature-»
	«EXPAND checkLinkConstraint(link)-»
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
	return true;
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
		return false;
	}
	«IF sourceMetaFeature != null-»
		«EXPAND extractFeatureWithCheck("getLink()", "source", getQualifiedInterfaceName(getSourceType())) FOR sourceMetaFeature-»
	«ELSE-»
		if (!(getLink().eContainer() instanceof «getQualifiedInterfaceName(getSourceType())»)) {
			return false;
		}
		«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») getLink().eContainer();
	«ENDIF-»
	«getQualifiedInterfaceName(getTargetType())» target = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND checkLinkConstraint(link)-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
		return false;
	}
	return true;
«ENDDEFINE»

«DEFINE extractFeatureWithCheck(String containerVar, String featureVar, String featureTypeFQN) FOR genmodel::GenFeature-»
	«IF ecoreFeature.many-»
		if («EXPAND xpt::Common::getFeatureValue(containerVar, true)».size() != 1) {
			return false;
		}
		«featureTypeFQN» «featureVar» = («featureTypeFQN») «EXPAND xpt::Common::getFeatureValue(containerVar, true)».get(0);
	«ELSE-»
		«featureTypeFQN» «featureVar» = «EXPAND xpt::Common::getFeatureValue(containerVar, true)»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraint(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	«IF sourceMetaFeature != null-»
		if (!(getLink().eContainer() instanceof «containmentMetaFeature.genClass.getQualifiedInterfaceName()»)) {
			return false;
		}
		«containmentMetaFeature.genClass.getQualifiedInterfaceName()» container =
				(«containmentMetaFeature.genClass.getQualifiedInterfaceName()») getLink().eContainer();
		return «EXPAND checkLinkConstraintInvocation FOR link»(container, source, target);
	«ELSE-»
		return «EXPAND checkLinkConstraintInvocation FOR link»(source, target);
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraintInvocation FOR gmfgen::GenLink-»
	«diagram.getBaseItemSemanticEditPolicyQualifiedClassName()».«diagram.getLinkCreationConstraintsClassName()».canExist«getUniqueIdentifier()»
«ENDDEFINE»

«REM»
	Generates doExecuteWithResult() method for the command that reorients link.
	Implementation should throw ExecutionException if it can't execute the command.
«ENDREM»
«DEFINE reorient FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		if (!canExecute()) {
			throw new org.eclipse.core.commands.ExecutionException("Invalid arguments in reorient link command"); «EXPAND xpt::Common::nonNLS»
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return reorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return reorientTarget();
		}
		throw new IllegalStateException();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientSource()
			throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientSource-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientTarget()
			throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientTarget-»
	}
«ENDDEFINE»

«DEFINE reorientSource FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE reorientSource FOR gmfgen::TypeLinkModelFacet-»
	«getQualifiedInterfaceName(metaClass)» link = («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	«getQualifiedInterfaceName(getSourceType())» oldSource = («getQualifiedInterfaceName(getSourceType())») oldEnd;
	«getQualifiedInterfaceName(getSourceType())» newSource = («getQualifiedInterfaceName(getSourceType())») newEnd;
	«IF null != sourceMetaFeature-»
		«EXPAND changeTarget("link", "oldSource", "newSource") FOR sourceMetaFeature-»
		«REM»Shouldn't we change link container here?«ENDREM»
	«ELSE-»
		«EXPAND changeSource("oldSource", "newSource", "link") FOR containmentMetaFeature-»
	«ENDIF-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::TypeLinkModelFacet-»
	«getQualifiedInterfaceName(metaClass)» link = («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	«getQualifiedInterfaceName(getTargetType())» oldTarget = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«getQualifiedInterfaceName(getTargetType())» newTarget = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND changeTarget("link", "oldTarget", "newTarget") FOR targetMetaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE reorientSource FOR gmfgen::FeatureLinkModelFacet-»
	«getQualifiedInterfaceName(getSourceType())» oldSource = («getQualifiedInterfaceName(getSourceType())») referenceOwner;
	«getQualifiedInterfaceName(getSourceType())» newSource = («getQualifiedInterfaceName(getSourceType())») newEnd;
	«getQualifiedInterfaceName(getTargetType())» target = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«EXPAND changeSource("oldSource", "newSource", "target") FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::FeatureLinkModelFacet-»
	«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») referenceOwner;
	«getQualifiedInterfaceName(getTargetType())» oldTarget = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«getQualifiedInterfaceName(getTargetType())» newTarget = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND changeTarget("source", "oldTarget", "newTarget") FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ENDDEFINE»

«REM»
	Replace old target with the new one in the source.
«ENDREM»
«DEFINE changeTarget(String sourceVar, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature»
	«IF ecoreFeature.many-»
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».remove(«oldTargetVar»);
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».add(«newTargetVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(sourceVar, true, newTargetVar, true)»;
	«ENDIF-»
«ENDDEFINE»

«REM»
	Move target from old source to the new one.
«ENDREM»
«DEFINE changeSource(String oldSourceVar, String newSourceVar, String targetVar) FOR genmodel::GenFeature»
	«IF ecoreFeature.many-»
		«EXPAND xpt::Common::getFeatureValue(oldSourceVar, true)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, true)».add(«targetVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(oldSourceVar, true, "null", true)»;
		«EXPAND xpt::Common::setFeatureValue(newSourceVar, true, targetVar, true)»;
	«ENDIF-»
«ENDDEFINE»
