/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::Utils»

«DEFINE CreateNodeCommand FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «createCommandClassName» extends org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand {

	«EXPAND xpt::Common::generatedMemberComment»
	public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
		super(req);
	}
	«EXPAND body(this) FOR modelFacet-»
}
«ENDDEFINE»

«DEFINE body(gmfgen::GenNode node) FOR gmfgen::ModelFacet-»
«ENDDEFINE»

«DEFINE body(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF isPhantomElement() || containmentMetaFeature != null || childMetaFeature != null-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject getElementToEdit() {
		org.eclipse.emf.ecore.EObject container =
				((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer();
		if (container instanceof org.eclipse.gmf.runtime.notation.View) {
			container = ((org.eclipse.gmf.runtime.notation.View) container).getElement();
		}
		return container;
	}
		«IF isPhantomElement()-»
			«EXPAND phantomBody-»
		«ELSE-»
			«EXPAND normalBody(node)-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE phantomBody FOR gmfgen::TypeModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		if (getEClass() != null) {
			return getEClass().isSuperTypeOf(getEClassToEdit());
		}
		return true;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EReference getContainmentFeature() {
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
		// Uncomment to put "phantom" objects into the diagram file.		
		// org.eclipse.emf.ecore.resource.Resource resource = 
		// 		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer().eResource();
		// if (resource == null) {
		// 	return null;
		// }
		org.eclipse.emf.ecore.resource.Resource resource = getElementToEdit().eResource();
		org.eclipse.emf.ecore.EClass eClass = getElementType().getEClass();
		org.eclipse.emf.ecore.EObject eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);
		resource.getContents().add(eObject);
		return eObject;
	}
«ENDDEFINE»

«DEFINE normalBody(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EClass getEClassToEdit() {
		return «EXPAND xpt::Common::metaClassAccessor FOR containmentMetaFeature.genClass»;
	}
	«IF modelElementInitializer != null || hasExplicitChildFeature()-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
		«getQualifiedInterfaceName(metaClass)» newElement = («getQualifiedInterfaceName(metaClass)») super.doDefaultElementCreation();
		if (newElement != null) {
		«IF hasExplicitChildFeature()-»
			«getQualifiedInterfaceName(childMetaFeature.genClass)» container =
					(«getQualifiedInterfaceName(childMetaFeature.genClass)») getElementToEdit();
			if (container != null) {
			«IF isListType(childMetaFeature)-»
				java.util.Collection featureValues = container.«getGetAccessor(childMetaFeature)»();
				featureValues.add(newElement);
			«ELSE-»
				«EXPAND xpt::Common::setFeatureValue("container", childMetaFeature.genClass, "newElement") FOR childMetaFeature-»
			«ENDIF-»
			}
		«ENDIF-»
		«IF modelElementInitializer != null-»
			«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.«node.getUniqueIdentifier()».init(newElement);
		«ENDIF-»
		}
		return newElement;
	}
	«ENDIF-»
	«IF containmentMetaFeature.ecoreFeature.upperBound > 0 ||
			(childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0)-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		«getQualifiedInterfaceName(containmentMetaFeature.genClass)» container =
				(«getQualifiedInterfaceName(containmentMetaFeature.genClass)») getElementToEdit();
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0-»
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1-»
			if (container.«getGetAccessor(containmentMetaFeature)»() != null) {
			«ELSE-»
			if (container.«getGetAccessor(containmentMetaFeature)»().size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
				return false;
			}
		«ENDIF-»
		«IF childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0-»
			«IF childMetaFeature.ecoreFeature.upperBound == 1-»
			if (container.«getGetAccessor(childMetaFeature)»() != null) {
			«ELSE-»
			if (container.«getGetAccessor(childMetaFeature)»().size() >= «childMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
				return false;
			}
		«ENDIF-»
		return true;
	}
	«ENDIF-»
«ENDDEFINE»
