/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::GenModelUtils»

«DEFINE ReorientLinkCommand FOR gmfgen::GenLink-»
«EXPAND xpt::Common::copyright FOR diagram.editorGen-»
package «diagram.editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «reorientCommandClassName» extends org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand {

	«EXPAND xpt::Common::generatedMemberComment»
	private final int reorientDirection;

	«EXPAND xpt::Common::generatedMemberComment»
	private final org.eclipse.emf.ecore.EObject newEnd;

	«EXPAND xpt::Common::generatedMemberComment»
	public «reorientCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest request) {
		super(request.getLabel(), request.getRelationship(), request);
		reorientDirection = request.getDirection();
		newEnd = request.getNewRelationshipEnd();
	}
«LET (gmfgen::TypeLinkModelFacet)({modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).get(0)) AS typeModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		if (!(getElementToEdit() instanceof «getQualifiedInterfaceName(typeModelFacet.metaClass)»)) {
			return false;
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return newEnd instanceof «getQualifiedInterfaceName(typeModelFacet.getSourceType())»;
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return newEnd instanceof «getQualifiedInterfaceName(typeModelFacet.getTargetType())»;
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		if (false == getElementToEdit() instanceof «getQualifiedInterfaceName(typeModelFacet.metaClass)») {
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
				"Incorrect link element: " + getElementToEdit());
		}
			
		«getQualifiedInterfaceName(typeModelFacet.metaClass)» link = («getQualifiedInterfaceName(typeModelFacet.metaClass)») getElementToEdit();
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			if (false == newEnd instanceof «getQualifiedInterfaceName(typeModelFacet.getSourceType())») {
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
					"Incorrect new link source: " + newEnd);
			}
			«getQualifiedInterfaceName(typeModelFacet.getSourceType())» newSource = («getQualifiedInterfaceName(typeModelFacet.getSourceType())») newEnd;
		«IF null != typeModelFacet.sourceMetaFeature-»
			«EXPAND reorientEnd("link", "newSource") FOR typeModelFacet.sourceMetaFeature-»
«REM»Shouldn't we change link container here?«ENDREM»
		«ELSE-»
			if (false == getElementToEdit().eContainer() instanceof «getQualifiedInterfaceName(typeModelFacet.containmentMetaFeature.genClass)») {
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
					"Incorrect link source: " + getElementToEdit().eContainer());
			}
			«getQualifiedInterfaceName(typeModelFacet.containmentMetaFeature.genClass)» source = («getQualifiedInterfaceName(typeModelFacet.containmentMetaFeature.genClass)») getElementToEdit().eContainer();
			«EXPAND reorientReference("source", "link", "newSource") FOR typeModelFacet.containmentMetaFeature-»
		«ENDIF-»
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			if (false == newEnd instanceof «getQualifiedInterfaceName(typeModelFacet.getTargetType())») {
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
					"Incorrect new link target: " + newEnd);
			}
			«getQualifiedInterfaceName(typeModelFacet.getTargetType())» newTarget = («getQualifiedInterfaceName(typeModelFacet.getTargetType())») newEnd;
			«EXPAND reorientEnd("link", "newTarget") FOR typeModelFacet.targetMetaFeature-»
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
		}
		return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
				"Unknown link reorient direction: " + reorientDirection);
	}
}
«ENDLET-»
«ENDDEFINE»

«REM»
	Set link feature to hold the newEnd value. All old values are discarded.
	In this context means to reorient the link.
«ENDREM»
«DEFINE reorientEnd(String linkVar, String newEndVar) FOR genmodel::GenFeature»
	«IF ecoreFeature.many-»
		«EXPAND xpt::Common::getFeatureValue(linkVar, true)».clear();
		«EXPAND xpt::Common::getFeatureValue(linkVar, true)».add(«newEndVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(linkVar, true, newEndVar, true)»;
	«ENDIF-»
«ENDDEFINE»

«REM»
	Remove reference to targetVar element from sourceVar and add it to the newSourceVar
	sourceVar and newSourceVar should have the same feature pointing to targetVar.
	In this context means to reorient the link.
«ENDREM»
«DEFINE reorientReference(String sourceVar, String targetVar, String newSourceVar) FOR genmodel::GenFeature»
	«IF ecoreFeature.many-»
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, true)».add(«targetVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(sourceVar, true, "null", true)»;
		«EXPAND xpt::Common::setFeatureValue(newSourceVar, true, targetVar, true)»;
	«ENDIF-»
«ENDDEFINE»
