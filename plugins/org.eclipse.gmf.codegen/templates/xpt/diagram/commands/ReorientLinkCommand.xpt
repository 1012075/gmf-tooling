/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::GenModelUtils»

«DEFINE ReorientLinkCommand FOR gmfgen::GenLink-»
«EXPAND xpt::Common::copyright FOR diagram.editorGen-»
package «diagram.editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «reorientCommandClassName» extends org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand {

	«EXPAND xpt::Common::generatedMemberComment»
	private final int reorientDirection;

	«EXPAND xpt::Common::generatedMemberComment»
	private final org.eclipse.emf.ecore.EObject newEnd;

	«EXPAND xpt::Common::generatedMemberComment»
	public «reorientCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest request) {
		super(request.getLabel(), request.getRelationship(), request);
		reorientDirection = request.getDirection();
		newEnd = request.getNewRelationshipEnd();
	}
«LET (gmfgen::TypeLinkModelFacet)({modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).get(0)) AS typeModelFacet-»
«LET getQualifiedInterfaceName(typeModelFacet.metaClass) AS linkTypeFQN-»
«LET getQualifiedInterfaceName(typeModelFacet.getSourceType()) AS sourceTypeFQN-»
«LET getQualifiedInterfaceName(typeModelFacet.getTargetType()) AS targetTypeFQN-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		if (!(getElementToEdit() instanceof «linkTypeFQN»)) {
			return false;
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return newEnd instanceof «sourceTypeFQN»;
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return newEnd instanceof «targetTypeFQN»;
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		«linkTypeFQN» link = («linkTypeFQN») getElementToEdit();
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
		«IF null != typeModelFacet.sourceMetaFeature-»
			«LET getAccessorName(typeModelFacet.sourceMetaFeature) AS accessorName-»
			«IF typeModelFacet.targetMetaFeature.ecoreFeature.many-»
			link.get«accessorName»().clear();
			link.get«accessorName»().add((«sourceTypeFQN») newEnd);
			«ELSE-»
			link.set«accessorName»((«sourceTypeFQN») newEnd);
			«ENDIF-»
			«ENDLET-»
		«ELSE-»
			«LET getAccessorName(typeModelFacet.containmentMetaFeature) AS accessorName-»
			«sourceTypeFQN» oldEnd = («sourceTypeFQN») link.eContainer();
			«IF typeModelFacet.containmentMetaFeature.ecoreFeature.many-»
			oldEnd.get«accessorName»().remove(link);
			((«sourceTypeFQN») newEnd).get«accessorName»().add(link);
			«ELSE-»
			oldEnd.set«accessorName»(null);
			((«sourceTypeFQN») newEnd).set«accessorName»(link);
			«ENDIF-»
			«ENDLET-»
		«ENDIF-»
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
		«LET getAccessorName(typeModelFacet.targetMetaFeature) AS accessorName-»
			«IF typeModelFacet.targetMetaFeature.ecoreFeature.many-»
			link.get«accessorName»().clear();
			link.get«accessorName»().add((«targetTypeFQN») newEnd);
			«ELSE-»
			link.set«accessorName»((«targetTypeFQN») newEnd);
			«ENDIF-»
		«ENDLET-»
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
		}
		return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
				"Unknown direction: " + reorientDirection);
	}
}
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»
