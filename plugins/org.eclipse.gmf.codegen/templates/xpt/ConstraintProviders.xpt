/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::GenAuditRoot»

«DEFINE extensions FOR gmfgen::GenEditorGenerator-»
«IF hasAudits()»«EXPAND extensions FOR audits»«ENDIF-»
«ENDDEFINE»

«DEFINE extensions FOR gmfgen::GenAuditRoot-»
   <extension point="org.eclipse.emf.validation.constraintProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      «EXPAND declareCategory FOREACH categories-»
      <constraintProvider cache="true">
«FOREACH getAllTargetedModelPackages() AS p-»
         <package namespaceUri="«p.ecorePackage.nsURI»"/>
«ENDFOREACH-»
      «EXPAND defineCategory FOREACH categories-»
      </constraintProvider>
   </extension>

   <extension point="org.eclipse.emf.validation.constraintBindings">
      «EXPAND xpt::Common::xmlGeneratedTag»
      «LET getAllRulesWithTargetAndContextID() AS rules-»
      «FOREACH rules.collect(r | r.target.getClientContextID()).toSet() AS ctxId-»
      <clientContext default="false" id="«editorGen.plugin.iD».«ctxId»">
         <selector class="«rules.select(r | r.target.getClientContextID() == ctxId).getContextSelectorQualifiedClassName().first()»"/>
      </clientContext>
      <binding context="«editorGen.plugin.iD».«ctxId»">
         «FOREACH rules.select(r | r.target.getClientContextID() == ctxId) AS rule-»
         <constraint ref="«editorGen.plugin.iD».«escapeXML(rule.id)»"/>
         «ENDFOREACH-»
      </binding>
      «ENDFOREACH-»
      «ENDLET-»
   </extension>
«IF editorGen.diagram.liveValidationUIFeedback»
   <extension point="org.eclipse.emf.validation.ui.UIRegisteredClientContext">
      «EXPAND xpt::Common::xmlGeneratedTag»
      «FOREACH getAllRulesWithTargetAndContextID().collect(r | r.target.getClientContextID()).toSet() AS ctxId»
      <clientContext id="«editorGen.plugin.iD».«ctxId»"/>
      «ENDFOREACH-»
   </extension>
«ENDIF-»
«ENDDEFINE»

«DEFINE declareCategory FOR gmfgen::GenAuditContainer-»
      <category id="«EXPAND _pathMap»" mandatory="false" name="«IF name != null»«escapeXML(name)»«ELSE»«EXPAND _pathMap»«ENDIF»">
         <![CDATA[«description != null ? description : ""»]]>
      </category>
«ENDDEFINE»

«DEFINE defineCategory FOR gmfgen::GenAuditContainer-»
         <constraints categories="«EXPAND _pathMap»">
         «FOREACH audits.select(a | a.target != null && a.target.getTargetClass() != null) AS audit-»
         <constraint id="«escapeXML(audit.id)»"
            «IF audit.requiresConstraintAdapter»lang="Java" class="«audit.getConstraintAdapterQualifiedClassName()»"«ELSE»lang="OCL"«ENDIF»
            name="«escapeXML(audit.name != null ? audit.name : audit.id)»"
            mode="«IF audit.useInLiveMode»Live«ELSE»Batch«ENDIF»"
            severity="«audit.severity.name»" statusCode="200">
            «IF !audit.requiresConstraintAdapter»<![CDATA[«audit.rule != null ? audit.rule.body : ""»]]>«ENDIF»
            <description><![CDATA[«audit.description != null ? audit.description : ""»]]></description>
            <message><![CDATA[«IF audit.message != null»«audit.message»«ELSE»«audit.name != null ? audit.name : audit.id» audit violated«ENDIF»]]></message>
            <target class="«audit.target.getTargetClassModelQualifiedName()»"/>
         </constraint>
         «ENDFOREACH-»
         </constraints>
«ENDDEFINE»

«DEFINE _pathMap FOR gmfgen::GenAuditContainer»«FOREACH path AS p SEPARATOR "/" »«escapeXML(p.id)»«ENDFOREACH»«ENDDEFINE»
