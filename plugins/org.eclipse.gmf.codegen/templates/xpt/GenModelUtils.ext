/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";

//
// GenPackageImpl#getQualifiedPackageInterfaceName()
//
String getQualifiedPackageInterfaceName(genmodel::GenPackage gp) :
	gp.genModel.suppressEMFMetaData ? getQualifiedPackageClassName(gp) : getReflectionPackageName(gp) + "." + getPackageInterfaceName(gp)
;

// GenPackageImpl#getQualifiedFactoryInterfaceName()
String getQualifiedFactoryInterfaceName(genmodel::GenPackage gp) :
	getReflectionPackageName(gp) + "." + getPrefixedName(gp, "Factory")
;

//
// GenPackageImpl#getQualifiedItemProviderAdapterFactoryClassName()
//
String getQualifiedItemProviderAdapterFactoryClassName(genmodel::GenPackage gp) :
	getQualifiedPackageName(gp, gp.providerPackageSuffix) + "." + getItemProviderAdapterFactoryClassName(gp)
;

//
// GenPackageImpl#getItemProviderAdapterFactoryClassName()
//
String getItemProviderAdapterFactoryClassName(genmodel::GenPackage gp) :
	getPrefixedName(gp, "ItemProviderAdapterFactory")
;
//
// GenClass#getQualifiedInterfaceName
//
String getQualifiedInterfaceName(genmodel::GenClass gc) :
	null != gc.ecoreClass.instanceClassName 
		? gc.ecoreClass.instanceClassName.replaceAll('\\$', '\\.')
		: (let gp = gc.genPackage
			: (null != gp.basePackage && gp.basePackage.length() > 0 ? gp.basePackage + "." : "") 
				+ safeName(gp.ecorePackage.name) 
				+ (null != gp.interfacePackageSuffix && gp.interfacePackageSuffix.length() > 0 ? "." + gp.interfacePackageSuffix : "")
				+ "." + gc.ecoreClass.name)
;

//
// GenClass#getClassifierAccessorName
//
String getClassifierAccessorName(genmodel::GenClassifier gc) :
	switch (gc.getEcoreClassifier().name) {
		case "Class" : "Class_"
		case "Name" : "Name_"
		default : gc.getEcoreClassifier().name
	}
;

ecore::EClassifier getEcoreClassifier(genmodel::GenClassifier gc) :
	null
;

ecore::EClassifier getEcoreClassifier(genmodel::GenClass gc) :
	gc.ecoreClass
;

ecore::EClassifier getEcoreClassifier(genmodel::GenDataType gc) :
	gc.ecoreDataType
;

//
// GenFeature#getFeatureAccessorName
//
String getFeatureAccessorName(genmodel::GenFeature gf) :
	gf.genClass.ecoreClass.name + "_" + gf.ecoreFeature.name.toFirstUpper()
;

// GenFeatureImpl#getAccessorName
String getAccessorName(genmodel::GenFeature gf) :
	isMapEntryFeature(gf) ? "Typed" + gf.ecoreFeature.name.toFirstUpper() : gf.ecoreFeature.name.toFirstUpper()
;

// GenPackage#getDocumentRoot
genmodel::GenClass getDocumentRoot(genmodel::GenPackage gp) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.getDocumentRoot(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)
;

// GenFeature#getGetAccessor()
String getGetAccessor(genmodel::GenFeature gf) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.getGetAccessor(org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

// GenModel#findGenClassifier()
genmodel::GenClassifier findGenClassifier(genmodel::GenModel genModel, ecore::EClassifier eClassifier) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.findGenClassifier(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EClassifier)
;

//GenFeature#getReverse
genmodel::GenFeature getReverse(genmodel::GenFeature feature) :
	let eReverseFeature = ((ecore::EReference) feature.ecoreFeature).eOpposite :
		eReverseFeature != null ? 
			(let genClass = (genmodel::GenClass) findGenClassifier(feature.genClass.genPackage.genModel, eReverseFeature.eContainingClass) :
				genClass != null ? 
					genClass.genFeatures.select(e|e.ecoreFeature == eReverseFeature).first()
					: null)
			: null
;

// GenFeature#isListType()
boolean isListType(genmodel::GenFeature feature) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.isListType(org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

// GenFeature#isDerived()
boolean isDerived(genmodel::GenFeature feature) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.isDerived(org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

// GenFeature#getTypeGenClass()
genmodel::GenClass getTypeGenClassX(genmodel::GenFeature feature) :
JAVA org.eclipse.gmf.internal.codegen.util.GenModelUtils.getTypeGenClass(org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

// GenClass#isExternalInterface()
boolean isExternalInterface(genmodel::GenClass genClass) :
	null != genClass.ecoreClass.instanceClassName
;

// GenPackage#getFactoryInstanceName
String getFactoryInstanceName(genmodel::GenPackage gp) :
	gp.genModel.suppressEMFMetaData ? "INSTANCE" : "eINSTANCE"
;

/*
Casts the argument (which is assumed to be of the given source class) to the given target class. 
A null value may be used for both source and target class to specify the EObject class.
If the cast is required, it will be parenthesized as a whole, producing, e.g., ((EObject) o). 
If the parentheses are not required, use unparenthesizedCast() extension.
*/
String parenthesizedCast(String what, genmodel::GenClass source, genmodel::GenClass target) :
	needsCast(source, target) ? "(" + unparenthesizedCast(what, source, target) + ")" : what
;

/*
Casts the argument (which is assumed to be of the given source class) to the given target class. 
A null value may be used for both source and target class to specify the EObject class.
If the cast is required, it will NOT be parenthesized as a whole, producing, e.g., (EObject) o. 
If the parentheses are required, use parenthesizedCast() extension.
*/
String unparenthesizedCast(String what, genmodel::GenClass source, genmodel::GenClass target) :
	needsCast(source, target) ? 
		(target == null ? "(org.eclipse.emf.ecore.EObject)" + what : "(" + target.getQualifiedInterfaceName() + ")" + what)
		: what
;

//See cast()
private boolean needsCast(genmodel::GenClass source, genmodel::GenClass target) :
	source == target ? false :
		(target == null ? 
			(source != null && source.isExternalInterface()) : 
			source == null || target.isExternalInterface() || source.isExternalInterface() || !target.ecoreClass.isSuperTypeOf(source.ecoreClass))
;

// GenFeatureImpl#isMapEntryFeature
private boolean isMapEntryFeature(genmodel::GenFeature gf) :
	gf.genClass.isMapEntry() && ("key" == gf.ecoreFeature.name || "value" == gf.ecoreFeature.name)
;

// GenClassImpl#isMapEntry
boolean isMapEntry(genmodel::GenClass gc) :
	("java.util.Map.Entry" == gc.ecoreClass.instanceClassName || "java.util.Map$Entry" == gc.ecoreClass.instanceClassName) 
		&& gc.ecoreClass.getEStructuralFeature("key") != null
		&& gc.ecoreClass.getEStructuralFeature("value") != null
;

// GenPackageImpl#getReflectionPackageName()
private String getReflectionPackageName(genmodel::GenPackage gp) :
	getQualifiedPackageName(gp, gp.metaDataPackageSuffix)
;

// GenPackageImpl#getQualifiedPackageClassName()
private String getQualifiedPackageClassName(genmodel::GenPackage gp) :
	getReflectionClassPackageName(gp) + "." + getPackageClassName(gp)
;


// GenPackageImpl#getReflectionClassPackageName()
private String getReflectionClassPackageName(genmodel::GenPackage gp) :
	getQualifiedPackageName(gp, gp.genModel.suppressInterfaces ? gp.metaDataPackageSuffix : gp.classPackageSuffix)
;

// GenPackageImpl#getPackageClassName()
private string getPackageClassName(genmodel::GenPackage gp) :
	!gp.genModel.suppressEMFMetaData && !gp.genModel.suppressInterfaces ? getPackageInterfaceName(gp) + "Impl" : getPackageInterfaceName(gp)
;

// GenPackageImpl#getPackageInterfaceName()
private string getPackageInterfaceName(genmodel::GenPackage gp) :
	gp.genModel.suppressEMFMetaData && !gp.genModel.suppressInterfaces ? getPrefixedName(gp, "PackageImpl") : getPrefixedName(gp, "Package")
;

// GenPackageImpl#getPrefixedName()
private string getPrefixedName(genmodel::GenPackage gp, String name) :
	null != gp.prefix ? gp.prefix + name : name
;

// GenPackageImpl#getQualifiedPackageName(String)
private String getQualifiedPackageName(genmodel::GenPackage gp, String suffix) :
	isBlank(suffix) ? getQualifiedPackageName(gp) : getQualifiedPackageName(gp) + "." + suffix
;

// GenPackageImpl#getQualifiedPackageName()
private String getQualifiedPackageName(genmodel::GenPackage gp) :
	isBlank(gp.basePackage) ? safeName(gp.ecorePackage.name) : gp.basePackage + "." + safeName(gp.ecorePackage.name)
;

private boolean isBlank(String s) :
	null == s || s.length() == 0
;

private String safeName(String name) :
JAVA org.eclipse.emf.codegen.util.CodeGenUtil.safeName(java.lang.String)
;

// GenFeatureImpl#isContains
boolean isContains(genmodel::GenFeature gf) :
	isReferenceType(gf) && ((ecore::EReference) gf.ecoreFeature).containment
;

private boolean isReferenceType(genmodel::GenFeature gf) :
	!{gf.ecoreFeature}.typeSelect(ecore::EReference).isEmpty()
;

// move it to static java method
String getFeatureTargetType(genmodel::GenFeature feature) :
	isListType(feature)
		? "java.util.List"
		: (let classifier = findGenClassifier(feature.genClass.genPackage.genModel, feature.ecoreFeature.eType)
			: {classifier}.typeSelect(genmodel::GenClass).isEmpty() 
				? ((genmodel::GenDataType) classifier).ecoreDataType.instanceClassName
				: getQualifiedInterfaceName((genmodel::GenClass) classifier))
;
