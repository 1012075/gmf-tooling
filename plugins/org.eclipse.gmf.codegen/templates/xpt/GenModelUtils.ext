/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";

//
// GenPackageImpl#getQualifiedPackageInterfaceName()
//
String getQualifiedPackageInterfaceName(genmodel::GenPackage gp) :
	gp.genModel.suppressEMFMetaData ? getQualifiedPackageClassName(gp) : getQualifiedPackageName(gp, gp.metaDataPackageSuffix) + "." + getPackageInterfaceName(gp)
;

//
// GenClass#getQualifiedInterfaceName
//
String getQualifiedInterfaceName(genmodel::GenClass gc) :
	null != gc.ecoreClass.instanceClassName 
		? gc.ecoreClass.instanceClassName
		: (let gp = gc.genPackage
			: (null != gp.basePackage && gp.basePackage.length() > 0 ? gp.basePackage + "." : "") 
				+ safeName(gp.ecorePackage.name) 
				+ (null != gp.interfacePackageSuffix && gp.interfacePackageSuffix.length() > 0 ? "." + gp.interfacePackageSuffix : "")
				+ "." + gc.ecoreClass.name)
;

//
// GenClass#getClassifierAccessorName
//
String getClassifierAccessorName(genmodel::GenClass gc) :
	switch (gc.ecoreClass.name) {
		case "Class" : "Class_"
		case "Name" : "Name_"
		default : gc.ecoreClass.name
	}
;


//
// GenFeature#getFeatureAccessorName
//
String getFeatureAccessorName(genmodel::GenFeature gf) :
	gf.genClass.ecoreClass.name + "_" + gf.ecoreFeature.name.toFirstUpper()
;

// GenPackageImpl#getQualifiedPackageClassName()
String getQualifiedPackageClassName(genmodel::GenPackage gp) :
	getReflectionClassPackageName(gp) + "." + getPackageClassName(gp)
;

// GenFeature#getGetAccessor()
String getGetAccessor(genmodel::GenFeature gf) :
JAVA org.eclipse.gmf.codegen.util.GenModelUtils.getGetAccessor(org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

// GenModel#findGenClassifier()
genmodel::GenClassifier findGenClassifier(genmodel::GenModel genModel, ecore::EClassifier eClassifier) :
JAVA org.eclipse.gmf.codegen.util.GenModelUtils.findGenClassifier(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EClassifier)
;

// GenFeature#isListType()
boolean isListType(genmodel::GenFeature feature) :
	let eFeature = feature.ecoreFeature 
		: eFeature.many 
			|| isFeatureMapType(eFeature)
			|| 0 - 2 == eFeature.upperBound
;

private boolean isFeatureMapType(ecore::EStructuralFeature feature) :
	let type = feature.eType
		: null != type && 
			("org.eclipse.emf.ecore.util.FeatureMap.Entry" == type.instanceClassName 
			|| "org.eclipse.emf.ecore.util.FeatureMap$Entry" == type.instanceClassName)
;

// GenClass#isExternalInterface()
boolean isExternalInterface(genmodel::GenClass genClass) :
	null != genClass.ecoreClass.instanceClassName
;

// GenPackageImpl#getReflectionClassPackageName()
private String getReflectionClassPackageName(genmodel::GenPackage gp) :
	getQualifiedPackageName(gp, gp.genModel.suppressInterfaces ? gp.metaDataPackageSuffix : gp.classPackageSuffix)
;

// GenPackageImpl#getPackageClassName()
private string getPackageClassName(genmodel::GenPackage gp) :
	!gp.genModel.suppressEMFMetaData && !gp.genModel.suppressInterfaces ? getPackageInterfaceName(gp) + "Impl" : getPackageInterfaceName(gp)
;

// GenPackageImpl#getPackageInterfaceName()
private string getPackageInterfaceName(genmodel::GenPackage gp) :
	gp.genModel.suppressEMFMetaData && !gp.genModel.suppressInterfaces ? getPrefixedName(gp, "PackageImpl") : getPrefixedName(gp, "Package")
;

// GenPackageImpl#getPrefixedName()
private string getPrefixedName(genmodel::GenPackage gp, String name) :
	null != gp.prefix ? gp.prefix + name : name
;

// GenPackageImpl#getQualifiedPackageName(String)
private String getQualifiedPackageName(genmodel::GenPackage gp, String suffix) :
	isBlank(suffix) ? getQualifiedPackageName(gp) : getQualifiedPackageName(gp) + "." + suffix
;

// GenPackageImpl#getQualifiedPackageName()
private String getQualifiedPackageName(genmodel::GenPackage gp) :
	isBlank(gp.basePackage) ? safeName(gp.ecorePackage.name) : gp.basePackage + "." + safeName(gp.ecorePackage.name)
;

private boolean isBlank(String s) :
	null == s || s.length() == 0
;

private String safeName(String name) :
JAVA org.eclipse.emf.codegen.util.CodeGenUtil.safeName(java.lang.String)
;
