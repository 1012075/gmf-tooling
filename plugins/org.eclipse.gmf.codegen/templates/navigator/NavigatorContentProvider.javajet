<%@ jet package="org.eclipse.gmf.codegen.templates.navigator" class="NavigatorContentProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.util.*"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genNavigator.getContentProviderClassName()%> implements <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentProvider")%> {

	/**
	 * @generated
	 */
	private static final Object[] EMPTY_ARRAY = new Object[0];

	/**
	 * @generated
	 */
    public void dispose() {
    }

	/**
	 * @generated
	 */
    public void inputChanged(<%=importManager.getImportedName("org.eclipse.jface.viewers.Viewer")%> viewer, Object oldInput, Object newInput) {
    }
    
	/**
	 * @generated
	 */
	public Object[] getElements(Object inputElement) {
		return getChildren(inputElement);
	}
	
	/**
	 * @generated
	 */
    public Object[] getChildren(Object parentElement) {
    	if (parentElement instanceof <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) {
    		<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> abstractNavigatorItem = (<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) parentElement;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(abstractNavigatorItem.getModelID())) {
				return EMPTY_ARRAY;
			}
			
			if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
    			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) abstractNavigatorItem;
				switch (navigatorItem.getVisualID()) {
<%for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}%>
				case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID: {
					<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%	Map createdGroups = new HashMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		String parentVariable;
		if (nextReference.isInsideGroup()) {
			parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(parentVariable)) {
				createdGroups.put(parentVariable, nextReference);%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, navigatorItem);
<%			}%>
					<%=parentVariable%>.addChildren(<%
		} else {
			parentVariable = "navigatorItem";%>
					result.addAll(<%
		}
		
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			%>getChildByType(navigatorItem.getView().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextReference.getChild() instanceof GenDiagram) {
			%>getViewByType(navigatorItem.getView().eResource().getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>)<%
			} else if (nextReference.getChild() instanceof GenTopLevelNode) {
			%>getViewByType(navigatorItem.getView().getDiagram().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
			} else if (nextReference.getChild() instanceof GenLink) {
			%>getViewByType(navigatorItem.getView().getDiagram().getEdges(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
			} else {
			/* Any other "Default" child refrences are not supported */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
			}
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			boolean isOutTarget = nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL;
			if (nextCommonBase instanceof GenNode || nextCommonBase instanceof GenLink) {
			%>getConnectedViews(navigatorItem.getView(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=isOutTarget%>, <%=parentVariable%>)<%
			} else {
			/* Any other "OUT_TAGET_LITERAL || IN_SOURCE_LITERAL" child refrences are not supported */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
			}
		} else {
			/* Put processing of other types of the references here. */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
		}%>);
<%	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {%>
				if (!<%=nextGroupKey%>.isEmpty()) {
<%		}%>
				result.add(<%=nextGroupKey%>);
<%		if (nextReference.isHideIfEmpty()) {%>
				}
<%		}
	}%>
				return result.toArray();
				}
<%}%>
				}
			} else if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
				<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) parentElement;
				return group.getChildren();
			}
    	} else if (parentElement instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) {
	    	<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = (<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) parentElement;
			<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%> editingDomain = (<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory")%>.INSTANCE.createEditingDomain();
			editingDomain.setResourceToReadOnlyMap(new <%=importManager.getImportedName("java.util.HashMap")%>() {
				public Object get(Object key) {
					if (!containsKey(key)) {
						put(key, Boolean.TRUE);
					}
					return super.get(key);
				}
			});
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
			
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> fileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(file.getFullPath().toString());
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = resourceSet.getResource(fileURI, true);
			
			<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%Map createdDiagramGroups = new HashMap();
for (Iterator it = genNavigator.getChildReferencesFrom(null).iterator(); it.hasNext();) {
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
	String parentVariable;
	if (nextReference.isInsideGroup()) {
		parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(parentVariable)) {
			createdDiagramGroups.put(parentVariable, nextReference);%>
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, file);
<%		}%>
			<%=parentVariable%>.addChildren(<%
	} else {
		parentVariable = "file";%>
			result.addAll(<%
	}
	if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
		if (nextReference.getChild() instanceof GenDiagram) {
			%>getViewByType(resource.getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>)<%
		} else {
			/* Any other "Default" child refrences are not supported for resource */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
		}
	} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
		%>getChildByType(resource.getContents(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
	} else {
		/* Any other ReferenceTypes are not supported for the resource */
		%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
	}%>);
<%}

for (Iterator it = createdDiagramGroups.keySet().iterator(); it.hasNext();) {
	String groupNameKey = (String) it.next();
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdDiagramGroups.get(groupNameKey);
	if (nextReference.isHideIfEmpty()) {%>
			if (!<%=groupNameKey%>.isEmpty()) {
<%	}%>
			result.add(<%=groupNameKey%>);
<%	if (nextReference.isHideIfEmpty()) {%>
			}
<%	}
}
%>
			return result.toArray();
		}
		return EMPTY_ARRAY;
    }

	/**
	 * @generated
	 */
    public Object getParent(Object element) {
    	if (element instanceof <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) {
    		<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> abstractNavigatorItem = (<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) element;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(abstractNavigatorItem.getModelID())) {
				return null;
			}
			return abstractNavigatorItem.getParent();
		}
		return null;
    }

	/**
	 * @generated
	 */
    public boolean hasChildren(Object element) {
    	return element instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> || getChildren(element).length > 0;
    }
    
	/**
	 * @generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite")%> aConfig) {
	}
	
	/**
	 * @generated
	 */
	public void restoreState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

	/**
	 * @generated
	 */
	public void saveState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> getViewByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = childViews.iterator(); it.hasNext();) {
			Object next = it.next();
			if (false == next instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) next;
			if (type.equals(nextView.getType())) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView, parent));
			}
		}
		return result;
	}
	
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> getChildByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		<%=importManager.getImportedName("java.util.List")%> children = new <%=importManager.getImportedName("java.util.ArrayList")%>(childViews);
		for (int i = 0; i < children.size(); i++) {
			if (false == children.get(i) instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) children.get(i);
			if (type.equals(nextChild.getType())) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextChild, parent));
			} else if (!stopGettingChildren(nextChild, type)) {
				children.addAll(nextChild.getChildren());
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	private boolean stopGettingChildren(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> child, String type) {
		return false;
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> getConnectedViews(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type, boolean isOutTarget, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		<%=importManager.getImportedName("java.util.List")%> connectedViews = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		connectedViews.add(rootView);
		<%=importManager.getImportedName("java.util.Set")%> visitedViews = new <%=importManager.getImportedName("java.util.HashSet")%>();
		for (int i = 0; i < connectedViews.size(); i++) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) connectedViews.get(i);
			if (visitedViews.contains(nextView)) {
				continue;
			}
			visitedViews.add(nextView);
			if (type.equals(nextView.getType()) && nextView != rootView) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView, parent));
			} else {
				if (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {
					connectedViews.addAll(nextView.getSourceEdges());
					if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
						connectedViews.add(((Edge) nextView).getTarget());
					}
				} 
				if (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {
					connectedViews.addAll(nextView.getTargetEdges());
					if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
						connectedViews.add(((Edge) nextView).getSource());
					}
				}
			}
		}
		return result;
	}
	
	/**
	 * @generated
	 */
	private boolean stopGettingInSource(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type) {
		return !isOneHopConnection(nextView, rootView);
	}

	/**
	 * @generated
	 */
	private boolean stopGettingOutTarget(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type) {
		return !isOneHopConnection(nextView, rootView);
	}
	
	/**
	 * @generated
	 */
	private boolean isOneHopConnection(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> targetView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> sourceView) {
		if (sourceView == targetView) {
			return true;
		}
		if (sourceView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) {
			return targetView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>;
		} if (sourceView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
			return targetView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>;
		}
		return false;
	}

}
<%importManager.emitSortedImports();%>
