	/**
	 * @generated
	 */	
	public <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> findSelection(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> anInput) {
		<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> workbenchWindow = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow();
		if (workbenchWindow != null && workbenchWindow.getActivePage() != null) {
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> workbenchPage = workbenchWindow.getActivePage();
			if (workbenchPage != null) {
				<%=importManager.getImportedName("org.eclipse.ui.IEditorReference")%>[] editorReferences = workbenchPage.getEditorReferences();
				for (int i = 0; i < editorReferences.length; i++) {
					if (!<%=importManager.getImportedName(genNavigator.getEditorGen().getEditor().getQualifiedClassName())%>.ID.equals(editorReferences[i].getId())) {
						continue;
					}
					try {
						if (editorReferences[i].getEditorInput() == anInput) {
							<%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> editor = editorReferences[i].getEditor(true);
							if (editor instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%>) {
								<%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> viewerSelection = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%>) editor).getDiagramGraphicalViewer().getSelection();
								return getNavigatorSelection(viewerSelection);
							}
						}
					} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
						<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Error while selecting item in navigator", e);
					}
				}
			}
		}
		return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
	}
	
	/**
	 * @generated
	 */	
	private <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> getNavigatorSelection(<%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> viewerSelection) {
		if (viewerSelection instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
			<%=importManager.getImportedName("java.util.List")%> selection = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = ((<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) viewerSelection).iterator(); it.hasNext();) {
				Object nextSelected = it.next();
				if (nextSelected instanceof <%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) {
					<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) nextSelected;
					if (editPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
						<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> nextNavigatorItem = createNavigatorItem((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) editPart.getModel());
						if (nextNavigatorItem != null) {
							selection.add(nextNavigatorItem);
						}
					}
				}
			}
			return new <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>(selection);
		}
		return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> createNavigatorItem(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
			switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view)) {
<%Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection allReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (allReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	for (Iterator it = allReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL &&nextReference.getParent() != null) {
			theReference = nextReference;
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			} else if (nextCommonBase instanceof GenLink && nextReference.getParent() instanceof GenDiagram) {
				theReference = nextReference;
			}
		}
	}
	
	if (theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}%>
			case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return create<%=nextCommonBase.getUniqueIdentifier()%>Item(view);
<%}%>
			}
			return null;
		}

		// TODO: Process shortcuts here!
		return null;
	}
	
<%for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection allReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (allReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	Collection childReferences = new ArrayList();
	for (Iterator it = allReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL && nextReference.getParent() != null) {
			childReferences.add(nextReference);
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL && theReference == null) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			} else if (nextCommonBase instanceof GenLink && nextReference.getParent() instanceof GenDiagram) {
				theReference = nextReference;
			}
		}
	}
	
	if (childReferences.size() == 0 && theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}%>
	/**
	 * @generated
	 */	
	public <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> create<%=nextCommonBase.getUniqueIdentifier()%>Item(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
<%	if (childReferences.size() > 0) {%>
		for (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = view.eContainer(); container instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>; container = container.eContainer()) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> containerView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) container;
			if (stopGettingParents(view, containerView)) {
				break;
			}
			if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(containerView))) {
				switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(containerView)) {
<%		for (Iterator it = childReferences.iterator(); it.hasNext();) {
			GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();%>
				case <%=importManager.getImportedName(nextReference.getParent().getEditPartQualifiedClassName())%>.VISUAL_ID : {
					<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> parentItem = createNavigatorItem(containerView); 
					if (parentItem == null) {
						return null;
					}
<%			if (nextReference.isInsideGroup()) {%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> parentGroup = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, parentItem); 
<%			}%>
					<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> result = new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(view, parent<%if (nextReference.isInsideGroup()) {%>Group<%} else {%>Item<%}%>);
<%			if (nextReference.isInsideGroup()) {%>
					parentGroup.addChild(result) 
<%			}%>
					return result; 
				}
<%		}%>
				}
			}
		}
<%	}
	
	if (theReference != null) {
		String parentVariable;
		if (theReference.getParent() == null) {
			parentVariable = "parentFile";%>
		Object parentFile = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(view.eResource());
<%		} else {
			parentVariable = "parentItem";%>
		<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> parentItem = createNavigatorItem(view.getDiagram());
		if (parentItem == null) {
			return null;
		}
<%		}
		
		if (theReference.isInsideGroup()) {%>
		<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> parentGroup = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=theReference.getGroupName()%>", "<%=theReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>);
<%			parentVariable = "parentGroup";
		}%>		
		<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> result = new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(view, <%=parentVariable%>); 
<%		if (theReference.isInsideGroup()) {%>
		parentGroup.addChild(result); 
<%		}%>
		return result;
<%	} else {%>
		return null;
<%	}%>
	}
	
<%}%>
	/**
	 * @generated
	 */	
	public boolean stopGettingParents(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> containerView) {
		return false;
	}
