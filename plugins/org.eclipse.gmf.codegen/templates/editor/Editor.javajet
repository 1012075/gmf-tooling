<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="EditorGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenEditorView genEditor = (GenEditorView) ((Object[]) argument)[0];
final GenDiagram genDiagram = genEditor.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenPropertySheet propertySheet = genDiagram.getEditorGen().getPropertySheet();
importManager.registerInnerClass("DropTargetListener");
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genEditor.getClassName()%> extends DiagramDocumentEditor
<%
Set<String> ifaces = new LinkedHashSet<String>();
if (genEditor.getEditorGen().getApplication() == null) {
	ifaces.add(importManager.getImportedName("org.eclipse.ui.ide.IGotoMarker"));
}
if (propertySheet != null && propertySheet.isReadOnly()) {
	ifaces.add(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor"));
}
if (!ifaces.isEmpty()) {
%>
		implements <%=ifaces.toString().substring(1, ifaces.toString().length() - 1)%>
<%}%>
{

	/**
	 * @generated
	 */
	public static final String ID = "<%=genEditor.getID()%>"; //$NON-NLS-1$
	
	/**
	 * @generated
	 */
	public static final String CONTEXT_ID = "<%=genEditor.getContextID()%>"; //$NON-NLS-1$

	/**
	 * @generated
	 */
	public <%=genEditor.getClassName()%>() {
		super(<%=genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout()%>);
	}
	
	/**
	 * @generated
	 */
	protected String getContextID() {
		return CONTEXT_ID;
	}

<%if (genDiagram.getPalette() != null) {%>
	/**
	 * @generated
	 */
	protected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {
		PaletteRoot root = super.createPaletteRoot(existingPaletteRoot);
		new <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>().fillPalette(root);
		return root;
	}
<%}%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint")%> getPreferencesHint() {<%/*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */%>
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT;
	}
<%if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/%>

	/**
	 * @generated
	 */
	public String getContributorId() {
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.ID;
	}
<%} else {%>

	/**
	 * @generated
	 */
	public Object getAdapter(Class type) {
		if (type == <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage")%>.class) {
			return null;
		}
		return super.getAdapter(type);
	}
<%}%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider")%> getDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (<%if (genDiagram.getEditorGen().getApplication() == null) {%>input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> || <%}%>input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getDocumentProvider();
		}
		return super.getDocumentProvider(input);
	}
	
	/**
	 * @generated
	 */
    public <%=importManager.getImportedName("TransactionalEditingDomain")%> getEditingDomain() {
    	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;
    	if (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
    		return ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();
    	}
        return super.getEditingDomain();
    }

	/**
	 * @generated
	 */
	protected void setDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (<%if (genDiagram.getEditorGen().getApplication() == null) {%>input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> || <%}%>input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			setDocumentProvider(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getDocumentProvider());
		} else {
			super.setDocumentProvider(input);
		}
	}
	
<%if (genDiagram.getEditorGen().getApplication() == null) {%>

	/**
	 * @generated
	 */
	public void gotoMarker(<%=importManager.getImportedName("org.eclipse.core.resources.IMarker")%> marker) {
        <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService")%>.getInstance().gotoMarker(this, marker);
    }

	/**
	 * @generated
	 */
	public boolean isSaveAsAllowed() {
		return true;
	}

	/**
	 * @generated
	 */
	public void doSaveAs() {
		performSaveAs(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());
	}

	/**
	 * @generated
	 */
	protected void performSaveAs(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor) {
		<%=importManager.getImportedName("org.eclipse.swt.widgets.Shell")%> shell = getSite().getShell();
		<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input = getEditorInput();
		<%=importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog")%> dialog = new <%=importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog")%>(shell);
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> original = input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> ? ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) input).getFile() : null;
		if (original != null) {
			dialog.setOriginalFile(original);
		}
		dialog.create();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider")%> provider = getDocumentProvider();
		if (provider == null) {
			// editor has been programmatically closed while the dialog was open
			return;
		}
		if (provider.isDeleted(input) && original != null) {
			String message = <%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("The original file ''{0}'' has been deleted.", original.getName());
			dialog.setErrorMessage(null);
			dialog.setMessage(message, <%=importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider")%>.WARNING);
		}
		if (dialog.open() == <%=importManager.getImportedName("org.eclipse.jface.window.Window")%>.CANCEL) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> filePath = dialog.getResult();
		if (filePath == null) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		<%=importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot")%> workspaceRoot = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot();
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = workspaceRoot.getFile(filePath);
		final <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> newInput = new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(file);
		// Check if the editor is already open
		<%=importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy")%> matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
		<%=importManager.getImportedName("org.eclipse.ui.IEditorReference")%>[] editorRefs = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
		for (int i = 0; i < editorRefs.length; i++) {
			if (matchingStrategy.matches(editorRefs[i], newInput)) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openWarning(shell, "Problem During Save As...", "Save could not be completed. Target file is already open in another editor.");
				return;
			}
		}
		boolean success = false;
		try {
			provider.aboutToChange(newInput);
			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
			success = true;
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> x) {
			<%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> status = x.getStatus();
			if (status == null || status.getSeverity() != <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%>.CANCEL) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(shell, "Save Problems", "Could not save file.", x.getStatus());
			}
		} finally {
			provider.changed(newInput);
			if (success) {
				setInput(newInput);
			}
		}
		if (progressMonitor != null) {
			progressMonitor.setCanceled(!success);
		}
	}
<%}

if (genDiagram.generateCreateShortcutAction()) {%>

	/**
	 * @generated
	 */
	protected void initializeGraphicalViewer() {
		super.initializeGraphicalViewer();
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer()) {

			protected Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data) {
				return <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer().nativeToJava(data);
			}
			
		});
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), <%=importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer")%>.getInstance()) {

			protected Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data) {
				return <%=importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer")%>.getInstance().nativeToJava(data);
			}
			
		});
	}
	
	/**
	 * @generated
	 */
	private abstract class DropTargetListener extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener")%> {
	
		/**
		 * @generated
		 */
		public DropTargetListener(<%=importManager.getImportedName("org.eclipse.gef.EditPartViewer")%> viewer, <%=importManager.getImportedName("org.eclipse.swt.dnd.Transfer")%> xfer) {
			super(viewer, xfer);
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getObjectsBeingDropped() {
			<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data = getCurrentEvent().currentDataType;
			<%=importManager.getImportedName("java.util.Collection")%> uris = new <%=importManager.getImportedName("java.util.HashSet")%>();

			Object transferedObject = getJavaObject(data);
			if (transferedObject instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
				<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) transferedObject;
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = selection.iterator(); it.hasNext();) {
					Object nextSelectedObject = it.next();
<%
/*
 * TODO: move NavigatorItem to some place available in runtime and remove 
 * "genEditor.getEditorGen().getNavigator() != null" test
 */
	if (genEditor.getEditorGen().getNavigator() != null) {%>
					if (nextSelectedObject instanceof <%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = ((<%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) nextSelectedObject).getView();
						nextSelectedObject = view.getElement();
					} else <%}%>if (nextSelectedObject instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
						<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> adaptable = (<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) nextSelectedObject;
						nextSelectedObject = adaptable.getAdapter(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>.class);
					}
	
					if (nextSelectedObject instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
						<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) nextSelectedObject;
						<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelElementResource = modelElement.eResource();
						uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));	
					}
				}
			}

			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = uris.iterator(); it.hasNext();) {
				<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> nextURI = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) it.next();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);
				result.add(modelObject);
			}
			return result;
		}

		/**
		 * @generated
		 */
		protected abstract Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data);
	
	}
<%}%>
	
}
<%importManager.emitSortedImports();%>