<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="VisualIDRegistryGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.*"%>
<%
GenDiagram genDiagram = (GenDiagram) argument;
List genNodes = genDiagram.getNodes();
List genLinks = genDiagram.getLinks();
%>
package <%=genDiagram.getEditorPackageName()%>;
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>
	
/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented 
 * by a domain model object.
 *
 * @generated
 */
public class VisualIDRegistry {

	public static final VisualIDRegistry INSTANCE = new VisualIDRegistry();
		
	/**
	 * @generated
	 */
	public int getDiagramVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		EClass domainElementMetaclass = domainElement.eClass();
		return getDiagramVisualID(domainElement, domainElementMetaclass);
	}

	/**
	 * @generated
	 */
	public int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
{
	String classifierAccessorName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=classifierAccessorName%>().equals(domainElementMetaclass) && (domainElement != null ? isDiagram<%=genDiagram.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement) : true)) {
			return <%=genDiagram.getVisualID()%>;
		}
		return getUnrecognizedDiagramID(domainElement);
<%
}
%>
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */
	private int getUnrecognizedDiagramID(EObject domainElement) {
		return -1;
	}

//================================================================================================================
<%
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
%>
	/**
	 * @generated
	 */
	public int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {
		int containerVisualID = getVisualID(containerView);
		switch (containerVisualID) {
		case <%=genDiagram.getVisualID()%>:
<%
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String classifierAccessorName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName());
%>
			if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=classifierAccessorName%>().equals(domainElementMetaclass) && (domainElement != null ? isNode<%=genNode.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement) : true)) {
				return <%=genNode.getVisualID()%>;
			} 
<%
}
%>
			return getUnrecognizedDiagramChildID(domainElement);
<%
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
%>
		case <%=nextContainer.getVisualID()%>:
<%
	if (nextContainer instanceof GenNode) {
		GenNode node = (GenNode) nextContainer;
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(node);
			
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
			GenNodeLabel label = (GenNodeLabel) labels.next();
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
%>
			if (<%=labelTextViewId%>.equals(semanticHint)) {
				return <%=label.getVisualID()%>;
			}  
<%			
		}
		
		for (Iterator compartments = node.getCompartments().iterator(); compartments.hasNext();) {
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
			GenCompartment compartment = (GenCompartment) compartments.next();
			String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(compartment);
%>
			if (<%=compartmentId%>.equals(semanticHint)) {
				return <%=compartment.getVisualID()%>;
			} 
<%
		}
	}
%>
			if (!"".equals(semanticHint)) {
				return getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(semanticHint);
			} 
<%	
	for (Iterator childNodes = nextContainer.getChildNodes().iterator(); childNodes.hasNext();) {
		GenNode childNode = (GenNode) childNodes.next();
		String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
		String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
%>		
			if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=classifierAccessorName%>().equals(domainElementMetaclass) && (domainElement != null ? isChildNode<%=childNode.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement) : true)) {
				return <%=childNode.getVisualID()%>;
			} 
<%
	}
%>
			return getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(domainElement);
<%
}

for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
%>
		case <%=link.getVisualID()%>:
<%
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
%>
			if (<%=labelViewId%>.equals(semanticHint)) {
				return <%=linkLabel.getVisualID()%>;
			}
<%
	}
%>
			return getUnrecognized<%=link.getUniqueIdentifier()%>LinkLabelID(semanticHint);
<%
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(linkLabel);
%>
		case <%=linkLabel.getVisualID()%>:
			if (<%=labelTextViewId%>.equals(semanticHint)) {
				return <%=linkLabel.getVisualID()%>;
			}
			return getUnrecognized<%=link.getUniqueIdentifier()%>LinkLabelTextID(semanticHint);
<%
	}
}
%>
		}
		return -1;
	}
	
<%@ include file="getVisualID.jetinc" %>

	/**
	 * @generated
	 */	
	private int getUnrecognizedDiagramChildID(EObject domainElement) {
		return -1;
	}
	
<%
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
%>
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */	
	private int getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(EObject domainElement) {
		return -1;
	}
	
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */	
	private int getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(String semanticHint) {
		return -1;
	}
	
<%
}

for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
%>
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */	
	private int getUnrecognized<%=link.getUniqueIdentifier()%>LinkLabelID(String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */	
	private int getUnrecognized<%=link.getUniqueIdentifier()%>LinkLabelTextID(String semanticHint) {
		return -1;
	}
<%
}
%>
	
//================================================================================================================

	/**
	 * @deprecated
	 * @generated
	 */
	public int getNodeVisualID(EObject domainElement) {
		EClass domainElementMetaclass = domainElement.eClass();
		return getNodeVisualID(domainElement, domainElementMetaclass);
	}


	/**
	 * @deprecated
	 * @generated
	 */
	public int getNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().equals(domainElementMetaclass) && (domainElement != null ? isNode<%=genNode.getUniqueIdentifier()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) domainElement) : true)) {
			return <%=genNode.getVisualID()%>;
		} else
<%
}
%>
		{
			return getUnrecognizedNodeID(domainElement);
		}
	}
		
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */
	private int getUnrecognizedNodeID(EObject domainElement) {
		return -1;
	}

	/**
	 * @generated
	 */
	public int getChildNodeVisualID(EObject domainElement) {
		EClass domainElementMetaclass = domainElement.eClass();
		return getChildNodeVisualID(domainElement, domainElementMetaclass);
	}
	
	/**
	 * @generated
	 */
	public int getChildNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().equals(domainElementMetaclass) && (domainElement != null ? isChildNode<%=genChildNode.getUniqueIdentifier()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) domainElement) : true)) {
			return <%=genChildNode.getVisualID()%>;
		} else 
<%	}
}
%>
		{
			return getUnrecognizedChildNodeID(domainElement);
		}
	}
		
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */
	private int getUnrecognizedChildNodeID(EObject domainElement) {
		return -1;
	}

	/**
	 * @generated
	 */
	public int getLinkWithClassVisualID(EObject domainElement) {
		EClass domainElementMetaclass = domainElement.eClass();
		return getLinkWithClassVisualID(domainElement, domainElementMetaclass);
	}
		
	/**
	 * @generated
	 */
	public int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = modelFacet.getMetaClass().getQualifiedInterfaceName();
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticLinkInterfaceName%>().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass<%=genLink.getUniqueIdentifier()%>((<%=importManager.getImportedName(qualifiedInterfaceName)%>) domainElement) : true)) {
			return <%=genLink.getVisualID()%>;
		} else 
<%
		}
	}
%>
		{
			return getUnrecognizedLinkWithClassID(domainElement);
		}
	}
		
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @generated
	 */
	private int getUnrecognizedLinkWithClassID(EObject domainElement) {
		return -1;
	}
		
	/**
	 * User can change implementation of this method to check some additional conditions here.
	 *
	 * @generated
	 */
	private boolean isDiagram<%=genDiagram.getUniqueIdentifier()%>(<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> element) {
		return true;
	}
		
<%
String acceptAllMatcherAccessor = "acceptAllMatcher()"; //$NON-NLS-1$
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String qualifiedNodeInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
	String nodeSelector = genNode.getModelFacet() != null && genNode.getModelFacet().getModelElementSelector() != null ? genNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
%>
	/**
	 * User can change implementation of this method to check some additional conditions here.
	 *
	 * @generated
	 */
	private boolean isNode<%=genNode.getUniqueIdentifier()%>(<%=importManager.getImportedName(qualifiedNodeInterfaceName)%> element) {
		return ElementSelectors.<%=nodeSelector%>.matches(element);
	}

<%
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String qualifiedChildNodeInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
		String childNodeSelector = genChildNode.getModelFacet() != null && genChildNode.getModelFacet().getModelElementSelector() != null ? genChildNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
%>
	/**
	 * User can change implementation of this method to check some additional conditions here.
	 *
	 * @generated
	 */
	private boolean isChildNode<%=genChildNode.getUniqueIdentifier()%>(<%=importManager.getImportedName(qualifiedChildNodeInterfaceName)%> element) {
		return ElementSelectors.<%=childNodeSelector%>.matches(element);
	}

<%	}
}
%>
	
<%
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String qualifiedInterfaceName = modelFacet.getMetaClass().getQualifiedInterfaceName();
		String linkSelector = modelFacet.getModelElementSelector() != null ? genLink.getUniqueIdentifier() : acceptAllMatcherAccessor;		
%>
	/**
	 * User can change implementation of this method to check some additional conditions here.
	 *
	 * @generated
	 */
	private boolean isLinkWithClass<%=genLink.getUniqueIdentifier()%>(<%=importManager.getImportedName(qualifiedInterfaceName)%> element) {
		return ElementSelectors.<%=linkSelector%>.matches(element);
	}
<%
	}
}
%>

	/**
	 * @generated
	 */
	private static class ElementSelectors {	
<%
int selectorCounter = 0;
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	GenCommonBase nextElement = (GenCommonBase)it.next();
	TypeModelFacet modelFacet = null;
	if(nextElement instanceof GenNode) {
		modelFacet = ((GenNode)nextElement).getModelFacet();
	} else if(nextElement instanceof GenLink && 
		((GenLink)nextElement).getModelFacet() instanceof TypeLinkModelFacet) {
		modelFacet = (TypeLinkModelFacet)((GenLink)nextElement).getModelFacet();
	} 
	
	if(modelFacet == null || modelFacet.getModelElementSelector() == null) continue;
	ModelElementSelector selector = modelFacet.getModelElementSelector();
	selectorCounter++;
	%>
		/**
		 * Element matching condition for <%=nextElement.getUniqueIdentifier()%>.
		 * <pre>language: <%=selector.getLanguage()%></pre>	
		 * <pre>body    : <%=selector.getBody()%></pre>
		 * @generated
		 */
		private static final Matcher <%=nextElement.getUniqueIdentifier()%> = new Matcher("<%=selector.getBody()%>");
<%}%>
		
		/**
		 * @generated
		 */
		private ElementSelectors() {
		}
<%if(selectorCounter > 0) { %>			
		/**
		* @generated	
		*/
		static class Matcher {
	
			/**
			* @generated	
			*/					
			private EClass evalContext;
	
			/**
			* @generated	
			*/						
			private <%=importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OclConstraintCondition")%> condition;
	
			/**
			* @generated	
			*/						
			private String body;		
					
			/**
			* @generated	
			*/				
			Matcher(String expressionBody) {			
				body = expressionBody;
			}
	
			/**
			* @generated	
			*/						
			boolean matches(EObject object) {		
				try {
					Boolean result = (object != null) ? evaluate(object) : Boolean.FALSE;
					return result.booleanValue();
				} catch(IllegalArgumentException e) {
					// TODO - add log entry
					e.printStackTrace();
					return false;
				}
			}
	
			/**
			* @generated	
			*/		
			private Boolean evaluate(EObject context) {
				this.evalContext = context.eClass();
				if(condition == null) {					
					condition = new OclConstraintCondition(body, evalContext);
				}
				if(condition != null) {
					return booleanCast(condition.evaluate(context));
				}
				return Boolean.FALSE;
			}
	
			/**
			* @generated	
			*/					
			private static Boolean booleanCast(Object value) {
				if(value == null) {
					return null;
				} else if(value instanceof Boolean) {
					 return (Boolean)value;	
				}
				return Boolean.FALSE;
			}
		} // end of Matcher
<%}%>		
		/**
		 * @generated
		 */
		static class AcceptAllMatcher {
			/**
			 * @generated
			 */		
			static final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();
			/**
			 * @generated
			 */					
			boolean matches(Object element) {
				return true;
			}
		}
		
		/**
		 * @generated
		 */		
		static AcceptAllMatcher acceptAllMatcher() {
			return AcceptAllMatcher.INSTANCE;
		}
	} // end of ElementSelectors
}
	
<%importManager.emitSortedImports();%>
