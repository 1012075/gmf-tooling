<%
GenLink genLink = linkEntry.getGenLink();
GenClass drtClass = genLink.getDiagramRunTimeClass();
%>
		//ImageDescriptor img = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=linkEntry.getSmallIconPath()%>");*/
<%
final String domainElementInstanceCreationCode;
if (genLink instanceof GenLinkWithClass) {
	EClass domainMetaClass = ((GenLinkWithClass) genLink).getDomainMetaClass();
	GenClass genClass = genDiagram.findGenClass(domainMetaClass);
	domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
} else {
	// no dedicated metaclass for link, thus no creation code
	domainElementInstanceCreationCode = "null";
}
%>
		ImageDescriptor img = getImage(<%=domainElementInstanceCreationCode %>);
		CreationFactory creationFactory = new CreationFactory() {
			public Object getNewObject() {
				<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramLink = <%=importManager.getImportedName(drtClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=drtClass.getName()%>();
				diagramLink.setVisualID(<%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID);
				diagramLink.setDomainModelElement(<%=domainElementInstanceCreationCode%>);
				initialize(diagramLink);
				return diagramLink;
			}
			public Object getObjectType() {
				return <%=importManager.getImportedName("org.eclipse.gmf.diagramrt.DiagramLink")%>.class;
			}
			private void initialize(<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramLink) {
				// place initialization code for attributes specific to your Diagram RunTime model here
			}
		};
		paletteContainer.add(new ConnectionCreationToolEntry("<%=linkEntry.getTitleKey()%>", "<%=linkEntry.getDescriptionKey()%>", creationFactory, img, img));
