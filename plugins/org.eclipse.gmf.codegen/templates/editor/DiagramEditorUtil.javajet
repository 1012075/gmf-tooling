<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="DiagramEditorUtilGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.io.IOException;
import java.util.Collections;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.ui.PartInitException;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=importManager.getCompilationUnitName()%> {

	/**
	 * @generated
	 */
	public static boolean openDiagram(Resource diagram) throws PartInitException {
<%if (editorGen.getApplication() == null) {%>
		return <%=importManager.getImportedName("org.eclipse.emf.edit.ui.util.EditUIUtil")%>.openEditor((<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) diagram.getContents().get(0));
<%} else {%>
		<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage();
		page.openEditor(new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(diagram.getURI()), <%=importManager.getImportedName(editorGen.getEditor().getQualifiedClassName())%>.ID);
		return true;
<%}%>
	}
<%if (editorGen.getApplication() == null) {%>

	/**
	 * @generated
	 */
	private static void setCharset(URI uri) {
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = getFile(uri);
		if (file == null) {
			return;
		}
		try {
			file.setCharset("UTF-8", new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>()); //$NON-NLS-1$
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for file " + file.getFullPath(), e); //$NON-NLS-1$
		}
	}

	/**
	 * @generated
	 */
	public static IFile getFile(URI uri) {
		if (uri.toString().startsWith("platform:/resource")) { //$NON-NLS-1$
			String path = uri.toString().substring("platform:/resource".length()); //$NON-NLS-1$
			<%=importManager.getImportedName("org.eclipse.core.resources.IResource")%> workspaceResource =
				<%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().findMember(new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(path));
			if (workspaceResource instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) {
				return (<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) workspaceResource;
			}
		}
		return null;
	}
<%}%>

	/**
	 * @generated
	 */
	public static boolean exists(<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path) {
<%if (editorGen.getApplication() == null) {%>
		return <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().exists(path);
<%} else {%>
		return path.toFile().exists();
<%}%>
	}

	/**
<%if (editorGen.getApplication() == null) {%>
	 * <p>
	 * This method should be called within a workspace modify operation since it creates resources.
	 * </p>
<%}%>
	 * @generated
	 * @return the created resource, or <code>null</code> if the resource was not created
	 */
<%final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;%>
	public static final Resource createDiagram(URI diagramURI,
<%if (standaloneDomainModel) {%>
			URI modelURI,
<%}%>
			IProgressMonitor progressMonitor) {
		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
		progressMonitor.beginTask("Creating diagram and model files", 3);
		final Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);
<%if (standaloneDomainModel) {%>
		final Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);
<%}%>
		final String diagramName = diagramURI.lastSegment();
		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, "Creating diagram and model", Collections.EMPTY_LIST) { //$NON-NLS-1$
			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model = createInitialModel();
				attachModelToResource(model, <%if (standaloneDomainModel) {%>model<%} else {%>diagram<%}%>Resource);
<%}%>
				Diagram diagram = ViewService.createDiagram(
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model, 
<%}%>
					<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID,
					<%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
				if (diagram != null) {
					diagramResource.getContents().add(diagram);
					diagram.setName(diagramName);
<%if (genDiagram.getDomainDiagramElement() != null) {%>
					diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
<%}%>
				}
			try {
				<%=importManager.getImportedName("java.util.Map")%> options = new <%=importManager.getImportedName("java.util.HashMap")%>();
				options.put(<%=importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource")%>.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
<%if (standaloneDomainModel) {%>
				modelResource.save(options);
<%}%>
				diagramResource.save(options);
			} catch (IOException e) {
				<%// TODO CommandResult.newErrorCommandResult(e) would be better? %>
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to store model and diagram resources", e); //$NON-NLS-1$
			}
				return CommandResult.newOKCommandResult();
			}
		};
		try {
			OperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);
		} catch (ExecutionException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
		}
<%if (editorGen.getApplication() == null) {%>
<%	if (standaloneDomainModel) {%>
		setCharset(modelURI);
<%	}%>
		setCharset(diagramURI);
<%}%>
		return diagramResource;
	}
<%if (genDiagram.getDomainDiagramElement() != null) {
	final String diagramElementImportedName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
	final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();%>
	/**
	 * Create a new instance of domain element associated with canvas.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static <%=diagramElementImportedName%> createInitialModel() {
		return <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create<%=genDiagram.getDomainDiagramElement().getName()%>();
	}
	
	/**
	 * Store model element in the resource.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static void attachModelToResource(<%=diagramElementImportedName%> model, Resource resource) {
<%	boolean createDocRoot = standaloneDomainModel /*may need docRoot only if separate file for domain model*/ && domainGenPackage.hasDocumentRoot();
	boolean generateCreateInitialRoot = genDiagram.getDomainDiagramElement().isExternalInterface() || createDocRoot;%>
		resource.getContents().add(<%if (generateCreateInitialRoot) {%>createInitialRoot(<%}%>model<%if (generateCreateInitialRoot) {%>)<%}%>);
	}

<%	if (generateCreateInitialRoot) {%>
	/**
	 * @generated
	 */
	private static <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createInitialRoot(<%=diagramElementImportedName%> model) {
<%		if (!createDocRoot) { %>
		return <%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model;
<%		} else {
			// would be better to get GenClass for docRoot and directly use setter
			GenClass docRoot = domainGenPackage.getDocumentRoot();
			String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
			for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
				GenFeature genFeature = (GenFeature) it.next();
				boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
				// Perhaps, makes sense to check instanceof EReference && isContainment
				if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
					featureAccessor = genFeature.getAccessorName();
					break;
				}
			} /*for*/
%>
		<%=importManager.getImportedName(docRoot.getQualifiedInterfaceName())%> docRoot =
				<%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create<%=docRoot.getName()%>();
		docRoot.set<%=featureAccessor%>(model);
		return docRoot;
<%		}%>
	}
<%	} /*if generateCreateInitialRoot*/
} /* domainDiagramElement != null */%>

	/**
	 * @generated
	 */
	public static int findElementsInDiagram(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%> diagramPart, <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> elementURI, <%=importManager.getImportedName("java.util.List")%>/*EditPart*/ editPartCollector) {
		final int originalNumOfEditParts = editPartCollector.size();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = null;
		try {
			element = diagramPart.getDiagram().eResource().getResourceSet().getEObject(elementURI, false);
		} catch(RuntimeException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Failed to get EObject by uri: " + elementURI, e); //$NON-NLS-1$
			return 0;
		}
		if(element == null) {
			return 0;
		} else if(element instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(element);
			if(editPart != null) {
				editPartCollector.add(editPart);
				return 1;
			}
		}
		
		String elementID = <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil")%>.getProxyID(element);
		<%=importManager.getImportedName("java.util.List")%> associatedParts = diagramPart.getDiagramGraphicalViewer()
			.findEditPartsForElement(elementID, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>.class);
		// peform the possible hierarchy disjoint -> take the top-most parts
		for (<%=importManager.getImportedName("java.util.Iterator")%> editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> nextPart = (org.eclipse.gef.EditPart)editPartIt.next();
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> parentPart = nextPart.getParent();
			while(parentPart != null && !associatedParts.contains(parentPart)) {
				parentPart = parentPart.getParent();
			}		
			if(parentPart == null) {
				editPartCollector.add(nextPart);
			}
		}
		
		if(originalNumOfEditParts == editPartCollector.size()) {
			if(!associatedParts.isEmpty()) {
				editPartCollector.add(associatedParts.iterator().next());
			} else {
				element = element.eContainer();
				if(element != null) {
					return findElementsInDiagram(diagramPart, <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(element), editPartCollector);
				}
			}
		}
		return editPartCollector.size() - originalNumOfEditParts;
	}

	/**
	 * @generated
	 */	
	public static void selectElementsInDiagram(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%> diagramPart, <%=importManager.getImportedName("java.util.List")%>/*EditPart*/ editParts) {
		diagramPart.getDiagramGraphicalViewer().deselectAll();

		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> firstPrimary = null;
		for (java.util.Iterator it = editParts.iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> nextPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			diagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);
			if(firstPrimary == null && nextPart instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart")%>) {
				firstPrimary = nextPart;
			}
		}

		if(!editParts.isEmpty()) {
			diagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)editParts.get(0));
		}
	}	
}
<%importManager.emitSortedImports();%>
