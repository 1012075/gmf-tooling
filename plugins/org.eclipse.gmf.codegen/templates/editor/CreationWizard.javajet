<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="CreationWizardGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.actions.WorkspaceModifyOperation;

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getCreationWizardClassName()%> extends Wizard implements INewWizard {

	/**
	 * @generated
	 */
	private IWorkbench workbench;

	/**
	 * @generated
	 */
    protected IStructuredSelection selection;

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> page;

	/**
	 * @generated
	 */
	protected IFile diagramFile;

	/**
	 * @generated
	 */
	private boolean openNewlyCreatedDiagramEditor = true;

	/**
	 * @generated
	 */
    public IWorkbench getWorkbench() {
        return workbench;
    }

	/**
	 * @generated
	 */
	public IStructuredSelection getSelection() {
        return selection;
    }

	/**
	 * @generated
	 */
	public final IFile getDiagramFile() {
		return diagramFile;
	}

	/**
	 * @generated
	 */
	public final boolean isOpenNewlyCreatedDiagramEditor() {
		return openNewlyCreatedDiagramEditor;
	}

	/**
	 * @generated
	 */
	public void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {
		this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
	}

	/**
	 * @generated
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
		setWindowTitle("New <%=genDiagram.getEditorGen().getModelID()%> Diagram");
<%
final String iconNameStem;
// @see Generator#generateWizardBanner
if (genDiagram.getDomainDiagramElement() != null) {
	iconNameStem = genDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
} else {
	iconNameStem = ""; //$NON-NLS-1$
}
final String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
		setDefaultPageImageDescriptor(<%=pluginClassName%>.getBundledImageDescriptor("icons/wizban/New<%=iconNameStem%>Wizard.gif")); //$NON-NLS-1$
		setNeedsProgressMonitor(true);
	}

	/**
	 * @generated
	 */
	public void addPages() {
		page = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("CreationWizardPage", getSelection()); //$NON-NLS-1$
		page.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
		page.setDescription("Create a new <%=genDiagram.getEditorGen().getModelID()%> diagram.");
		addPage(page);
	}

	/**
	 * @generated
	 */
	public boolean performFinish() {
		WorkspaceModifyOperation op = new WorkspaceModifyOperation(null) {

			protected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {
				diagramFile = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createAndOpenDiagram(
						page.getDiagramFileCreator(),
						page.getContainerFullPath(),
						page.getFileName(),
						page.getInitialContents(),
						<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID,
						getWorkbench().getActiveWorkbenchWindow(),
						monitor,
						isOpenNewlyCreatedDiagramEditor(),
						true);
			}
		};
		try {
			getContainer().run(false, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			if (e.getTargetException() instanceof CoreException) {
				ErrorDialog.openError(getContainer().getShell(), "Creation Problems", null, ((CoreException) e.getTargetException()).getStatus());
			} else {
				<%=pluginClassName%>.getInstance().logError("Error creating diagram", e.getTargetException());
			}
			return false;
		}
		return diagramFile != null;
	}
}
<%importManager.emitSortedImports();%>
