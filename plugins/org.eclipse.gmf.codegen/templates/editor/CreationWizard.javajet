<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="CreationWizardGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean standaloneDomainModel = !genDiagram.getEditorGen().isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PartInitException;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=importManager.getCompilationUnitName()%> extends Wizard implements INewWizard {

	/**
	 * @generated
	 */
	private IWorkbench workbench;

	/**
	 * @generated
	 */
    protected IStructuredSelection selection;

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> diagramModelFilePage;
<%if (standaloneDomainModel) {%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> domainModelFilePage;
<%}%>

	/**
	 * @generated
	 */
	protected Resource diagram;

	/**
	 * @generated
	 */
	private boolean openNewlyCreatedDiagramEditor = true;

	/**
	 * @generated
	 */
    public IWorkbench getWorkbench() {
        return workbench;
    }

	/**
	 * @generated
	 */
	public IStructuredSelection getSelection() {
        return selection;
    }

	/**
	 * @generated
	 */
	public final Resource getDiagram() {
		return diagram;
	}

	/**
	 * @generated
	 */
	public final boolean isOpenNewlyCreatedDiagramEditor() {
		return openNewlyCreatedDiagramEditor;
	}

	/**
	 * @generated
	 */
	public void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {
		this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
	}

	/**
	 * @generated
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
		setWindowTitle("New <%=genDiagram.getEditorGen().getModelID()%> Diagram");
<%
final String iconNameStem;
// @see Generator#generateWizardBanner
if (genDiagram.getDomainDiagramElement() != null) {
	iconNameStem = genDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
} else {
	iconNameStem = ""; //$NON-NLS-1$
}
final String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
		setDefaultPageImageDescriptor(<%=pluginClassName%>.getBundledImageDescriptor("icons/wizban/New<%=iconNameStem%>Wizard.gif")); //$NON-NLS-1$
		setNeedsProgressMonitor(true);
	}

	/**
	 * @generated
	 */
	public void addPages() {
		diagramModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DiagramModelFile", getSelection()) { //$NON-NLS-1$

			protected String getExtension() {
				return "<%=genDiagram.getEditorGen().getDiagramFileExtension()%>"; //$NON-NLS-1$
			}
		};
		diagramModelFilePage.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
<%if (standaloneDomainModel) {%>
		diagramModelFilePage.setDescription("Select file that will contain diagram model.");
<%} else {%>
		diagramModelFilePage.setDescription("Select file that will contain diagram and domain models.");
<%}%>
		addPage(diagramModelFilePage);
<%if (standaloneDomainModel) {%>

		domainModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DomainModelFile", getSelection()) { //$NON-NLS-1$

			protected String getExtension() {
				return "<%=genDiagram.getEditorGen().getDomainFileExtension()%>"; //$NON-NLS-1$
			}
		};
		domainModelFilePage.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
		domainModelFilePage.setDescription("Select file that will contain domain model.");
		addPage(domainModelFilePage);
<%}%>
	}

	/**
	 * @generated
	 */
	public boolean performFinish() {
		IRunnableWithProgress op =
<%if (genDiagram.getEditorGen().getApplication() == null) {%>
				new <%=importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation")%>(null) {

			protected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {
<%} else {%>
				new IRunnableWithProgress() {

			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
<%}%>
				diagram = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createDiagram(diagramModelFilePage.getURI(),
<%if (standaloneDomainModel) {%>
						domainModelFilePage.getURI(),
<%}%>
						monitor);
				if (isOpenNewlyCreatedDiagramEditor() && diagram != null) {
					try {
						<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagram(diagram);
					} catch (PartInitException e) {
						ErrorDialog.openError(getContainer().getShell(), "Error opening diagram editor", null, e.getStatus());
					}
				}
			}
		};
		try {
			getContainer().run(false, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			if (e.getTargetException() instanceof CoreException) {
				ErrorDialog.openError(getContainer().getShell(), "Creation Problems", null, ((CoreException) e.getTargetException()).getStatus());
			} else {
				<%=pluginClassName%>.getInstance().logError("Error creating diagram", e.getTargetException()); //$NON-NLS-1$
			}
			return false;
		}
		return diagram != null;
	}
}
<%importManager.emitSortedImports();%>
