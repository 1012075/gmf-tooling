<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument; Palette palette = genDiagram.getPalette();%>
package <%=palette.getPackageName()%>;

<%ImportUtil importManager = new ImportUtil(palette.getPackageName());%>
import org.eclipse.gef.Tool;
import org.eclipse.gef.editparts.ZoomManager;
import org.eclipse.gef.palette.MarqueeToolEntry;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteGroup;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.PaletteSeparator;
import org.eclipse.gef.palette.PanningSelectionToolEntry;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.gef.ui.actions.ZoomInAction;
import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool;
import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectorCreationTool;
import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.resource.ImageDescriptor;
import <%=genDiagram.getProvidersPackageName()%>.ElementTypes;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=palette.getFactoryClassName()%> {

	/**
	 * @generated
	 */
	private final PaletteRoot root = new PaletteRoot();

	/**
	 * @generated
	 */
	private final Diagram diagram;

	/**
	 * @generated
	 */
	private <%=palette.getFactoryClassName()%>(Diagram diagram) {
		this.diagram = diagram;
	}

	/**
	 * @generated
	 */
	public static PaletteRoot createPalette(Diagram diagram) {
		<%=palette.getFactoryClassName()%> factory = new <%=palette.getFactoryClassName()%>(diagram);
		factory.createCommonTools();
<%
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
		factory.create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group();
<%}%>
		return factory.root;
	}

	/**
	 * @generated
	 */
	protected Diagram getDiagram() {
		return diagram;
	}

	/**
	 * @generated
	 */
	private void createCommonTools() {
		PaletteGroup common = new PaletteGroup("Common");
		ToolEntry selectionTool = new PanningSelectionToolEntry();
		common.add(selectionTool);
		common.add(new MarqueeToolEntry());
<%if (palette.isNeedZoomTools()) {%>
		common.add(new ToolEntry("Zoom", null, getZoomToolImage(), getZoomToolImage(), ZoomTool.class) {});
<%}%>
		root.add(common);
		root.setDefaultEntry(selectionTool);
	}

	/**
	 * @generated
	 */
	private ImageDescriptor getZoomToolImage() {
		ZoomInAction action = new ZoomInAction(new ZoomManager(null, null));
		return action.getImageDescriptor();
	}
<%
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>

	/**
	 * @generated
	 */
	private void create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group() {
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitleKey()%>");
<%
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
%>
		create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool(paletteContainer);
<%	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {
%>
		paletteContainer.add(new PaletteSeparator());
<%		}%>
		create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool(paletteContainer);
<%	}%>
		root.add(paletteContainer);
	}
<%
}
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		GenNode genNode = nodeCreationTool.getGenNode(); 
%>

	/**
	 * @generated
	 */
	private void create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool(PaletteContainer paletteContainer) {
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genNode.getUniqueIdentifier()%>);
		paletteContainer.add(new ToolEntry("<%=nodeCreationTool.getTitleKey()%>",
			"<%=nodeCreationTool.getDescriptionKey()%>", image, image) {

			public Tool createTool() {
				Tool tool = new CreationTool(ElementTypes.<%=genNode.getUniqueIdentifier()%>);
				tool.setProperties(getToolProperties());
				return tool;
			}
		});
	}
<%
	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		GenLink genLink = linkCreationTool.getGenLink();
%>

	/**
	 * @generated
	 */
	private void create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool(PaletteContainer paletteContainer) {
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genLink.getUniqueIdentifier()%>);
		paletteContainer.add(new ToolEntry("<%=linkCreationTool.getTitleKey()%>",
			"<%=linkCreationTool.getDescriptionKey()%>", image, image) {

			public Tool createTool() {
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLink.getUniqueIdentifier()%>);
				tool.setProperties(getToolProperties());
				return tool;
			}
		});
	}
<%
	}
}
%>

	/**
	 * @generated
	 */
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
	}
}
<%importManager.emitSortedImports();%>
