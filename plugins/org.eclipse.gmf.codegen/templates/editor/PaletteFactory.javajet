<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.jface.resource.ImageDescriptor;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=palette.getFactoryClassName()%> {

	/**
	 * @generated
	 */
	public void fillPalette(PaletteRoot paletteRoot) {
<%
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>

	/**
	 * @generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitleKey()%>");
<%
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
%>
		paletteContainer.add(<%=nodeCreationTool.getCreateMethodName()%>());
<%	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {
%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%		}%>
		paletteContainer.add(<%=linkCreationTool.getCreateMethodName()%>());
<%	}%>
		return paletteContainer;
	}
<%
}
final String importedElementTypesClassName = importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName());
final String importedPluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNode();
		GenNode firstGenNode = (GenNode) genNodes.get(0);
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=nodeCreationTool.getCreateMethodName()%>() {
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;
		<%if (nodeCreationTool.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.findImageDescriptor("<%=nodeCreationTool.getSmallIconPath()%>");
		<%} else {%>
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenNode.getUniqueIdentifier()%>); 
		<%}%>
		<%if (nodeCreationTool.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.findImageDescriptor("<%=nodeCreationTool.getLargeIconPath()%>");
		<%} else {%>
		largeImage = smallImage;
		<%}%>
		final <%=importManager.getImportedName("java.util.List")%> elementTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();
%>
		elementTypes.add(<%=importedElementTypesClassName%>.<%=nextNode.getUniqueIdentifier()%>);
<%
		}
%>		
		return new ToolEntry("<%=nodeCreationTool.getTitleKey()%>", "<%=nodeCreationTool.getDescriptionKey()%>", smallImage, largeImage) {
			public Tool createTool() {
				Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool")%>(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
	}
<%
	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLink();
		GenLink firstGenLink = (GenLink) genLinks.get(0);
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=linkCreationTool.getCreateMethodName()%>() {
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;
		<%if (linkCreationTool.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=linkCreationTool.getSmallIconPath()%>");
		<%} else {%>
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenLink.getUniqueIdentifier()%>); 
		<%}%>
		<%if (linkCreationTool.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=linkCreationTool.getLargeIconPath()%>");
		<%} else {%>
		largeImage = smallImage;
		<%}%>
		final <%=importManager.getImportedName("java.util.List")%> relationshipTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
		relationshipTypes.add(<%=importedElementTypesClassName%>.<%=nextLink.getUniqueIdentifier()%>);
<%
		}
%>		
		return new ToolEntry("<%=linkCreationTool.getTitleKey()%>", "<%=linkCreationTool.getDescriptionKey()%>", smallImage, largeImage) {

			public Tool createTool() {
				Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool")%>(relationshipTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
	}
<%
	}
}
%>

	/**
	 * @generated
	 */
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
	}
	
}
<%importManager.emitSortedImports();%>
