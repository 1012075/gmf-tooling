<%@ jet package="org.eclipse.gmf.codegen.templates.editor" class="InitDiagramFileActionGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenDiagram genDiagram = (GenDiagram) argument;
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());
final String modelID = editorGen.getModelID();
List genLinks = genDiagram.getLinks();

// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (!nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

boolean generateGetCompartment = false;
%>
package <%=genDiagram.getEditorPackageName()%>;

<%
importManager.addImport("java.io.IOException");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.resources.ResourcesPlugin");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.core.runtime.Path");
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.edit.MRunnable");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.OperationUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.ResourceUtil");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.jface.dialogs.IInputValidator");
importManager.addImport("org.eclipse.jface.dialogs.InputDialog");
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
importManager.addImport("org.eclipse.jface.viewers.ISelection");
importManager.addImport("org.eclipse.jface.viewers.IStructuredSelection");
importManager.addImport("org.eclipse.swt.widgets.Shell");
importManager.addImport("org.eclipse.ui.IObjectActionDelegate");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.ide.IDE");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genDiagram.getInitDiagramFileActionClassName()%> implements IObjectActionDelegate, IInputValidator {

	/**
	 * @generated
	 */
	private IWorkbenchPart myPart;
	
	/**
	 * @generated
	 */
	private IFile mySelection;
    
	/**
	 * @generated
	 */
	private Map myLinkVID2EObjectMap = new HashMap();
	
	/**
	 * @generated
	 */
	private Map myEObject2NodeMap = new HashMap();

    /**
     * @generated
     */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		myPart = targetPart;
	}
	
    /**
     * @generated
     */
	private Shell getShell() {
		return myPart.getSite().getShell();
	}
	
    /**
     * @generated
     */
	public void selectionChanged(IAction action, ISelection selection) {
		mySelection = null;
		action.setEnabled(false);
		if (selection instanceof IStructuredSelection == false || selection.isEmpty()) {
			return;
		}
		mySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();
		action.setEnabled(true);
	}
	
    /**
     * @generated
     */	
	public String isValid(String newText) {
		IStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);
		if (!status.isOK()) {
			return status.getMessage();
		}
		if (mySelection.getParent().getFile(new Path(newText).addFileExtension("editorGen.getDiagramFileExtension()")).exists()) {
			return "File already exists, choose another name";
		}
		return null;
	}
	
    /**
     * @generated
     */
	public void run(IAction action) {
		final InputDialog outputFileNameDialog = new InputDialog(getShell(), "Diagram file name", "Please provide diagram file name", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension("editorGen.getDiagramFileExtension()").lastSegment(), this);
		if (outputFileNameDialog.open() != InputDialog.OK) {
			return;
		}
		final EObject diagramModelObject = load();
		if (diagramModelObject == null) {
			MessageDialog.openError(getShell(), "Error", "Failed to load user model");
			return;
		}
		OperationUtil.runAsUnchecked(new MRunnable() {
			public Object run() {
				EObject diagram = create(diagramModelObject);
				if (diagram == null) {
					MessageDialog.openError(getShell(), "Error", "Failed to create diagram object");
					return null;
				}
				IFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));
				save(destFile.getLocation().toOSString(), diagram);
				try {
					IDE.openEditor(myPart.getSite().getPage(), destFile);
				} catch (PartInitException ex) {
					<%=pluginActivatorClass%>.getInstance().logError("Unable to open editor", ex);
				}
				return null;
			}
		});
	}
	
    /**
     * @generated
     */
	private EObject load() {
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
		Resource resource = resourceSet.getResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(mySelection.getFullPath().toString()), true);
		try {
			resource.load(Collections.EMPTY_MAP);
			return (EObject) resource.getContents().get(0);
		} catch (IOException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelection.getFullPath().toString(), ex);
		}
		return null;
<%} else {%>
		String resourcePath = mySelection.getLocation().toOSString();
		Resource modelResource = ResourceUtil.findResource(resourcePath);
		if (modelResource == null) {
			modelResource = ResourceUtil.create(resourcePath);
		}
		if (!modelResource.isLoaded()) {
			try {
				ResourceUtil.load(modelResource);
			} catch (Exception e) {
				<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + resourcePath, e);
				return null;
			}
		}
		return (EObject) modelResource.getContents().get(0);
<%}%>
	}
	
    /**
     * @generated
     */
	private void save(String filePath, EObject canvas) {
		Resource resource = ResourceUtil.create(filePath, null);
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		resource.getContents().add(((Diagram) canvas).getElement());
<%}%>
		resource.getContents().add(canvas);
		try {
			resource.save(Collections.EMPTY_MAP);
		} catch (IOException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Save operation failed for: " + filePath, ex);
		}
	}
	
    /**
     * @generated
     */
	private EObject create(EObject diagramModel) {
		int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramModel);
		if (diagramVID != <%=genDiagram.getVisualID()%>) {
			return null;
		}
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
%>
		myLinkVID2EObjectMap.put(new Integer(<%=nextLink.getVisualID()%>), new <%=importManager.getImportedName("java.util.LinkedList")%>());
<%
}
%>
		Diagram diagram = ViewService.createDiagram(diagramModel, "<%=modelID%>", <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
		create<%=genDiagram.getUniqueIdentifier()%>Children(diagram, diagramModel);
<%
if (!genClass2Phantom.isEmpty()) {
%>
		Resource resource = diagramModel.eResource();
		int nodeVID;
		for (Iterator it = resource.getContents().iterator(); it.hasNext();) {
			EObject nextResourceObject = (EObject) it.next();
			if (nextResourceObject == diagramModel) {
				continue;
			}
<%
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
%>
			nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextResourceObject, "");
			if (<%=phantomNode.getVisualID()%> == nodeVID) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
				myEObject2NodeMap.put(nextResourceObject, nextNode);
				create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextResourceObject);
				continue;
			}
<%
	}
%>
		}
<%
}
%>		
		createLinks();
		myLinkVID2EObjectMap.clear();
		myEObject2NodeMap.clear();		
	    return diagram;
	}
	
<%
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
%>	

    /**
     * @generated
     */
	private void create<%=nextContainer.getUniqueIdentifier()%>Children(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> viewObject, EObject modelObject) {
<%
	if (nextContainer.getContainedNodes().size() > 0) {
%>
		EObject nextValue;
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode;
		int nodeVID;
<%
	} else if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getCompartments().size() > 0) {
%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode;
<%
	}
	
	for (Iterator children = nextContainer.getContainedNodes().iterator(); children.hasNext();) {
		GenNode nextChild = (GenNode) children.next();
		TypeModelFacet typeModelFacet = nextChild.getModelFacet();
		if (typeModelFacet.isPhantomElement()) {
// Skipping top-leve phantoms
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (childMetaFeature.isListType()) {
%>
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();

<%
		} else {
%>
		nextValue = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>;
<%
		}
%>
		nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue, "");
		if (<%=nextChild.getVisualID()%> == nodeVID) {
			nextNode = ViewService.createNode(viewObject, nextValue, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextValue, nextNode);
			create<%=nextChild.getUniqueIdentifier()%>Children(nextNode, nextValue);
		}
<%
		if (childMetaFeature.isListType()) {
%>
		}
<%
		}
	}
	
	if (nextContainer instanceof GenNode) {
		GenNode nextNode = (GenNode) nextContainer;
		for (Iterator compartments = nextNode.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
			generateGetCompartment = true;
%>
		nextNode = getCompartment(viewObject, "<%=nextCompartment.getTitle()%>");
		if (nextNode != null) {
			create<%=nextCompartment.getUniqueIdentifier()%>Children(nextNode, modelObject);
		}
<%
		}
	}
%>
		storeLinks(modelObject, viewObject.getDiagram());
	}
<%
}

if (generateGetCompartment) {
%>
	
    /**
     * @generated
     */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getCompartment(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> node, String name) {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = node.getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> && name.equals(nextView.getType())) {
				return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) nextView;
			}
		}
		return null;
	}
<%
}
%>

	/**
	 *@generated
	 */
	private void storeLinks(EObject container, Diagram diagram) {
		EClass containerMetaclass = container.eClass();
		storeFeatureModelFacetLinks(container, containerMetaclass, diagram);
		storeTypeModelFacetLinks(container, containerMetaclass);
	}
	
	/**
     * @generated
     */
	private void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {	
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
%>		
		if (-1 != containerMetaclass.getFeatureID(<%=importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childMetaFeature.getFeatureAccessorName()%>())) {
			Object featureValue = <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>;
<%
		if (childMetaFeature.isListType()) {
%>		
			for (<%=importManager.getImportedName("java.util.Iterator")%> values = ((<%=importManager.getImportedName("java.util.Collection")%>) featureValue).iterator(); values.hasNext();) {
				EObject nextValue = ((EObject) values.next());
<%
		} else {
%>
			EObject nextValue = (EObject) featureValue;
<%		
		}
%>
			int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(nextValue);
			if (<%=nextLink.getVisualID()%> == linkVID) {
				((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>))).add(nextValue);
			}
<%
		if (childMetaFeature.isListType()) {
%>
			}
<%
		}
%>
		}
<%
	}
}
%>
	}

	/**
	 *@generated
	 */
	private void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();
%>
		if (-1 != containerMetaclass.getFeatureID(<%=importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>())) {
			((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>))).add(container);
<%
		if (genFeature.isContains()) {
// Processing phantom elements
// TODO: separate this code into incliuded file together with part of create???Children() operation
			GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
			if (phantomNode != null) {
				if (genFeature.isListType()) {
%>
			for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("container", genFeature, true, importManager)%>.iterator(); values.hasNext();) {
				EObject nextValue = (EObject) values.next();
<%
				} else {
%>
			EObject nextValue = <%=getFeatureValueGetter("container", genFeature, true, importManager)%>;
<%
				}
%>
			int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextValue, "");
			if (<%=phantomNode.getVisualID()%> == nodeVID) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextValue, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
				myEObject2NodeMap.put(nextValue, nextNode);
				create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextValue);
			}
<%
				if (genFeature.isListType()) {
%>
			}
<%
				}
			}
		}
%>
		}
<%
	}
}
%>
	}

	/**
     * @generated
     */
	private void createLinks() {
<%
if (genLinks.size() > 0) {
%>
		<%=importManager.getImportedName("java.util.Collection")%> linkElements;
<%
}

for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	GenFeature domainLinkTargetGenFeature;
%>
		linkElements = (<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>));
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = linkElements.iterator(); it.hasNext();) {
			EObject linkElement = (EObject) it.next();
<%	
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		domainLinkTargetGenFeature = typeLinkModelFacet.getTargetMetaFeature();
		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
%>
			Object srcResult = <%=getFeatureValueGetter("linkElement", typeLinkModelFacet.getSourceMetaFeature(), true, importManager)%>;
			if (srcResult instanceof EObject == false) {
				continue;
			}
			EObject src = (EObject) srcResult;
<%
		} else {
%>
			EObject src = linkElement.eContainer();
<%
		}
	} else {
		domainLinkTargetGenFeature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
%>
			EObject src = linkElement;
<%	
	}
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> srcNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(src);
			if (srcNode == null) {
				continue;
			}
			Object structuralFeatureResult = <%=getFeatureValueGetter("linkElement", domainLinkTargetGenFeature, true, importManager)%>;
<%
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
			if (structuralFeatureResult instanceof EObject == false) {
				continue;
			}
			EObject dst = (EObject) structuralFeatureResult;
<%
	} else {
		if (domainLinkTargetGenFeature.isListType()) {
%>
			if (structuralFeatureResult instanceof <%=importManager.getImportedName("java.util.Collection")%> == false) {
				continue;
			}
			for (<%=importManager.getImportedName("java.util.Iterator")%> destinations = ((<%=importManager.getImportedName("java.util.Collection")%>) structuralFeatureResult).iterator(); destinations.hasNext();) {
				EObject dst = (EObject) destinations.next();
<%	
		} else {
%>
			if (structuralFeatureResult instanceof EObject == false) {
				continue;
			}
			EObject dst = (EObject) structuralFeatureResult;
<%
		}
	}
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> dstNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(dst);
			if (dstNode != null) {
<%
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
				ViewService.createEdge(srcNode, dstNode, linkElement, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			}
<%
	} else {
%>
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) ViewService.getInstance().createEdge(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
						public Object getAdapter(Class adapter) {
							if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
								return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>;
							}
							return null;
						}
					}, srcNode.getDiagram(), "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
					if (edge != null) {
						edge.setSource(srcNode);
						edge.setTarget(dstNode);
					}
<%
		if (domainLinkTargetGenFeature.isListType()) {
%>
				}
<%
}
%>
			}
<%	
	}
%>
		}
<%
}
%>
	}
	
}
<%importManager.emitSortedImports();%>
