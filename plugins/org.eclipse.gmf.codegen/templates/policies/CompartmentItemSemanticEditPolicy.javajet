<%@ jet package="org.eclipse.gmf.codegen.templates.policies" class="CompartmentItemSemanticEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
/*
	This template should be called only for compartments located in non-design nodes
	(genCompartment.getNode().getModelFacet() != null) because *ItemSemanticEditPolicy 
	responsible for dealing with semantic model elements and meaningless (should not 
	be generated) for compartments located inside pure design nodes.
*/

final GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genCompartment.getDiagram();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genCompartment.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%
// TODO: do not generate this edit policy for empty compartments.
if (genCompartment.getChildNodes().size() > 0) {
	Collection<GenChildNode> childNodes = genCompartment.getChildNodes();
%>

<%@ include file="childContainerCreateCommand.jetinc"%>
<%}%>
}
<%importManager.emitSortedImports();%>
