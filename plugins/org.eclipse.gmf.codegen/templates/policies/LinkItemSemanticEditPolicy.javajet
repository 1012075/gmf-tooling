<%@ jet package="org.eclipse.gmf.codegen.templates.policies" class="LinkItemSemanticEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenLink genLink = (GenLink) ((Object[]) argument)[0];
GenDiagram genDiagram = genLink.getDiagram();
%>
<%@ include file="../copyright4java.jetinc"%>
package <%=genDiagram.getEditPoliciesPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
import org.eclipse.gef.commands.Command;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genLink.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%if (genLink.getModelFacet() instanceof FeatureModelFacet) {%>

	/**
	 * @generated
	 */
	protected Command getDestroyReferenceCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest")%> req) {
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand")%>(req)<%
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLink.getModelFacet();
	if (modelFacet.getMetaFeature().isContains()) {
// Processing "phantom" objects
%> {
		
			protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> doExecuteWithResult(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> referencedObject = getReferencedObject();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = referencedObject.eResource();
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> result = super.doExecuteWithResult(progressMonitor, info);
				resource.getContents().add(referencedObject);
				return result;
			}
		}<%
	}
%>);
	}
<%} else if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {%>

	/**
	 * @generated
	 */
	protected Command getDestroyElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest")%> req) {
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand")%>(req));
	}
<%}%>
}
<%importManager.emitSortedImports();%>
