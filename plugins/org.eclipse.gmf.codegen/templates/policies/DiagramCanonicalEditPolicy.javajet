<%@ jet package="org.eclipse.gmf.codegen.templates.policies" class="DiagramCanonicalEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
	skeleton="../common.skeleton"%>
<%
GenDiagram genDiagram = (GenDiagram) argument;
%>
package <%=genDiagram.getEditPoliciesPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.emf.ecore.EObject;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getCanonicalEditPolicyClassName()%> extends CanonicalConnectionEditPolicy {
<%
String modelElementInterfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
{
	Collection genNodes = genDiagram.getNodes();
%>
<%@ include file="getSemanticChildrenList.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	protected List getSemanticConnectionsList() {
		Diagram diagram = (Diagram) getHost().getModel();
		<%=modelElementInterfaceName%> modelElement = (<%=modelElementInterfaceName%>) diagram.getElement();
		List result = new LinkedList();
		for (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {
			EObject nextDiagramElement = (EObject) diagramElements.next();
			for (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {
				EObject nextChild = (EObject) childElements.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {
					result.add(nextChild);
				}
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	protected EObject getSourceElement(EObject relationship) {
		return relationship.eContainer();
	}

	/**
	 * @generated
	 */
	protected EObject getTargetElement(EObject relationship) {
		int vID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(relationship);
		switch (vID) {
<%
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextGenLink = (GenLink) it.next();
	if (nextGenLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkFacet = (TypeLinkModelFacet) nextGenLink.getModelFacet(); 
		GenFeature nextLinkTargetFeature = typeLinkFacet.getTargetMetaFeature();
%>
		case <%=nextGenLink.getVisualID()%>:
			return <%=getFeatureValueGetter("relationship", nextLinkTargetFeature, true, importManager)%><%=nextLinkTargetFeature.isListType() ? ".get(0)" : ""%>;
<%
	}
}
%>
		}
		return null;
	}

	/**
	 * For now we are skipping links which was generated based on "GenLinkReferenceOnly" classes
	 * since they do not handle any domain model objects inside, so we can not process them using
	 * CanonicalConnectionEditPolicy class
	 *
	 * @generated
	 */
	protected boolean shouldIncludeConnection(Edge connector, List children) {
		return super.shouldIncludeConnection(connector, children) && connector.getElement() != null;
	}
}
<%importManager.emitSortedImports();%>
