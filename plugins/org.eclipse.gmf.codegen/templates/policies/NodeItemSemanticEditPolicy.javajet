<%@ jet package="org.eclipse.gmf.codegen.templates.policies" class="NodeItemSemanticEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
	skeleton="../common.skeleton"%>
<%
GenNode genNode = (GenNode) argument;
GenDiagram genDiagram = genNode.getDiagram();
%>
package <%=genDiagram.getEditPoliciesPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genNode.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%
if (genNode.getChildNodes().size() > 0) {
	GenChildContainer childContainer = genNode;
	GenNode containerNode = genNode;
%>

<%@ include file="childContainerCreateCommand.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return getMSLWrapper(new MSLDestroyElementCommand(req));
	}
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
final String OUTGOING_TOKEN = "Outgoing";
final String INCOMING_TOKEN = "Incoming";
%>

	/**
	 * @generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	//GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
	//String constraintsInstance = linkConstraints != null ? importManager.getImportedName(genDiagram.getLinkCreationConstraintsQualifiedClassName())+"."+linkConstraints.getConstraintsInstanceFieldName() : null;
	
	if (!genLink.isOutgoingCreationAllowed() && !genLink.isIncomingCreationAllowed()) {
		continue;
	}
	String namePart = null;
	boolean outgoing = true;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenClass outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = OUTGOING_TOKEN + modelFacet.getMetaClass().getName();
		} else if (modelFacet.getTargetMetaFeature().getTypeGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = INCOMING_TOKEN + modelFacet.getMetaClass().getName();
			outgoing = false;
		}
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = OUTGOING_TOKEN + metaFeature.getFeatureAccessorName();
		} else if (metaFeature.getTypeGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = INCOMING_TOKEN + metaFeature.getFeatureAccessorName();
			outgoing = false;
		}
	}
	if (namePart != null) {
		namePart += genLink.getVisualID();
%>
		if (<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%> == req.getElementType()) {
<%		if (genLink.isOutgoingCreationAllowed() && genLink.isIncomingCreationAllowed()) {%>
			return req.getTarget() == null ? getCreateStart<%=namePart%>Command(req) : getCreateComplete<%=namePart%>Command(req);
<%
		} else {
			if (outgoing ? genLink.isOutgoingCreationAllowed() : genLink.isIncomingCreationAllowed()) {
%>
			return req.getTarget() == null ? getCreateStart<%=namePart%>Command(req) : null;
<%			} else {%>
			return req.getTarget() == null ? null : getCreateComplete<%=namePart%>Command(req);
<%
			}
		}
%>
		}
<%
	}
}
%>
		return super.getCreateRelationshipCommand(req);
	}
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
	String constraintsInstance = linkConstraints != null ? importManager.getImportedName(genDiagram.getLinkCreationConstraintsQualifiedClassName())+"."+linkConstraints.getConstraintsInstanceFieldName() : null;

	String namePart = null;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
//
//
//
////////////////////////
// Type Link Commands //
////////////////////////
//
//
//
		boolean outgoing = true;
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenClass outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		GenClass incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		int upperContainmentBound = containmentFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childFeature.getEcoreFeature().getUpperBound();
		boolean processChildFeature = !childFeature.isDerived() && !childFeature.equals(containmentFeature);
		boolean checkChildFeatureUpperBound = !childFeature.equals(containmentFeature) && upperChildBound > 0;
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			outgoing = true;
			namePart = OUTGOING_TOKEN + modelFacet.getMetaClass().getName() + genLink.getVisualID();
			if (genLink.isOutgoingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that containment feature is not set / has capacity for the new element %>
<%
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
					if (modelFacet.getSourceMetaFeature() == null) {
%>
		<%=containerClassName%> element = (<%=containerClassName%>) getSemanticElement();
<%					} else {%>
		<%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(getSemanticElement(),
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
				}
%>
<%				if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%				} // end of link constraints %>
<% // create always executable command %>
		return new Command() {
		};
	}
<%
			}
			if (genLink.isIncomingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
				if (modelFacet.getSourceMetaFeature() == null) {
%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getSemanticElement();
<%				} else {%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(getSemanticElement(),
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%				}%>
<% // check that containment feature is not set / has capacity for the new element %>
<%
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
				}
%>
<% // create semantic command %>
		if (req.getContainmentFeature() == null) {
			req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>());
		}
		
<%				if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%				} // end of link constraints %>				
		return getMSLWrapper(new Create<%=namePart%>Command(req) {

			/**
			 * @generated
			 */
			protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
				return element;
			}
		});
	}

	/**
	 * @generated
	 */
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateRelationshipCommand")%> {

		/**
		 * @generated
		 */
		public Create<%=namePart%>Command(CreateRelationshipRequest req) {
			super(req);
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
		};

		/**
		 * @generated
		 */
		protected void setElementToEdit(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
			throw new UnsupportedOperationException();
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
<%				String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getTargetMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getSource());
<%				if (modelFacet.getSourceMetaFeature() != null) {%>
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getSourceMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) getTarget());
<%
				}
				if (processChildFeature) {
%>
				<%=containerClassName%> container = (<%=containerClassName%>) getElementToEdit();
				if (container != null) {
<%					if (childFeature.isListType()) {%>
					<%=importManager.getImportedName("java.util.Collection")%> featureValues = container.<%=childFeature.getGetAccessor()%>();
					featureValues.add(newElement);
<%					} else {%>
				 	<%=getFeatureValueSetterPrefix("container", childFeature, false, importManager)%>newElement);
<%					}%>
				}
<%
				}
				if (modelFacet.getModelElementInitializer() != null) { 
%>
				<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
<%				}%>
			}
			return newElement;
		}
	}
<%
			}
		} else if (incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			outgoing = false;
			namePart = INCOMING_TOKEN + modelFacet.getMetaClass().getName() + genLink.getVisualID();
			if (genLink.isIncomingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%			} // end of link constraints %>	
<% // no feasible restrictions here %>
		return new Command() {
		};
	}
<%
			}
			if (genLink.isOutgoingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
				if (modelFacet.getSourceMetaFeature() == null) {
%>
		final <%=containerClassName%> element = (<%=containerClassName%>) req.getSource();
<%				} else {%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(req.getSource(),
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%				}%>
<% // check that containment feature is not set / has capacity for the new element %>
<%
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%						} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%						}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
					}
				}
%>
<%				if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%				} // end of constraints %>		
<% // create semantic command %>
		if (req.getContainmentFeature() == null) {
			req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
		}
		return getMSLWrapper(new Create<%=namePart%>Command(req) {

			/**
			 * @generated
			 */
			protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
				return element;
			}
		});
	}

	/**
	 * @generated
	 */
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateRelationshipCommand")%> {

		/**
		 * @generated
		 */
		public Create<%=namePart%>Command(CreateRelationshipRequest req) {
			super(req);
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
		};

		/**
		 * @generated
		 */
		protected void setElementToEdit(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
			throw new UnsupportedOperationException();
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
<%				String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getTargetMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getTarget());
<%				if (modelFacet.getSourceMetaFeature() != null) {%>
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getSourceMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) getSource());
<%
				}
				if (processChildFeature) {
%>
				<%=containerClassName%> container = (<%=containerClassName%>) getElementToEdit();
				if (container != null) {
<%					if (childFeature.isListType()) {%>
					<%=importManager.getImportedName("java.util.Collection")%> featureValues = container.<%=childFeature.getGetAccessor()%>();
					featureValues.add(newElement);
<%					} else {%>
				 	<%=getFeatureValueSetterPrefix("container", childFeature, false, importManager)%>newElement);
<%					}%>
				}
<%
				}
				if (modelFacet.getModelElementInitializer() != null) { 
%>
				<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
<%				}%>
			}
			return newElement;
		}
	}
<%
			}
		}
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
//
//
//
////////////////////////
// Feat Link Commands //
////////////////////////
//
//
//
		boolean outgoing = true;
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		int upperBound = metaFeature.getEcoreFeature().getUpperBound();
		GenClass outgoingClass = metaFeature.getGenClass();
		GenClass incomingClass = metaFeature.getTypeGenClass();
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			outgoing = true;
			namePart = OUTGOING_TOKEN + metaFeature.getFeatureAccessorName() + genLink.getVisualID();
			if (genLink.isOutgoingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that feature is not set / has capacity for the new value %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
<%			if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%			} // end of link constraints %>

<% // create always executable command %>
		return new Command() {
		};
	}
<%
			}
			if (genLink.isIncomingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<% // check that feature is not set / has capacity for the new value / is unique %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>
<%					if (metaFeature.getEcoreFeature().isUnique()) {%>
			|| <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getSource())
<%					}%>
				) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			} else if (metaFeature.getEcoreFeature().isUnique()) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getSource())) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
<%			if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%			} // end of constraints %>		
<% // create semantic command %>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%> setReq = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%>(req.getTarget(),
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getSource());
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand")%>(setReq));
	}
<%
			}
		} else if (incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			outgoing = false;
			namePart = INCOMING_TOKEN + metaFeature.getFeatureAccessorName() + genLink.getVisualID();
			if (genLink.isIncomingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			if(genLink.getCreationConstraints() != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%			} // end of link constraints %>
<% // no feasible restrictions here %>
		return new Command() {
		};
	}
<%
			}
			if (genLink.isOutgoingCreationAllowed()) {
%>

	/**
	 * @generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<% // check that feature is not set / has capacity for the new value / is unique %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) req.getSource();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>
<%					if (metaFeature.getEcoreFeature().isUnique()) {%>
			|| <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getTarget())
<%					}%>
				) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			} else if (metaFeature.getEcoreFeature().isUnique()) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) req.getSource();
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getTarget())) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
<%			if(linkConstraints != null) { %>
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<%			} // end of constraints %>
<% // create semantic command %>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%> setReq = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%>(req.getSource(),
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getTarget());
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand")%>(setReq));
	}
<%
			}
		}
	}
}
%>
}
<%importManager.emitSortedImports();%>
