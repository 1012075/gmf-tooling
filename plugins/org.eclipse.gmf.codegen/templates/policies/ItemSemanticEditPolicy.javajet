<%@ jet package="org.eclipse.gmf.codegen.templates.policies" class="ItemSemanticEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.*"
	skeleton="../common.skeleton" %>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
final String javaExprContainer = "JavaConstraints";
final String oppositeEndVarName = "oppositeEnd";
importManager.registerInnerClass(javaExprContainer);
importManager.registerInnerClass(genDiagram.getLinkCreationConstraintsClassName());
%>
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getBaseItemSemanticEditPolicyClassName()%> extends SemanticEditPolicy {

	/**
	 * @generated
	 */
	protected Command getSemanticCommand(IEditCommandRequest request) {
		IEditCommandRequest completedRequest = completeRequest(request);
		Object editHelperContext = completedRequest.getEditHelperContext();
		if (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {
			// no semantic commands are provided for pure design elements
			return null;
		}
		if (editHelperContext == null) {
			editHelperContext = ViewUtil.resolveSemanticElement((View) getHost().getModel());
		}
		IElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$ <% /*
			< % = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()) % >.getInstance().logInfo("Failed to get element type for " + editHelperContext); / / $NON-NLS-1$ */ %>
			elementType = null;
		}
		Command epCommand = getSemanticCommandSwitch(completedRequest);
		if (epCommand != null) {
			ICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand() : new CommandProxy(epCommand);
			completedRequest.setParameter(<%=importManager.getImportedName(genDiagram.getBaseEditHelperQualifiedClassName())%>.EDIT_POLICY_COMMAND, command);
		}
		Command ehCommand = null;
		if (elementType != null) {
			ICommand command = elementType.getEditCommand(completedRequest);
			if (command != null) {
				if (!(command instanceof CompositeTransactionalCommand)) {
					TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
					command = new CompositeTransactionalCommand(editingDomain, null).compose(command);
				}
				ehCommand = new ICommandProxy(command);
			}
		}
		boolean shouldProceed = true;
		if (completedRequest instanceof DestroyRequest) {
			shouldProceed = shouldProceed((DestroyRequest) completedRequest);
		}
		if (shouldProceed) {
			if (completedRequest instanceof DestroyRequest) {
				TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
				Command deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));
				ehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);
			}
			return ehCommand;
		}
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getSemanticCommandSwitch(IEditCommandRequest req) {
		if (req instanceof CreateRelationshipRequest) {
			return getCreateRelationshipCommand((CreateRelationshipRequest) req);
		} else if (req instanceof CreateElementRequest) {
			return getCreateCommand((CreateElementRequest) req);
		} else if (req instanceof ConfigureRequest) {
			return getConfigureCommand((ConfigureRequest) req);
		} else if (req instanceof DestroyElementRequest) {
			return getDestroyElementCommand((DestroyElementRequest) req);
		} else if (req instanceof DestroyReferenceRequest) {
			return getDestroyReferenceCommand((DestroyReferenceRequest) req);
		} else if (req instanceof DuplicateElementsRequest) {
			return getDuplicateCommand((DuplicateElementsRequest) req);
		} else if (req instanceof GetEditContextRequest) {
			return getEditContextCommand((GetEditContextRequest) req);
		} else if (req instanceof MoveRequest) {
			return getMoveCommand((MoveRequest) req);
		} else if (req instanceof ReorientReferenceRelationshipRequest) {
			return getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);
		} else if (req instanceof ReorientRelationshipRequest) {
			return getReorientRelationshipCommand((ReorientRelationshipRequest) req);
		} else if (req instanceof SetRequest) {
			return getSetCommand((SetRequest) req);
		}
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getConfigureCommand(ConfigureRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getSetCommand(SetRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getEditContextCommand(GetEditContextRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getMoveCommand(MoveRequest req) {
		return null;
	}

	/**
	 * @generated
	 */
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @generated
	 */
	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @generated
	 */
	protected Command getMSLWrapper(ICommand cmd) {
		return new ICommandProxy(cmd);
	}

	/**
	 * @generated
	 */
	protected EObject getSemanticElement() {
		return ViewUtil.resolveSemanticElement((View) getHost().getModel());
	}

	/**
	 * Finds container element for the new relationship of the specified type.
	 * Default implementation goes up by containment hierarchy starting from
	 * the specified element and returns the first element that is instance of
	 * the specified container class.
	 * 
	 * @generated
	 */
	protected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {
		for (; element != null; element = element.eContainer()) {
			if (containerClass.isSuperTypeOf(element.eClass())) {
				return element;
			}
		}
		return null;
	}
	
	/**
	 * @generated 
	 */
	protected static class <%=genDiagram.getLinkCreationConstraintsClassName()%> {
<%final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
boolean hasJavaConstraints = false;
if (expressionProviders != null) {%>

		/**
		 * @generated 
		 */	
		private static final String OPPOSITE_END_VAR = "<%=oppositeEndVarName%>"; //$NON-NLS-1$
<%	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLink nextLink = (GenLink) it.next();
		GenLinkConstraints linkConstraints = nextLink.getCreationConstraints();
		if (linkConstraints == null || !linkConstraints.isValid()) {
			continue;
		}
		String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
		String __javaOperationContainer = javaExprContainer;
		String __outEnvVarName = "env";
		if (linkConstraints.getSourceEnd() != null) {
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getSourceEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getTargetEndContextClass());%>
		
		/**
		 * @generated 
		 */
		private static <%=importedAbstractExprCls%> <%=nextLink.getUniqueIdentifier()%>_SourceExpression;
		
		/**
		 * @generated 
		 */
		static {<%@ include file="../expressions/initEnv.jetinc"%>
			<%=nextLink.getUniqueIdentifier()%>_SourceExpression = <%@ include file="../expressions/getExpression.jetinc"%>;
		}
<%		}
		if (linkConstraints.getTargetEnd() != null) {
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getTargetEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getTargetEnd();			
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getSourceEndContextClass());%>
		
		/**
		 * @generated 
		 */
		private static <%=importedAbstractExprCls%> <%=nextLink.getUniqueIdentifier()%>_TargetExpression;

		/**
		 * @generated 
		 */
		static {<%@ include file="../expressions/initEnv.jetinc"%>
			<%=nextLink.getUniqueIdentifier()%>_TargetExpression = <%@ include file="../expressions/getExpression.jetinc"%>;
		}
<%		}
	}
}
	
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	boolean separateContainer;
	GenClass outgoingClass;
	GenClass incomingClass;
	GenClass containerClass = null;
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		separateContainer = sourceFeature != null;
		if (separateContainer) {
			outgoingClass = sourceFeature.getTypeGenClass();
			containerClass = containmentFeature.getGenClass();
		} else {
			outgoingClass = containmentFeature.getGenClass();
		}
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
	} else if (nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		incomingClass = metaFeature.getTypeGenClass();
		separateContainer = false;
	} else {
		continue;
	}%>
	
		/**
		 * @generated 
		 */
		public static boolean canCreate<%=nextLink.getUniqueIdentifier()%>(<%if (separateContainer) {%><%=importManager.getImportedName(containerClass.getQualifiedInterfaceName())%> container, <%}%><%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%> source, <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%> target) {
<%	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();

		int upperContainmentBound = containmentFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childFeature.getEcoreFeature().getUpperBound();
		boolean checkChildFeatureUpperBound = !childFeature.equals(containmentFeature) && upperChildBound > 0;
		String containerVarName = separateContainer ? "container" : "source";
		if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {%>
			if (<%=containerVarName%> != null) {
<%/* check that containment feature is not set / has capacity for the new element */ 
			if (upperContainmentBound > 0) {
				if (upperContainmentBound == 1) {%>
				if (<%=getFeatureValueGetter(containerVarName, containmentFeature, false, importManager)%> != null) {
<%				} else {%>
				if (<%=getFeatureValueGetter(containerVarName, containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%				}%>
					return false;
				}
<%			}
			if (checkChildFeatureUpperBound) {
				if (upperChildBound == 1) {%>
				if (<%=getFeatureValueGetter(containerVarName, childFeature, false, importManager)%> != null) {
<%				} else {%>
				if (<%=getFeatureValueGetter(containerVarName, childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%				}%>
					return false;
				}
<%			}%>
			}
<%		}		
	} else { /* nextLink.getModelFacet() instanceof FeatureLinkModelFacet */
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		int upperBound = metaFeature.getEcoreFeature().getUpperBound();%>
			if (source != null) {
<% /* check that feature is not set / has capacity for the new value / is unique */
		if (upperBound > 0) {
			if (upperBound == 1) {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%> != null) {
<%			} else {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.size() >= <%=upperBound%> || <%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.contains(target)) {
<%			}%>
					return false;
				}
<%		} else {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.contains(target)) {
					return false;
				}
<%		}%>
			}
<%	}
	
	if (expressionProviders != null && nextLink.getCreationConstraints() != null && nextLink.getCreationConstraints().isValid()) {
		GenLinkConstraints constraints = nextLink.getCreationConstraints();
		if (constraints.getSourceEnd() != null) {%>
			if (!evaluate(<%=nextLink.getUniqueIdentifier()%>_SourceExpression, source, target, false)) {
				return false;
			}
<%		}
		if (constraints.getTargetEnd() != null) {%>
			if (!evaluate(<%=nextLink.getUniqueIdentifier()%>_TargetExpression, target, source, true)) {
				return false;
			}
<%		}
	}%>
			return true;
		}
<%}
	
if (expressionProviders != null) {
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());%>
	
		/**
		 * @generated 
		 */
		private static boolean evaluate(<%=importedAbstractExprCls%> constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
			if (sourceEnd == null) {
				return true;
			}
			<%=importManager.getImportedName("java.util.Map")%> evalEnv = <%=importManager.getImportedName("java.util.Collections")%>.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
			try {
				Object val = constraint.evaluate(sourceEnd, evalEnv);
				return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
			} catch(Exception e) {	
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
				return false;
			}
		}
<%}
	
if(expressionProviders != null && hasJavaConstraints) {
%>		
		/**
		 * @generated
		 */
		private static class <%=javaExprContainer%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
		String __genExprResultType = "java.lang.Boolean";
		Map __exprEnvVariables = new java.util.HashMap();
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {				
			__exprEnvVariables.put(oppositeEndVarName, targetContext);
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
		__genValueExpression = linkConstraints.getTargetEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {		
			__genExprContext = targetContext;
			__exprEnvVariables.put(oppositeEndVarName, srcContext);
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
	} /*java constraints iteration*/
%>
		} // <%=javaExprContainer%>
<%
} /* end of hasJavaConstraints */
%>	
	}

}	
<%importManager.emitSortedImports();%>