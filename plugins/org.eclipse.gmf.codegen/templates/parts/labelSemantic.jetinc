<%
{
	GenPackage genPackage = genDiagram.getDomainMetaModel();
	String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
	LabelModelFacet modelFacet = genLabel.getModelFacet();
%>

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> getParser() {
		if (parser == null) {
<%
	String parserClassName;
	if (modelFacet instanceof FeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
		String featureName = ((FeatureModelFacet) modelFacet).getMetaFeature().getName();
%>
			parser = new <%=parserClassName%>(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=accessorName%>().getEStructuralFeature("<%=featureName%>"));
<%
	} else if (modelFacet instanceof CompositeFeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeaturesParserQualifiedClassName());
		java.util.List features = ((CompositeFeatureModelFacet) modelFacet).getMetaFeatures();
%>
			<%=importManager.getImportedName("java.util.List")%> features = new <%=importManager.getImportedName("java.util.ArrayList")%>(<%=features.size()%>);
<%
		for (java.util.Iterator it = features.iterator(); it.hasNext(); ) {
			String featureName = ((GenFeature) it.next()).getName();
%>
			features.add(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=accessorName%>().getEStructuralFeature("<%=featureName%>"));
<%		}%>
			parser = new <%=parserClassName%>(features);
<%
	} else {
		throw new IllegalArgumentException();
	}
%>			
<%	if (modelFacet.getViewPattern() != null && modelFacet.getViewPattern().length() != 0) {%>
			((<%=parserClassName%>) parser).setViewPattern("<%=modelFacet.getViewPattern()%>");
<%
	}
	if (modelFacet.getEditPattern() != null && modelFacet.getEditPattern().length() != 0) {
%>
			((<%=parserClassName%>) parser).setEditPattern("<%=modelFacet.getEditPattern()%>");
<%	}%>
		}
		return parser;
	}
<%	if (genLabel.isReadOnly()) {%>

	/**
	 * @generated
	 */
	protected boolean isEditable() {
		return false;
	}
<%
	}
}
%>
