<%@ jet package="org.eclipse.gmf.codegen.templates.parts" class="NodeEditPartGenerator"
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.* java.util.*"%>
<%
GenNode genNode = (GenNode) argument;
GenDiagram genDiagram = genNode.getDiagram();
%>
package <%=genDiagram.getEditPartsPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.gef.EditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genNode.getEditPartClassName()%> extends ShapeNodeEditPart {

	/**
	 * @generated
	 */
	private IFigure contentPane;

	/**
	 * @generated
	 */
	public <%=genNode.getEditPartClassName()%>(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName())%>());
<%
if (genNode.getChildNodes().size() > 0) {
%>		
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy")%>());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy")%>());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new <%=genNode.getEditPartClassName()%>CanonicalEditPolicy());
<%
}
%>
	}

	/**
	 * @generated
	 */
	protected NodeFigure createNodeFigure() {
<%
String figureClassName;
if (genNode.getViewmap() instanceof FigureViewmap) {
	figureClassName = importManager.getImportedName(((FigureViewmap) genNode.getViewmap()).getFigureQualifiedClassName());
} else {
	figureClassName = importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure");
}
%> 
		<%=figureClassName%> node = new <%=figureClassName%>() {

			protected void paintFigure(Graphics graphics) {
				super.paintFigure(graphics);
				graphics.fillRectangle(getClientArea());
				graphics.drawRectangle(getClientArea());
			}
		};
<%
for (Iterator it = genNode.getViewmap().getAttributes().iterator(); it.hasNext();) {
	Attributes next = (Attributes) it.next();
	if (next instanceof ShapeAttributes) {
		String figureVarName = "node";
		ShapeAttributes attrs = (ShapeAttributes) next;
%>
<%@ include file="shapeattrs.jetinc" %>
<%	}
	if (next instanceof DefaultSizeAttributes) {
		DefaultSizeAttributes attrs = (DefaultSizeAttributes) next;
%>
		node.setDefaultSize(MapModeUtil.getMapMode().DPtoLP(<%=attrs.getWidth()%>), MapModeUtil.getMapMode().DPtoLP(<%=attrs.getHeight()%>));
<%
	}
}
%>
		node.setLayoutManager(new StackLayout());
		node.add(contentPane = createContentPane());
		return node;
	}

	/**
	 * @generated
	 */
	protected IFigure createContentPane() {
		IFigure plate = new Figure();
		ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
		layout.setSpacing(MapModeUtil.getMapMode().DPtoLP(5));
		plate.setLayoutManager(layout);
		return plate;
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}
<%
if (!genNode.getLabels().isEmpty()) {
	GenNodeLabel primaryLabel = (GenNodeLabel) genNode.getLabels().get(0);
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
%>

	/**
	 * @generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(<%=semanticHintsClassName%>.Labels.<%=AccessUtil.getLabelTextId(primaryLabel)%>);
	}
	
<%
}

if (genNode.getChildNodes().size() > 0) {
	GenChildContainer childContainer = genNode;
	GenNode containerNode = genNode;
%>
<%@ include file="childContainerCanonicalEditPolicy.jetinc" %>	
<%
}
%>
}
<%importManager.emitSortedImports();%>
