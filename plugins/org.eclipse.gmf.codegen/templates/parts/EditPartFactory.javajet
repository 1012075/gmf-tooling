<%@ jet package="org.eclipse.gmf.codegen.templates.parts" class="EditPartFactoryGenerator" 
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getEditPartsPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getEditPartFactoryClassName()%> implements EditPartFactory {

<%@ include file="../editor/getVisualID.jetinc" %>
<%
List genLinks = genDiagram.getLinks();
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
%>

	/**
	 * @generated
	 */
	public EditPart createEditPart(EditPart context, Object model) {
		if (model instanceof View) {
			View view = (View) model;
			if (!"<%=genDiagram.getEMFGenModel().getModelName()%>".equals(view.getDiagram().getType())) {
				return null;
			}
			
			int viewVisualID = getVisualID(view);
			switch (viewVisualID) {
			case <%=genDiagram.getVisualID()%>:
				return new <%=genDiagram.getEditPartClassName()%>(view);
<%
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer container = (GenChildContainer) containers.next();
%>
		case <%=container.getVisualID()%>:
			 return new <%=container.getEditPartClassName()%>(view);
<%
	if (container instanceof GenChildNode ? !((GenChildNode) container).isListContainerEntry() : container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
			if (label instanceof ExternalLabel) {
// [++] Just to remove unnecessary imports we are doing this import insode a loop
				String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
// [--]
				String labelViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
%>
		case <%=label.getVisualID()%>:
			if (<%=labelViewId%>.equals(view.getType())) {
				return new <%=label.getEditPartClassName()%>(view);
			} else {
				return new <%=((ExternalLabel) label).getTextEditPartClassName()%>(view);
			}
<%
			} else {
%>
		case <%=label.getVisualID()%>:
			return new <%=label.getEditPartClassName()%>(view);
<%
			}
		}
	}
}
for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
%>		
			case <%=link.getVisualID()%>:
				return new <%=link.getEditPartClassName()%>(view);
<%
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
// [++] Just to remove unnecessary imports we are doing this import insode a loop
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
// [--]
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintLabelFieldName();
%>
			case <%=linkLabel.getVisualID()%>:
				if (<%=labelViewId%>.equals(view.getType())) {
					return new <%=linkLabel.getEditPartClassName()%>(view);
				} else {
					return new <%=linkLabel.getTextEditPartClassName()%>(view);
				}
<%
	}
}
%>
			}
		}
		return createUnrecognizedEditPart(context, model);
	}
	
	/**
	 * @generated
	 */
	 private EditPart createUnrecognizedEditPart(EditPart context, Object model) {
	 	// Handle creation of unrecognized child node EditParts here
	 	return null;
	 }

}
<%importManager.emitSortedImports();%>
