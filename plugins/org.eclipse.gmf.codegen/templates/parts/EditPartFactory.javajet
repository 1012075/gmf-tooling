<%@ jet package="org.eclipse.gmf.codegen.templates.parts" class="EditPartFactoryGenerator" 
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getEditPartsPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=genDiagram.getEditPartFactoryClassName()%> implements EditPartFactory {

<%@ include file="../editor/getVisualID.jetinc" %>
<%
List genLinks = genDiagram.getLinks();
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
%>

	/**
	 * @generated
	 */
	public EditPart createEditPart(EditPart context, Object model) {
		if (model instanceof View) {
			View view = (View) model;
			if (!"<%=genDiagram.getEMFGenModel().getModelName()%>".equals(view.getDiagram().getType())) {
				return null;
			}
			
			int viewVisualID = getVisualID(view);
			switch (viewVisualID) {
			case <%=genDiagram.getVisualID()%>:
				return new <%=genDiagram.getEditPartClassName()%>(view);
<%
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer container = (GenChildContainer) containers.next();
%>
		case <%=container.getVisualID()%>:
			 return new <%=container.getEditPartClassName()%>(view);
<%
	if (container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
%>
		case <%=label.getVisualID()%>:
			return new <%=label.getEditPartClassName()%>(view);
<%
		}
	}
}

for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
%>		
			case <%=link.getVisualID()%>:
				return new <%=link.getEditPartClassName()%>(view);
<%
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
// [++] Just to remove unnecessary imports we are doing this import insode a loop
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		String semanticPackageInterfaceName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedPackageInterfaceName());
// [--]		
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
		String semanticLinkInterfaceName;
		if (link.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) link.getModelFacet();
			semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		} else {
			FeatureModelFacet modelFacet = (FeatureModelFacet) link.getModelFacet();
			semanticLinkInterfaceName = modelFacet.getMetaFeature().getGenClass().getClassifierAccessorName();
		}

%>
			case <%=linkLabel.getVisualID()%>:
				if (<%=labelViewId%>.equals(view.getType())) {
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart")%>(view) {
					
						public int getKeyPoint() {
							return <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionLocator")%>.<%=linkLabel.getAlignment()%>;
						}
					};
				} else {
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart")%>(view) {

						public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> getParser() {
							if (parser == null) {
								parser = new <%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".StructuralFeatureParser")%>(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticLinkInterfaceName%>().getEStructuralFeature("<%=linkLabel.getMetaFeature().getName()%>"));
							}
							return parser;
						}
					};
				}
<%
	}
}
%>		
			}
		}
		return createUnrecognizedEditPart(context, model);
	}
	
	/**
	 * @generated
	 */
	 private EditPart createUnrecognizedEditPart(EditPart context, Object model) {
	 	// Handle creation of unrecognized child node EditParts here
	 	return null;
	 }

}
<%importManager.emitSortedImports();%>
