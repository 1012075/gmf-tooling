package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.codegen.util.*;

public class DocumentProviderGenerator
{
  protected static String nl;
  public static synchronized DocumentProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DocumentProviderGenerator result = new DocumentProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "import java.util.Set;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.core.runtime.jobs.ISchedulingRule;" + NL + "import org.eclipse.core.runtime.jobs.MultiRule;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDiagramDocumentProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDiagramModificationListener;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MFilter;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MListener;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.ui.IFileEditorInput;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends FileDiagramDocumentProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected void saveDocumentToFile(IDocument document, IFile file, boolean overwrite, IProgressMonitor monitor) throws CoreException {" + NL + "\t\tmonitor.beginTask(\"\", 100); //$NON-NLS-1$" + NL + "\t\tsuper.saveDocumentToFile(document, file, overwrite, new SubProgressMonitor(monitor, 20));" + NL + "" + NL + "\t\tIProgressMonitor subMonitor = new SubProgressMonitor(monitor, 20);" + NL + "\t\tDiagram diagram = (Diagram)document.getContent();" + NL + "\t\tSet externalResources = getReferencedResources(diagram);" + NL + "\t\tsubMonitor.done();" + NL + "\t\t" + NL + "\t\tsubMonitor = new SubProgressMonitor(monitor, 60);" + NL + "\t\tsubMonitor.beginTask(\"Saving external resources\", externalResources.size());" + NL + "\t\tfor (Iterator it = externalResources.iterator(); it.hasNext();) {" + NL + "\t\t\tResource nextResource = (Resource) it.next();" + NL + "\t\t\tsubMonitor.setTaskName(\"Saving \" + nextResource.getURI());" + NL + "\t\t\tResourceUtil.save(nextResource);" + NL + "\t\t\tsubMonitor.worked(1);" + NL + "\t\t}" + NL + "\t\tsubMonitor.done();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected ISchedulingRule getSaveRule(Object element) {" + NL + "\t\tIDiagramDocument diagramDocument = getDiagramDocument(element);" + NL + "\t\tif (diagramDocument != null) {" + NL + "\t\t\tDiagram diagram = diagramDocument.getDiagram();" + NL + "\t\t\tif (diagram != null) {" + NL + "\t\t\t\tCollection rules = new ArrayList();" + NL + "\t\t\t\t" + NL + "\t\t\t\tResource resource = ((EObject)diagram).eResource();\t" + NL + "\t\t\t\tIFile resourceFile = ResourceUtil.getFile(resource);" + NL + "\t\t\t\trules.add(computeSaveSchedulingRule(resourceFile));" + NL + "\t\t\t\t" + NL + "\t\t\t\tSet externalResources = getReferencedResources(diagram);" + NL + "\t\t\t\tfor (Iterator it = externalResources.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tResource nextResource = (Resource) it.next();" + NL + "\t\t\t\t\tIFile nextResourceFile = ResourceUtil.getFile(nextResource);" + NL + "\t\t\t\t\trules.add(computeSaveSchedulingRule(nextResourceFile));" + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\treturn new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn super.getSaveRule(element);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected FileInfo createFileInfo(IDocument document, FileSynchronizer synchronizer, IFileEditorInput input) {" + NL + "\t\tassert document instanceof DiagramDocument;" + NL + "" + NL + "\t\tDiagramModificationListener diagramListener = new CustomModificationListener(this, (DiagramDocument) document, input);" + NL + "\t\tDiagramFileInfo info = new DiagramFileInfo(document, synchronizer, diagramListener);" + NL + "" + NL + "\t\tdiagramListener.startListening();" + NL + "\t\treturn info;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprivate static Set getReferencedResources(Diagram diagram) {" + NL + "\t\tResource diagramResource = ((EObject) diagram).eResource();" + NL + "\t\tif (diagramResource == null) {" + NL + "\t\t\treturn Collections.EMPTY_SET;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn new HashSet(MEditingDomain.INSTANCE.getImports(diagramResource));" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprivate ISchedulingRule computeSaveSchedulingRule(IResource toCreateOrModify) {" + NL + "\t\tif (toCreateOrModify.exists() && toCreateOrModify.isSynchronized(IResource.DEPTH_ZERO))" + NL + "\t\t\treturn fResourceRuleFactory.modifyRule(toCreateOrModify);" + NL + "" + NL + "\t\tIResource parent= toCreateOrModify;" + NL + "\t\tdo {" + NL + "\t\t\t /*" + NL + "\t\t\t * XXX This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601" + NL + "\t\t\t * IResourceRuleFactory.createRule should iterate the hierarchy itself." + NL + "\t\t\t */" + NL + "\t\t\ttoCreateOrModify= parent;" + NL + "\t\t\tparent= toCreateOrModify.getParent();" + NL + "\t\t} while (parent != null && !parent.exists() && !parent.isSynchronized(IResource.DEPTH_ZERO));" + NL + "" + NL + "\t\treturn fResourceRuleFactory.createRule(toCreateOrModify);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprivate class CustomModificationListener extends FileDiagramModificationListener {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @generated" + NL + "\t\t */" + NL + "\t\tprivate MListener myListener = null;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @generated" + NL + "\t\t */" + NL + "\t \tpublic CustomModificationListener(";
  protected final String TEXT_6 = " documentProviderParameter, DiagramDocument documentParameter, IFileEditorInput inputParameter) {" + NL + "\t\t\tsuper(documentProviderParameter, documentParameter, inputParameter);" + NL + "\t \t\tfinal DiagramDocument document = documentParameter;" + NL + "\t\t\tMFilter diagramResourceSavedFilter = new MFilter() {" + NL + "\t\t\t\tpublic boolean matches(Notification notification) {" + NL + "\t\t\t\t\tDiagram diagram = document.getDiagram();" + NL + "\t\t\t\t\tObject notifier = notification.getNotifier();" + NL + "\t\t\t\t\tif (diagram != null && notifier instanceof Resource) {" + NL + "\t\t\t\t\t\tResource notifierResource = (Resource) notifier;" + NL + "\t\t\t\t\t\tSet externalResources = getReferencedResources(diagram);" + NL + "\t\t\t\t\t\tfor (Iterator it = externalResources.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\tResource nextResource = (Resource) it.next();" + NL + "\t\t\t\t\t\t\tif (notifierResource == nextResource) {" + NL + "\t\t\t\t\t\t\t\treturn notification.getEventType() == Notification.SET && notification.getFeatureID(Resource.class) == Resource.RESOURCE__IS_MODIFIED && notification.getNewBooleanValue() == true;" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t};" + NL + "\t\t\t};" + NL + "\t\t\tif (myListener == null) {" + NL + "\t\t\t\tmyListener = new MListener(diagramResourceSavedFilter) {" + NL + "" + NL + "\t\t\t\t\tpublic void onEvent(List events) {" + NL + "\t\t\t\t\t\tdocument.setContent(document.getContent());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @generated" + NL + "\t\t */" + NL + "\t\tpublic void startListening() {" + NL + "\t\t\tsuper.startListening();" + NL + "\t\t\tmyListener.startListening();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @generated" + NL + "\t\t */" + NL + "\t\tpublic void stopListening() {" + NL + "\t\t\tmyListener.stopListening();" + NL + "\t\t\tsuper.stopListening();" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    GenDiagram genDiagram = (GenDiagram) argument;
    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getEditorPackageName());
    stringBuffer.append(TEXT_2);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
    stringBuffer.append(TEXT_6);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
