/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Anna Karjakina (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - migration to QTO-based Xpand
 */
import gmf.EMFUtils;

modeltype gmfGenModel uses "http://www.eclipse.org/gmf/2009/GenModel";
modeltype emfGenModel uses "http://www.eclipse.org/emf/2002/GenModel";
modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";
modeltype wysiwyg uses "http://www.eclipse.org/gmf/2008/GmfGraph/wysiwyg";
modeltype context uses "http://www.eclipse.org/gmf/2008/Context";

library Utils;

helper isPolyline(genNode : gmfGenModel::GenNode) : Boolean {
	return 'Polyline' = genNode.getDomainMetaClass().ecoreClass.name or 'Polygon' = genNode.getDomainMetaClass().ecoreClass.name
}

helper isPolylinePoint(genNode : gmfGenModel::GenNode) : Boolean {
	return 'Point' = genNode.getDomainMetaClass().ecoreClass.name
}

helper hasLayoutDataSynchronizers(genNode : gmfGenModel::GenNode) : Boolean {
	return not (getSynchronizers(genNode).contexts)[context::FeatureContext]->select(fc | 'layoutData' = fc.selector.name)->isEmpty()
}

helper hasSynchronizers(genNode : gmfGenModel::GenNode) : Boolean {
	return not getSynchronizers(genNode)->isEmpty()
}

helper getSynchronizers(genNode : gmfGenModel::GenNode) : Sequence(wysiwyg::DomainPropertiesSynchronizer) {
	return (getReferencingObjects(genNode.oclAsType(ecore::EObject)))[wysiwyg::DomainPropertiesSynchronizer]
}

helper metaclass(genNode : gmfGenModel::GenNode) : emfGenModel::GenClass {
	return genNode.getDomainMetaClass()
}

helper gmfGenModel::Viewmap::isInnerClassViewmap() : Boolean {
	return false
}

helper gmfGenModel::InnerClassViewmap::isInnerClassViewmap() : Boolean {
	return true
}
