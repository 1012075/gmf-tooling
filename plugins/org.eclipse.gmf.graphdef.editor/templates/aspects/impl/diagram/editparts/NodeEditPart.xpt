/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Anna Karjakina (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION aspects::impl::diagram::editparts::Utils»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::Utils»

«AROUND setupNodePlate FOR gmfgen::GenNode-»
	«targetDef.proceed()-»
	«IF hasSynchronizers(self)-»
		result.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(0, 0));
	«ENDIF-»
«ENDAROUND»

«AROUND createLayoutEditPolicyBody FOR gmfgen::GenNode-»
	«IF hasSynchronizers(self)-»
		«IF isPolyline(self)-»
			return new org.eclipse.gmf.graphdef.editor.edit.policies.PointContainerXYLayoutEditPolicy(getMapMode(), «hasLayoutDataSynchronizers(self)»);
		«ELSE-»
			«IF not isPolylinePoint(self)-»
				org.eclipse.gmf.gmfgraph.Layout layout = getGmfgraphElement().getLayout();
				if (layout != null) {
					switch (layout.eClass().getClassifierID()) {
					case org.eclipse.gmf.gmfgraph.GMFGraphPackage.BORDER_LAYOUT:
						return new org.eclipse.gmf.graphdef.editor.edit.policies.BorderLayoutEditPolicy();
					case org.eclipse.gmf.gmfgraph.GMFGraphPackage.GRID_LAYOUT:
						return new org.eclipse.gmf.graphdef.editor.edit.policies.GridLayoutEditPolicy();
					}
				}
			«ENDIF-»
			return new org.eclipse.gmf.graphdef.editor.edit.policies.FigureContainerXYLayoutEditPolicy(getMapMode());
		«ENDIF-»
	«ELSE-»
		«targetDef.proceed()»
	«ENDIF-»
«ENDAROUND»

«AROUND createDefaultEditPoliciesBody FOR gmfgen::GenNode-»
	«EXPAND impl::diagram::editparts::NodeEditPart::installCreationRolePolicy-»
	super.createDefaultEditPolicies();
	«EXPAND impl::diagram::editparts::NodeEditPart::installPrimaryDragEditPolicy-»
	«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
	«IF needsGraphicalNodeEditPolicy(self)-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE, new «getGraphicalNodeEditPolicyQualifiedClassName()»());
	«ENDIF-»
	«IF not childNodes->isEmpty()-»
		«EXPAND installDragDropEditPolicy-»
	«ENDIF-»
	«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
	installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
	«EXPAND xpt::diagram::editparts::Common::behaviour FOR self-»
	// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
«ENDAROUND»

«DEFINE installDragDropEditPolicy FOR gmfgen::GenNode-»
	«IF hasLayoutDataSynchronizers(self)-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.gmf.graphdef.editor.edit.policies.InnerFigureDragDropEditPolicy() {
		
			«EXPAND xpt::Common::generatedMemberComment»
			protected org.eclipse.draw2d.Shape getActualFigure() {
				return getPrimaryShape();
			}
		});		
	«ELSE-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
	«ENDIF-»
«ENDDEFINE»

«AROUND createNodePlate FOR gmfgen::GenNode-»
	«IF isPolyline(self)-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
			DefaultSizeNodeFigureExt result = new DefaultSizeNodeFigureExt(«IF getDiagram().isPixelMapMode()»«defaultSizeWidth(viewmap, 40)», «defaultSizeHeight(viewmap, 40)»«ELSE»getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 40)»), getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 40)»)«ENDIF»); 
			«EXPAND impl::diagram::editparts::NodeEditPart::setupNodePlate-»
			return result;
		}
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF-»
«ENDAROUND»

«AROUND createFigure FOR gmfgen::GenNode-»
	«IF isPolyline(self)-»
		«EXPAND customCreateFigure-»
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF»
«ENDAROUND»

«DEFINE customCreateFigure FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		'Creates figure for this edit part.\n' + 
		'\n' + 
		'Body of this method does not depend on settings in generation model\n' + 
		'so you may safely remove <i>generated</i> tag and modify it.\n'
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems(self)»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.XYLayout()«IF hasLayoutDataSynchronizers(self)» {
			public org.eclipse.draw2d.geometry.Point getOrigin(org.eclipse.draw2d.IFigure parent) {
				return new org.eclipse.draw2d.geometry.Point();
			}
		}«ENDIF»);
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = figure;
		return figure;
	}
«ENDDEFINE»

«AROUND getPrimaryDragEditPolicy FOR gmfgen::GenNode-»
	«IF isPolyline(self) and hasLayoutDataSynchronizers(self) or isPolylinePoint(self)-»
		«EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
			org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx editPolicy = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx();
			«IF isPolyline(self)-»
				editPolicy.setDragAllowed(false);
			«ENDIF-»
			return editPolicy;
		}	
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF-»
«ENDAROUND»