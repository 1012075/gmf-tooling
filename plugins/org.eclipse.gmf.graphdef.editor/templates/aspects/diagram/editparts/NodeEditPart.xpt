/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Anna Karjakina (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/gmf/2008/Context"»
«IMPORT "http://www.eclipse.org/gmf/2008/GmfGraph/wysiwyg"»

«EXTENSION aspects::impl::diagram::editparts::Utils»
«EXTENSION xpt::GenModelUtils»

«AROUND extendsList FOR gmfgen::GenNode»«IF hasSynchronizers(this)»extends «getDiagram().editPartsPackageName».AbstractFigureEditPart«ELSE»«targetDef.proceed()»«ENDIF»«ENDAROUND»

«AROUND handleNotificationEvent FOR gmfgen::GenNode-»
	«IF hasBoundsSynchronizer(this)-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
			Object feature = notification.getFeature();
			if (org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Width().equals(feature)
				|| org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Height().equals(feature)
				|| org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X().equals(feature)
				|| org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y().equals(feature)) {
				return;
			}
			super.handleNotificationEvent(notification);
		}
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF-»
«ENDAROUND»

«AROUND additions FOR gmfgen::GenNode-»
	«IF hasSynchronizers(this)-»
		«EXPAND additions(viewmap)-»
	«ELSE-»
		«targetDef.proceed()»
	«ENDIF-»
«ENDAROUND»

«DEFINE additions(gmfgen::Viewmap innerViewmap) FOR gmfgen::GenNode-»
«ENDDEFINE»

«DEFINE additions(gmfgen::InnerClassViewmap innerViewmap) FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	private java.util.Collection<org.eclipse.emf.common.notify.Adapter> myDomainElementAdapters = new java.util.ArrayList<org.eclipse.emf.common.notify.Adapter>();
	
	«EXPAND getModelFigureElement-»
	
	«EXPAND removeSemanticListeners-»
	
	«EXPAND setFigure-»
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void activate() {
		if (isActive()){
			return;
		}
		final «EXPAND MetaModel::DeclareAndAssign("modelElement", "getModelFigureElement()") FOR metaclass()»
		if (modelElement == null) {
			super.activate();
			return;
		}
        «EXPAND addDomainElementAdapters FOREACH getSynchronizers(this)-»
		modelElement.eAdapters().addAll(myDomainElementAdapters);
		
		org.eclipse.gmf.runtime.notation.View view = getNotationView();
		«EXPAND setViewColor("Background", "Fill")-»
		«EXPAND setViewColor("Foreground", "Line")-»

		«EXPAND listenViewColor("Background", "Fill")-»
		«EXPAND listenViewColor("Foreground", "Line")-»
		
		super.activate();
	}
	«IF hasBoundsSynchronizer(this)-»
	
		«EXPAND refreshBounds-»
	«ENDIF-»

	«EXPAND xpt::Common::generatedMemberComment»
    public static int getRgbColor(org.eclipse.gmf.gmfgraph.ConstantColor modelColor) {
        final int rgbColor;
		switch (modelColor.getValue().getValue()) {
        case org.eclipse.gmf.gmfgraph.ColorConstants.WHITE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.BLACK: {
            rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.RED: {
            rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.ORANGE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.YELLOW: {
            rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.CYAN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
            break;
        }
        default:
            rgbColor = -1;
        }
        return rgbColor;
    }	
«ENDDEFINE»

«DEFINE getModelFigureElement FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	private «EXPAND MetaModel::QualifiedClassName FOR metaclass()» getModelFigureElement() {
		org.eclipse.gmf.gmfgraph.Shape shape = getShape();
		if («EXPAND MetaModel::IsInstance("shape") FOR metaclass()») {
			«EXPAND MetaModel::DeclareAndAssign("modelFigureElement", "shape") FOR metaclass()»
			return modelFigureElement;
		}
		return null;
	}
«ENDDEFINE»

«DEFINE removeSemanticListeners FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void removeSemanticListeners() {
		«EXPAND MetaModel::DeclareAndAssign("modelElement", "getModelFigureElement()") FOR metaclass()»
		if (modelElement != null) {
			modelElement.eAdapters().removeAll(myDomainElementAdapters);
			myDomainElementAdapters.clear();
		}
		super.removeSemanticListeners();
	}
«ENDDEFINE»

«DEFINE setFigure FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void setFigure(org.eclipse.draw2d.IFigure figure) {
		super.setFigure(figure);
		«EXPAND processChanges-»
	}
«ENDDEFINE»

«DEFINE processChanges FOR gmfgen::GenNode-»
	«EXPAND MetaModel::DeclareAndAssign("modelElement", "getModelFigureElement()") FOR metaclass()»
	if (modelElement != null) {
		«EXPAND processChanges FOREACH getSynchronizers(this)-»
	}
«ENDDEFINE»

«DEFINE processChanges FOR wysiwyg::AbstractDomainSynchronizer-»
	«ERROR "Should never be called"»
«ENDDEFINE»

«DEFINE processChanges FOR wysiwyg::MethodCallSynchronizer-»
	«methodName»();
«ENDDEFINE»

«DEFINE processChanges FOR wysiwyg::FigurePropertySynchronizer-»
	getPrimaryShape().«EXPAND setterName»(«IF domainValueTransformerName != null»«domainValueTransformerName»(«ENDIF»«EXPAND getModelElementProperty FOREACH contexts SEPARATOR ", "»«IF domainValueTransformerName != null»)«ENDIF»);
«ENDDEFINE»

«DEFINE getModelElementProperty FOR context::Context-»
	«ERROR "Should never be called"»
«ENDDEFINE»

«DEFINE getModelElementProperty FOR context::FeatureContext»modelElement.«EXPAND getterName FOR selector»()«ENDDEFINE»

«REM»
	Pull up this method to AbstractFigureEditPart?..
«ENDREM»
«DEFINE refreshBounds FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshBounds() {
		«EXPAND MetaModel::DeclareAndAssign("modelElement", "getModelFigureElement()") FOR metaclass()»
		if (modelElement == null) {
			return;
		}
		if (modelElement.getPreferredSize() != null) {
			getFigure().setPreferredSize(getDraw2dDimension(modelElement.getPreferredSize()));
		}
		if (modelElement.getLocation() != null) {
			getFigure().setLocation(getDraw2DPoint(modelElement.getLocation()));
		}
	}
«ENDDEFINE»

«DEFINE addDomainElementAdapters FOR wysiwyg::AbstractDomainSynchronizer-»

	org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker «EXPAND changeTrackerVarName» = new org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker() {
		public void modelChanged(org.eclipse.emf.common.notify.Notification msg) {
			«EXPAND processChanges-»
		}
	};
	myDomainElementAdapters.add(«EXPAND attachContextListener(this) FOREACH contexts SEPARATOR "); \nmyDomainElementAdapters.add("»);
«ENDDEFINE»

«DEFINE changeTrackerVarName FOR wysiwyg::AbstractDomainSynchronizer»
	«ERROR "Should never be called"»
«ENDDEFINE»

«DEFINE changeTrackerVarName FOR wysiwyg::MethodCallSynchronizer»«methodName»Tracker«ENDDEFINE»

«DEFINE changeTrackerVarName FOR wysiwyg::FigurePropertySynchronizer»«figureAttribute.toFirstLower()»Tracker«ENDDEFINE»

«DEFINE attachContextListener(wysiwyg::AbstractDomainSynchronizer synchronizer) FOR context::Context-»
	«ERROR "Should never be called"»
«ENDDEFINE»

«DEFINE attachContextListener(wysiwyg::AbstractDomainSynchronizer synchronizer) FOR context::FeatureContext-»
	«IF children.size() == 0-»
		new org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker(«EXPAND changeTrackerVarName FOR synchronizer», «EXPAND accessor FOR selector»)
	«ELSE-»
		new org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter(«EXPAND accessor FOR selector», «EXPAND changeTrackerVarName FOR synchronizer», «EXPAND attachContextListener(synchronizer) FOREACH children SEPARATOR ", "»)
	«ENDIF-»
«ENDDEFINE»

«DEFINE setViewColor(String modelColorProperty, String viewColorProperty) FOR gmfgen::GenNode-»
final org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.get«viewColorProperty»Style());
if (modelElement.get«modelColorProperty»Color() != null) {
	final int rgbColor;
	if (modelElement.get«modelColorProperty»Color() instanceof org.eclipse.gmf.gmfgraph.RGBColor) {
		org.eclipse.gmf.gmfgraph.RGBColor modelColor = (org.eclipse.gmf.gmfgraph.RGBColor) modelElement.get«modelColorProperty»Color();
		rgbColor = (modelColor.getRed()& 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
	} else {
		org.eclipse.gmf.gmfgraph.ConstantColor modelColor = (org.eclipse.gmf.gmfgraph.ConstantColor) modelElement.get«modelColorProperty»Color();
		rgbColor = getRgbColor(modelColor);
	}
	if (rgbColor != -1 && the«viewColorProperty»Style.get«viewColorProperty»Color() != rgbColor) {
		org.eclipse.emf.workspace.AbstractEMFOperation setColorOperation = new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing view «modelColorProperty» color with the model", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
			protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
				the«viewColorProperty»Style.set«viewColorProperty»Color(rgbColor);
				return org.eclipse.core.runtime.Status.OK_STATUS;
			}
		};
		try {
			setColorOperation.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize view «modelColorProperty» color with the model", e); //$NON-NLS-1$
		}
	}
}
«ENDDEFINE»

«DEFINE listenViewColor(String modelColorProperty, String viewColorProperty) FOR gmfgen::GenNode-»
final org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style1 = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.get«viewColorProperty»Style());
addListenerFilter("«viewColorProperty»StyleListener", new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {
	public void notifyChanged(final org.eclipse.emf.common.notify.Notification notification) {
		try {
			new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing model «modelColorProperty» color with the view", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
				protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) notification.getNotifier();
					if (notification.getFeatureID(org.eclipse.gmf.runtime.notation.«viewColorProperty»Style.class) == org.eclipse.gmf.runtime.notation.NotationPackage.«viewColorProperty.toUpperCase()»_STYLE__«viewColorProperty.toUpperCase()»_COLOR)
						{
							int color = the«viewColorProperty»Style.get«viewColorProperty»Color();
							org.eclipse.gmf.gmfgraph.RGBColor modelColor;
							if (modelElement.get«modelColorProperty»Color() instanceof org.eclipse.gmf.gmfgraph.RGBColor) {
								modelColor = (org.eclipse.gmf.gmfgraph.RGBColor) modelElement.get«modelColorProperty»Color();
							} else {
								modelColor = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createRGBColor();
								modelElement.set«modelColorProperty»Color(modelColor);
							}
							if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
								modelColor.setRed(color & 0x000000FF);
								modelColor.setGreen((color & 0x0000FF00) >> 8);
								modelColor.setBlue((color & 0x00FF0000) >> 16);
							}
						}
					return org.eclipse.core.runtime.Status.OK_STATUS;
				}
			}.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize model «modelColorProperty» color with the view", e); //$NON-NLS-1$
		}
	}
}, the«viewColorProperty»Style1);
«ENDDEFINE»

«REM»Temporary solution. Use MetaModel.xpt from formtk here.«ENDREM»
«DEFINE accessor FOR ecore::EStructuralFeature»org.eclipse.gmf.gmfgraph.GMFGraphPackage.eINSTANCE.get«eContainingClass.name.toFirstUpper()»_«name.toFirstUpper()»()«ENDDEFINE»

«DEFINE setterName FOR wysiwyg::FigurePropertySynchronizer»set«figureAttribute»«ENDDEFINE»

«DEFINE getterName FOR ecore::EStructuralFeature»«IF eType.name == "EBoolean"»is«ELSE»get«ENDIF»«name.toFirstUpper()»«ENDDEFINE»