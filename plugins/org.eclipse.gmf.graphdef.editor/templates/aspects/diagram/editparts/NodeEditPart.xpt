/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Anna Karjakina (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION aspects::impl::diagram::editparts::Utils»
«EXTENSION xpt::GenModelUtils»

«AROUND extendsList FOR gmfgen::GenNode-»
«IF generateSyncronizationCode(metaclass()) && isInnerClassViewmap(viewmap)»extends «getDiagram().editPartsPackageName».AbstractFigureEditPart«ELSE-»
«targetDef.proceed()»«ENDIF-»
«ENDAROUND»

«AROUND additions FOR gmfgen::GenNode-»
«IF generateSyncronizationCode(metaclass())-»
«EXPAND additions(viewmap)-»
«ELSE-»
«targetDef.proceed()»
«ENDIF-»
«ENDAROUND»

«DEFINE additions(gmfgen::Viewmap innerViewmap) FOR gmfgen::GenNode-»
«ENDDEFINE»

«DEFINE additions(gmfgen::InnerClassViewmap innerViewmap) FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	private «innerViewmap.className» myFigure;
	
// TODO: use myFigure?
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.Figure myNodeFigure;
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void activate() {
		if (isActive()){
			return;
		}
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getModel();
		if (view.getElement() == null) {
			super.activate();
			return;
		}

		final «EXPAND MetaModel::DeclareAndAssign("modelElement", "view.getElement()") FOR metaclass()»

        «FOREACH metaclass().getAllGenFeatures() AS nextGenFeature»
            «IF !skip(nextGenFeature)-»
                «EXPAND listenerForDatatype(metaclass()) FOR nextGenFeature-»
		addListenerFilter("«EXPAND uniqueFeatureKey FOR nextGenFeature»_Listener", new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {
			public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			    «EXPAND notifyBodyForDatatype(metaclass()) FOR nextGenFeature-»
			    «EXPAND aspects::impl::diagram::editparts::NodeEditPart::processChangesCall(metaclass()) FOR nextGenFeature-»
			    «IF isCornerWidthOrHeight(nextGenFeature)-»
			    myFigure.repaint();
			    «ENDIF-»
			}
		}, modelElement, «EXPAND MetaModel::MetaFeature FOR nextGenFeature»);
            «ENDIF-»
        «ENDFOREACH»
        
		final org.eclipse.gmf.runtime.notation.Bounds bounds = (org.eclipse.gmf.runtime.notation.Bounds) ((org.eclipse.gmf.runtime.notation.Node) view).getLayoutConstraint();
		final int sizeX;
		final int sizeY;
		if (modelElement.getPreferredSize() != null) {
			sizeX = getMapMode().DPtoLP(modelElement.getPreferredSize().getDx());
			sizeY = getMapMode().DPtoLP(modelElement.getPreferredSize().getDy());
		} else {
			sizeX = getMapMode().DPtoLP(20);
			sizeY = getMapMode().DPtoLP(20);
		}
		final int locationX;
		final int locationY;
		if (modelElement.getLocation() != null) {
			locationX = getMapMode().DPtoLP(modelElement.getLocation().getX());
			locationY = getMapMode().DPtoLP(modelElement.getLocation().getY());
		} else {
			locationX = bounds.getX();
			locationY = bounds.getY();
		}
		if (sizeX != bounds.getWidth() || sizeY != bounds.getHeight() || locationX != bounds.getX() || locationY != bounds.getY()) {
			try {
				new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing view size with the model", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
					protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
						bounds.setX(locationX);
						bounds.setY(locationY);
						bounds.setWidth(sizeX);
						bounds.setHeight(sizeY);
						return org.eclipse.core.runtime.Status.OK_STATUS;
					}
				}.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
			} catch (org.eclipse.core.commands.ExecutionException e) {
				«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize view size with the model", e); //$NON-NLS-1$			
			}
		}
		addListenerFilter("BoundsListener", new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {
			public void notifyChanged(final org.eclipse.emf.common.notify.Notification notification) {
				try {
					new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
						protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
							org.eclipse.gmf.runtime.notation.Bounds bounds = (org.eclipse.gmf.runtime.notation.Bounds) notification.getNotifier();
							org.eclipse.gmf.gmfgraph.Dimension dim = modelElement.getPreferredSize();
							if (dim == null) {
								dim = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createDimension();
								modelElement.setPreferredSize(dim);
							}
							org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation();
							if (location == null) {
								location = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createPoint();
								modelElement.setLocation(location);
							}
				
							int x = getMapMode().LPtoDP(bounds.getX());
							int y = getMapMode().LPtoDP(bounds.getY());
							int width = getMapMode().LPtoDP(bounds.getWidth());
							int height = getMapMode().LPtoDP(bounds.getHeight());
							if (location.getX() != x || location.getY() != y) {
								location.setX(x);
								location.setY(y);
							}
							if (dim.getDx() != width || dim.getDy() != height) {
								dim.setDx(width);
								dim.setDy(height);
							}

							myNodeFigure.setPreferredSize(bounds.getWidth(), bounds.getHeight());
							myNodeFigure.setLocation(new org.eclipse.draw2d.geometry.Point(bounds.getX(), bounds.getY()));
				
							if (modelElement.getLayoutData() instanceof org.eclipse.gmf.gmfgraph.XYLayoutData || (modelElement.eContainer() instanceof org.eclipse.gmf.gmfgraph.Layoutable && ((org.eclipse.gmf.gmfgraph.Layoutable)modelElement.eContainer()).getLayout() instanceof org.eclipse.gmf.gmfgraph.XYLayout)) {
								org.eclipse.gmf.gmfgraph.XYLayoutData xyLayoutData = (org.eclipse.gmf.gmfgraph.XYLayoutData) modelElement.getLayoutData();
								if (xyLayoutData == null) {
									xyLayoutData = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createXYLayoutData();
									modelElement.setLayoutData(xyLayoutData);
									xyLayoutData.setTopLeft(org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createPoint());
									xyLayoutData.getTopLeft().setX(0);
									xyLayoutData.getTopLeft().setY(0);
									xyLayoutData.setSize(org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createDimension());
									xyLayoutData.getSize().setDx(40);
									xyLayoutData.getSize().setDy(40);
								}
								org.eclipse.gmf.gmfgraph.Point topLeft;
								if (xyLayoutData.getTopLeft() != null) {
									topLeft = xyLayoutData.getTopLeft();
								} else {
									topLeft = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createPoint();
									xyLayoutData.setTopLeft(topLeft);
								}
								if (topLeft.getX() != location.getX() || topLeft.getY() != location.getY()) {
									topLeft.setX(location.getX());
									topLeft.setY(location.getY());
								}

								org.eclipse.gmf.gmfgraph.Dimension size;
								if (xyLayoutData.getSize() != null) {
									size = xyLayoutData.getSize();
								} else {
									size = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createDimension();
									xyLayoutData.setSize(size);
								}
								if (size.getDx() != dim.getDx() || size.getDy() != dim.getDy()) {
									size.setDx(dim.getDx());
									size.setDy(dim.getDy());
								}
							}
							return org.eclipse.core.runtime.Status.OK_STATUS;
						}
					}.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
				} catch (org.eclipse.core.commands.ExecutionException e) {
					«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
				}
				if (getRoot() != null) {
					handleMajorSemanticChange();	
				}
			}
		}, bounds);
		
		«EXPAND setViewColor("Background", "Fill")-»
		«EXPAND setViewColor("Foreground", "Line")-»

		«EXPAND listenViewColor("Background", "Fill")-»
		«EXPAND listenViewColor("Foreground", "Line")-»
		
		super.activate();
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.LayoutManager getFigureLayoutManager() {
		return myFigure.getLayoutManager();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setFigureLayoutManager(org.eclipse.draw2d.LayoutManager layoutManager) {
		myFigure.setLayoutManager(layoutManager);
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshBounds() {
		if (((org.eclipse.gmf.runtime.notation.View) getParent().getModel()).getElement() instanceof org.eclipse.gmf.gmfgraph.AbstractFigure) {
			int width = ((Integer) getStructuralFeatureValue(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Width())).intValue();
			int height = ((Integer) getStructuralFeatureValue(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Height())).intValue();
			myNodeFigure.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(width, height));
		} else {
			super.refreshBounds();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
    public static int getRgbColor(org.eclipse.gmf.gmfgraph.ConstantColor modelColor) {
        final int rgbColor;
		switch (modelColor.getValue().getValue()) {
        case org.eclipse.gmf.gmfgraph.ColorConstants.WHITE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.BLACK: {
            rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_GRAY: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.RED: {
            rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.ORANGE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.YELLOW: {
            rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_GREEN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.CYAN: {
            rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.LIGHT_BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
            break;
        }
        case org.eclipse.gmf.gmfgraph.ColorConstants.DARK_BLUE: {
            rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
            break;
        }
        default:
            rgbColor = -1;
        }
        return rgbColor;
    }	
«ENDDEFINE»

«DEFINE listenerForDatatype(genmodel::GenClass modelElementEClass) FOR genmodel::GenFeature-»
«EXPAND listenerForDatatype(modelElementEClass, getTypeGenClassifier())-»
«ENDDEFINE»

«DEFINE listenerForDatatype(genmodel::GenClass modelElementEClass, genmodel::GenClassifier type) FOR genmodel::GenFeature-»
	final org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener «EXPAND uniqueFeatureKey»_PropertiesListener = new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {
		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			«EXPAND aspects::impl::diagram::editparts::NodeEditPart::processChangesCall(modelElementEClass)-»
		}
	};
	«EXPAND addFeaturePropertyChangeListeners(modelElementEClass)-»
«ENDDEFINE»

«DEFINE listenerForDatatype(genmodel::GenClass modelElementEClass, genmodel::GenDataType type) FOR genmodel::GenFeature-»
«ENDDEFINE»

«DEFINE addFeaturePropertyChangeListeners(genmodel::GenClass modelElementEClass) FOR genmodel::GenFeature-»
«IF this.isListType()-»
for (int i = 0; i < «EXPAND MetaModel::getFeatureValue("modelElement", modelElementEClass)».size(); i++) {
	addListenerFilter("«EXPAND uniqueFeatureKey»_PropertiesListener#" + i, «EXPAND uniqueFeatureKey»_PropertiesListener, (org.eclipse.emf.ecore.EObject) «EXPAND MetaModel::getFeatureValue("modelElement", modelElementEClass)».get(i));
}
«ELSE-»
if («EXPAND MetaModel::getFeatureValue("modelElement", modelElementEClass)» != null) {
	addListenerFilter("«EXPAND uniqueFeatureKey»_PropertiesListener", «EXPAND uniqueFeatureKey»_PropertiesListener, «EXPAND MetaModel::getFeatureValue("modelElement", modelElementEClass)»);
}
«ENDIF-»
«ENDDEFINE»

«DEFINE notifyBodyForDatatype(genmodel::GenClass modelElementEClass) FOR genmodel::GenFeature-»
«EXPAND notifyBodyForDatatype(modelElementEClass, getTypeGenClassifier())-»
«ENDDEFINE»

«DEFINE notifyBodyForDatatype(genmodel::GenClass modelElementEClass, genmodel::GenClassifier type) FOR genmodel::GenFeature-»
    «IF this.isListType()-»
	int listSize = «EXPAND MetaModel::getFeatureValue("modelElement", modelElementEClass)».size();
	if (notification.getOldValue() instanceof java.util.Collection) {
		listSize += ((java.util.Collection) notification.getOldValue()).size();
	} else {
		listSize++;
	}
	for (int i = 0; i < listSize; i++) {
		removeListenerFilter("«EXPAND uniqueFeatureKey»_PropertiesListener#" + i);
	}
    «ELSE-»
	removeListenerFilter("«EXPAND uniqueFeatureKey»_PropertiesListener");
    «ENDIF-»
    «EXPAND addFeaturePropertyChangeListeners(modelElementEClass)-»
«ENDDEFINE»

«DEFINE notifyBodyForDatatype(genmodel::GenClass modelElementEClass, genmodel::GenDataType type) FOR genmodel::GenFeature-»
«ENDDEFINE»

«DEFINE setViewColor(String modelColorProperty, String viewColorProperty) FOR gmfgen::GenNode-»
final org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.get«viewColorProperty»Style());
if (modelElement.get«modelColorProperty»Color() != null) {
	final int rgbColor;
	if (modelElement.get«modelColorProperty»Color() instanceof org.eclipse.gmf.gmfgraph.RGBColor) {
		org.eclipse.gmf.gmfgraph.RGBColor modelColor = (org.eclipse.gmf.gmfgraph.RGBColor) modelElement.get«modelColorProperty»Color();
		rgbColor = (modelColor.getRed()& 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
	} else {
		org.eclipse.gmf.gmfgraph.ConstantColor modelColor = (org.eclipse.gmf.gmfgraph.ConstantColor) modelElement.get«modelColorProperty»Color();
		rgbColor = getRgbColor(modelColor);
	}
	if (rgbColor != -1 && the«viewColorProperty»Style.get«viewColorProperty»Color() != rgbColor) {
		org.eclipse.emf.workspace.AbstractEMFOperation setColorOperation = new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing view «modelColorProperty» color with the model", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
			protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
				the«viewColorProperty»Style.set«viewColorProperty»Color(rgbColor);
				return org.eclipse.core.runtime.Status.OK_STATUS;
			}
		};
		try {
			setColorOperation.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize view «modelColorProperty» color with the model", e); //$NON-NLS-1$
		}
	}
}
«ENDDEFINE»

«DEFINE listenViewColor(String modelColorProperty, String viewColorProperty) FOR gmfgen::GenNode-»
final org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style1 = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.get«viewColorProperty»Style());
addListenerFilter("«viewColorProperty»StyleListener", new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {
	public void notifyChanged(final org.eclipse.emf.common.notify.Notification notification) {
		try {
			new org.eclipse.emf.workspace.AbstractEMFOperation(getEditingDomain(), "Synchronizing model «modelColorProperty» color with the view", java.util.Collections.singletonMap(org.eclipse.emf.transaction.Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
				protected org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					org.eclipse.gmf.runtime.notation.«viewColorProperty»Style the«viewColorProperty»Style = (org.eclipse.gmf.runtime.notation.«viewColorProperty»Style) notification.getNotifier();
					if (notification.getFeatureID(org.eclipse.gmf.runtime.notation.«viewColorProperty»Style.class) == org.eclipse.gmf.runtime.notation.NotationPackage.«viewColorProperty.toUpperCase()»_STYLE__«viewColorProperty.toUpperCase()»_COLOR)
						{
							int color = the«viewColorProperty»Style.get«viewColorProperty»Color();
							org.eclipse.gmf.gmfgraph.RGBColor modelColor;
							if (modelElement.get«modelColorProperty»Color() instanceof org.eclipse.gmf.gmfgraph.RGBColor) {
								modelColor = (org.eclipse.gmf.gmfgraph.RGBColor) modelElement.get«modelColorProperty»Color();
							} else {
								modelColor = org.eclipse.gmf.gmfgraph.GMFGraphFactory.eINSTANCE.createRGBColor();
								modelElement.set«modelColorProperty»Color(modelColor);
							}
							if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
								modelColor.setRed(color & 0x000000FF);
								modelColor.setGreen((color & 0x0000FF00) >> 8);
								modelColor.setBlue((color & 0x00FF0000) >> 16);
							}
						}
					return org.eclipse.core.runtime.Status.OK_STATUS;
				}
			}.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to synchronize model «modelColorProperty» color with the view", e); //$NON-NLS-1$
		}
	}
}, the«viewColorProperty»Style1);
«ENDDEFINE»

«DEFINE uniqueFeatureKey FOR genmodel::GenFeature»«genClass.ecoreClass.name»_«ecoreFeature.name.toFirstUpper()»«ENDDEFINE»