public class CLASS {

// [graphdef++]
	private java.util.Map myMethodsMap;
	
	private java.util.Set mySkippedDataTypeFeatures;
	
	private java.util.Set myAllowedNonDataTypeFeatures;

	private java.util.Map getMethodsMap() {
		if (myMethodsMap == null) {
			myMethodsMap = new java.util.HashMap();
			myMethodsMap.put("XorFill", "myFigure.setFillXOR");
			myMethodsMap.put("XorOutline", "myFigure.setOutlineXOR");
			myMethodsMap.put("LineKind", "myFigure.setLineStyle");
			myMethodsMap.put("CornerWidth", "myFigure.setCornerDimensions");
			myMethodsMap.put("CornerHeight", "myFigure.setCornerDimensions");
			myMethodsMap.put("Template", "myFigure.setPoints");
		}
		return myMethodsMap;
	}
	
	private java.util.Set getSkippedDataTypeFeatures() {
		if (mySkippedDataTypeFeatures == null) {
			mySkippedDataTypeFeatures = new java.util.HashSet();
			mySkippedDataTypeFeatures.add("name");
		}
		return mySkippedDataTypeFeatures;
	}
	
	private java.util.Set getAllowedNonDataTypeFeatures() {
		if (myAllowedNonDataTypeFeatures == null) {
			myAllowedNonDataTypeFeatures = new java.util.HashSet();
			myAllowedNonDataTypeFeatures.add("layout");
			myAllowedNonDataTypeFeatures.add("layoutData");
			myAllowedNonDataTypeFeatures.add("layout");
			myAllowedNonDataTypeFeatures.add("template");
		}
		return myAllowedNonDataTypeFeatures;
	}
	
	protected final boolean skip(GenFeature feature) {
		if (feature.getTypeGenClassifier() instanceof GenDataType) {
			return getSkippedDataTypeFeatures().contains(feature.getName());
		}
		return !getAllowedNonDataTypeFeatures().contains(feature.getName());
	}
	
	private final StringBuffer getValue(String modelElementVariable, GenFeature feature) {
		StringBuffer result = new StringBuffer();
		String featureName = feature.getName();
		if ("cornerWidth".equals(featureName) || "cornerHeight".equals(featureName)) {
			result.append("getMapMode().DPtoLP(");
			result.append(modelElementVariable);
			result.append(".getCornerWidth()), getMapMode().DPtoLP(");
			result.append(modelElementVariable);
			result.append(".getCornerHeight())");
		} else {
			result.append(modelElementVariable);
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result;
	}
	
	private final void transform(StringBuffer value, GenFeature feature) {
		String featureName = feature.getName();
		if ("cornerWidth".equals(featureName) || "cornerHeight".equals(featureName)) {
			value.insert(0, "new org.eclipse.draw2d.geometry.Dimension(");
			value.append(")");
		} else if ("lineKind".equals(featureName)) {
			value.insert(0, "getLineStyle(");
			value.append(")");
		} else if ("template".equals(featureName)) {
			value.insert(0, "getPointList(");
			value.append(")");
		}
	}
	
	private final void setValue(StringBuffer value, GenFeature feature) {
		value.insert(0, "(");
		java.util.Map map = getMethodsMap();
		String accessorName = feature.getAccessorName();
		if (map.containsKey(accessorName)) {
			value.insert(0, (String) map.get(accessorName));
		} else {
			if (feature.getTypeGenClassifier() instanceof GenDataType) {
				value.insert(0, accessorName);
				value.insert(0, "myFigure.set");
			} else {
				value.insert(0, "Changed");
				value.insert(0, feature.getName());
			}
		}	
		value.append(")");
	}
	
	protected final String getProcessChangesCall(String modelElementVariable, GenFeature feature) {
		StringBuffer result = getValue(modelElementVariable, feature);
		transform(result, feature);
		setValue(result, feature);
		return result.toString();
	}
// [graphdef--] 

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument) {
		return "";
	}
   
}