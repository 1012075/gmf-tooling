public class CLASS {

// [graphdef++]
	private java.util.Map myMap;

	private java.util.Map getMap() {
		if (myMap == null) {
			myMap = new java.util.HashMap();
			myMap.put("XorFill", "FillXOR");
			myMap.put("XorOutline", "OutlineXOR");
			myMap.put("LineKind", "LineStyle");
			myMap.put("CornerWidth", "CornerDimensions");
			myMap.put("CornerHeight", "CornerDimensions");
			myMap.put("Name", null);
		}
		return myMap;
	}
	
	protected final boolean skip(GenFeature feature) {
		if (feature.getTypeGenClassifier() instanceof GenDataType) {
			java.util.Map map = getMap();
			String accessorName = feature.getAccessorName();
			return map.containsKey(accessorName) && map.get(accessorName) == null;
		}
		return true;
	}

	protected final String getSetterName(GenFeature feature) {
		java.util.Map map = getMap();
		String accessorName = feature.getAccessorName();
		if (map.containsKey(accessorName)) {
			return "set" + ((String) map.get(accessorName));
		} else {
			return "set" + accessorName;
		}
	}
	
	protected final String getValue(String valueVariable, String modelElementVariable, GenFeature feature) {
		String featureName = feature.getName();
		if ("cornerWidth".equals(featureName)) {
			return "new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(" + valueVariable + ")," +
				"getMapMode().DPtoLP(" + modelElementVariable + ".getCornerHeight()))";
		}
		if ("cornerHeight".equals(featureName)) {
			return "new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(" + modelElementVariable + ".getCornerWidth()), " + 
				"getMapMode().DPtoLP(" + valueVariable + "))";
		}
		if ("lineKind".equals(featureName)) {
			return "\"LINE_DASH\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH :" +
				"\"LINE_DOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT :" +
				"\"LINE_DASHDOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT :" +
				"\"LINE_DASHDOTDOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT :" +
				"\"LINE_CUSTOM\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM :" +
				"org.eclipse.draw2d.Graphics.LINE_SOLID";
		}
		return valueVariable;
	}
// [graphdef--] 

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument) {
		return "";
	}
   
}