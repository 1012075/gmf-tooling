modeltype GMFMAP uses mappings('http://www.eclipse.org/gmf/2006/mappings');
modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
modeltype GMFGRAPH uses gmfgraph('http://www.eclipse.org/gmf/2006/GraphicalDefinition');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');

library ModeledViewmaps;

-- *************************************************************************************
-- Modeled Viewmaps
-- *************************************************************************************

helper viewmaps(in mapRoot : GMFMAP::Mapping, inout genDiagram : GMFGEN::GenDiagram) {
	
	genDiagram.viewmap := object ModeledViewmap {
		figureModel := mapRoot.diagram.diagramCanvas.oclAsType(EObject);
	};
	
	genDiagram.topLevelNodes->forEach(node) {
		var topReference := node.invresolveone(TopNodeReference); 
		node.viewmap := topReference.child.diagramNode.viewmap();
		node.labels->forEach(label) {
			var labelMapping := label.invresolveone(LabelMapping);
			label.viewmap := labelMapping.diagramLabel.viewmap();
		}
	};
	
	genDiagram.childNodes->forEach(node) {
		var childReference := node.invresolveone(ChildReference);
		node.viewmap := childReference.child.diagramNode.viewmap();
		node.labels->forEach(label) {
			var labelMapping := label.invresolveone(LabelMapping);
			label.viewmap := labelMapping.diagramLabel.viewmap();
		}
	};
	
	genDiagram.links->forEach(link) {
		var linkMapping := link.invresolveone(LinkMapping);
		link.viewmap := linkMapping.diagramLink.viewmap();
		link.labels->forEach(label) {
			var labelMapping := label.invresolveone(LabelMapping);
			label.viewmap := labelMapping.diagramLabel.viewmap();
		}
	};
	
	genDiagram.compartments->forEach(cpt) {
		var cptMapping := cpt.invresolveone(CompartmentMapping);
		cpt.viewmap := cptMapping.compartment.viewmap();
	}
}

helper GMFGRAPH::Node::viewmap() : GMFGEN::Viewmap {
	var rs := object ModeledViewmap { 
		figureModel := self.oclAsType(ECORE::EObject); 
	};
	
	return rs;
}

helper GMFGRAPH::Connection::viewmap() : GMFGEN::Viewmap {
	var rs := object ModeledViewmap { 
		figureModel := self.oclAsType(ECORE::EObject); 
	};
	
	return rs;
}
helper GMFGRAPH::Compartment::viewmap() : GMFGEN::Viewmap {
	var rs := object ModeledViewmap { 
		figureModel := self.oclAsType(ECORE::EObject); 
	};
	
	return rs;
}
helper GMFGRAPH::DiagramLabel::viewmap() : GMFGEN::Viewmap {
	var rs := object ModeledViewmap { 
		figureModel := self.oclAsType(ECORE::EObject); 
	};
	
	-- for GenLinkLabel, need to specify alignment based on AlignmentFacet
	-- besides, need to create LabelOffsetAttributes and optionally populate it from LabelOffsetFacet
	return rs;
}