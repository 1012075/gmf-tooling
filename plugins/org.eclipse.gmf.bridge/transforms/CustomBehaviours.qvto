/**
 * Copyright (c) 2011, 2012 Montages A.G.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Guillaume Hillairet (Montages A.G.) : initial implementation
*/
library CustomBehaviours;

import Mappings;

modeltype GMFMAP uses mappings('http://www.eclipse.org/gmf/2006/mappings');
modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
modeltype GMFGRAPH uses gmfgraph('http://www.eclipse.org/gmf/2006/GraphicalDefinition');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');

--
--	Custom Behaviour
--

helper GMFMAP::Mapping::customBehaviours() {
	self.nodes->collect(e |
		if e.resolveone(GenTopLevelNode).visualID <= 0 then {
		 	var genNode := e.resolveone(GenTopLevelNode);
		 	genNode.behaviour += e.child.visualEffects->map createVisualEffects(genNode); 
			e.child.children->collect(customBehaviours());
		} endif
	);
	
	self.links->collect(customBehaviours());
--	self.getCompartments()->collect(e | e.c.customBehaviours(e.n, e.r));
	
	return;
}

helper GMFMAP::ChildReference::customBehaviours() {
	var node := self.findProcessableChildReference();
	if not node.oclIsUndefined() then
		node.map structure(node.child).behaviour += 
			node.child.visualEffects->map createVisualEffects(node.map structure(node.child))
	endif
}

helper GMFMAP::LinkMapping::customBehaviours() {
	self.map structure().behaviour += self.visualEffects->map createVisualEffects(self.map structure());
	return;
}

--
--	VisualEffect
--

mapping GMFMAP::VisualEffectMapping::createVisualEffects(parent: GMFGEN::GenCommonBase): GMFGEN::GenVisualEffect {
	name := self.diagramPin.name;
	pinKind := self.diagramPin.oclAsType(EObject).eClass().name;
	operationName := self.diagramPin.getOperationName();
	operationType := self.diagramPin.getOperationType();
	oclExpression := self.oclExpression;
	
	editPolicyQualifiedClassName := 
		parent.getDiagram().editPoliciesPackageName + 
		'.' + 
		self.diagramPin.name.firstToUpper() + // FIXME Should be valid Java Class Name
		parent.visualID.toString();
	key := result.editPolicyQualifiedClassName + '.KEY';
}

--
--	Helpers
--

helper GMFGRAPH::DiagramElement::getOperationName(pin: GMFGRAPH::Pin): String =
	if not self.figure.actualFigure.hasFigurePin(pin) then
		let graphChildAccess = self.figure.accessors->any(figure.hasFigurePin(pin)) in
		if graphChildAccess.oclIsUndefined() then
			pin.getOperationName()	
		else
			 graphChildAccess.accessor + "()." + pin.getOperationName()
		endif 
	else pin.getOperationName() endif;

helper GMFGRAPH::Figure::hasFigurePin(pin: GMFGRAPH::Pin): Boolean =
	let realFigure = 
		if self.oclIsTypeOf(FigureRef) then 
			self.oclAsType(FigureRef).figure 
		else self.oclAsType(RealFigure) endif
	in realFigure.pins->includes(pin);
