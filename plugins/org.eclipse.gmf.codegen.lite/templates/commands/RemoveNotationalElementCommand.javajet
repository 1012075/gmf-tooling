<%@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="RemoveNotationalElementCommandGenerator"
	imports="org.eclipse.gmf.common.codegen.*"%>

<%
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class RemoveNotationalElementCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
	/**
	 * @generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> childView;
	/**
	 * @generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView;

	/**
	 * @generated
	 */
	public RemoveNotationalElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> childView) {
		this.parentView = parentView;
		this.childView = childView;
	}

	/**
	 * @generated
	 */
	public boolean canExecute() {
		return parentView.getChildren().contains(childView);
	}

	/**
	 * @generated
	 */
	public boolean canUndo() {
		return true;
	}

	/**
	 * @generated
	 */
	public void execute() {
		parentView.removeChild(childView);
	}

	/**
	 * @generated
	 */
	public void redo() {
		execute();
	}

	/**
	 * @generated
	 */
	public void undo() {
		parentView.insertChild(childView);
	}
}
<%importManager.emitSortedImports();%>
