<%@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="ReplaceNotationalElementCommandGenerator"
	imports="org.eclipse.gmf.common.codegen.*"%>

<%
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class ReplaceNotationalElementCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
	/**
	 * @generated
	 */
	private final CreateNotationalElementCommand createCommand;
	/**
	 * @generated
	 */
	private final RemoveNotationalElementCommand removeCommand;
	/**
	 * @generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView;

	/**
	 * @generated
	 */
	public ReplaceNotationalElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView, CreateNotationalElementCommand createCommand, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView) {
		this.createCommand = createCommand;
		this.obsoleteView = obsoleteView;
		this.removeCommand = new RemoveNotationalElementCommand(parentView, obsoleteView);
	}

	/**
	 * @generated
	 */
	public boolean canExecute() {
		return createCommand != null && createCommand.canExecute() && removeCommand != null && removeCommand.canExecute();
	}

	/**
	 * @generated
	 */
	public boolean canUndo() {
		return createCommand != null && createCommand.canUndo() && removeCommand != null && removeCommand.canUndo();
	}

	/**
	 * @generated
	 */
	public void execute() {
		createCommand.execute();
		removeCommand.execute();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> createdView = createCommand.getCreatedView();
		if (createdView == null || obsoleteView == null || !createdView.eClass().equals(obsoleteView.eClass())) {
			return;
		}
		if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode().equals(createdView.eClass())) {
			copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint());
		} else if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge().equals(createdView.eClass())) {
			copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge_Bendpoints());
		}
	}

	/**
	 * @generated
	 */
	private void copy(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> source, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> target, <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature) {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> oldValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) source.eGet(feature);
		if (oldValue == null) {
			return;	//nothing to copy
		}
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> newValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) target.eGet(feature);
		if (newValue != null && !newValue.eClass().equals(oldValue.eClass())) {
			return;	//incompatible instances.
		}
		target.eSet(feature, oldValue);
	}

	/**
	 * @generated
	 */
	public void undo() {
		removeCommand.undo();
		createCommand.undo();
	}

	/**
	 * @generated
	 */
	public void redo() {
		execute();
	}
}
<%importManager.emitSortedImports();%>
