<%@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="DiagramEditorUtilGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final GenPlugin genPlugin = editorGen.getPlugin();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;

importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);
importManager.addImport("java.io.File");
importManager.addImport("org.eclipse.ui.IWorkbench");
importManager.addImport("org.eclipse.ui.IWorkbenchPage");
importManager.addImport("org.eclipse.ui.IWorkbenchWindow");
importManager.addImport("org.eclipse.ui.PlatformUI");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.IEditorDescriptor");
importManager.addImport("org.eclipse.swt.widgets.Shell");
importManager.addImport("org.eclipse.swt.widgets.FileDialog"); 
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.common.ui.URIEditorInput");

importManager.registerInnerClass("DiagramInitializer");
%>

<%@include file="../common/featureGetAccessor.jetinc"%>

/**
 * @generated
 */
public class <%=genDiagram.getDiagramEditorUtilClassName()%> {
	/**
	 * @generated
	 */
	public static String openFilePathDialog(Shell shell, String fileExtensionFilter, int style) {
		FileDialog fileDialog = new FileDialog(shell, style);
		fileDialog.setFilterExtensions(new String[]{fileExtensionFilter});

		fileDialog.open();
		if (fileDialog.getFileName() != null && fileDialog.getFileName().length() > 0) {
			return fileDialog.getFilterPath() + File.separator + fileDialog.getFileName();
		}
		else
		{
			return null;
		}
	}

<%
if (editorGen.getEditor().isEclipseEditor()) {
%>
	/**
	 * @generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> openEditor(URI fileURI) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
		IWorkbenchPage page = workbenchWindow.getActivePage();

		IEditorDescriptor editorDescriptor = workbench.getEditorRegistry().getDefaultEditor(fileURI.lastSegment());
		if (editorDescriptor == null) {
			MessageDialog.openError(
			workbenchWindow.getShell(),
			"Error",
			"There is no editor registered for the file " + fileURI.toFileString());
			return null;
		} else {
			try {
				return page.openEditor(new URIEditorInput(fileURI), editorDescriptor.getId());
			} catch (PartInitException exception) {
				MessageDialog.openError(
				workbenchWindow.getShell(),
				"Error Opening Editor",
				exception.getMessage());
				return null;
			}
		}
	}
<%
} else {
%>
	/**
	 * @generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> showView(URI fileURI) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
		IWorkbenchPage page = workbenchWindow.getActivePage();


		try {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> diagramView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%>) page.showView(<%=importManager.getImportedName(editorGen.getEditor().getQualifiedClassName())%>.ID);
			if (!diagramView.showDiagram(null, fileURI)) {
				return null;
			}
			return diagramView;
		} catch (PartInitException exception) {
			MessageDialog.openError(
			workbenchWindow.getShell(),
			"Error Opening View",
			exception.getMessage());
			return null;
		}
	}
<%
}
%>

	/**
	 * @generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> createDiagramFor(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramRoot) {
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID != <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramRoot)) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
		result.setElement(diagramRoot);
		<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(result);
		new DiagramInitializer().initDiagramContents(result);
		return result;
	}

	/**
	 * @generated
	 */
	private static class DiagramInitializer {
<%@ include file="../common/initDiagramContents.jetinc"%>
	}
<%
if (!genDiagram.getEditorGen().isSameFileForDiagramAndModel()) {
%>
	/**
	 * @generated
	 */
	public static URI getDiagramFileURI(URI modelFileURI) {
		if (modelFileURI == null || !modelFileURI.isFile()) {
			return null;
		}
		return modelFileURI.trimFileExtension().appendFileExtension("<%=editorGen.getDiagramFileExtension()%>");
	}

	/**
	 * @generated
	 */
	public static URI getModelFileURI(URI diagramFileURI) {
		if (diagramFileURI == null || !diagramFileURI.isFile()) {
			return null;
		}
		return diagramFileURI.trimFileExtension().appendFileExtension("<%=editorGen.getDomainFileExtension()%>");
	}
<%
}
%>

	/**
	 * Returns whether the given element is read only in its editing domain.
	 * @generated
	 */
	public static boolean isReadOnly(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
		if (element == null) {
			return true;
		}
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = element.eResource();
		if (resource == null) {
			return false;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(resource);
		if (editingDomain == null) {
			return false;
		}
		return editingDomain.isReadOnly(resource);
	}
}
<%importManager.emitSortedImports();%>
