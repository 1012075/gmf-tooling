<%@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.gef.Tool");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gef.tools.CreationTool");
importManager.addImport("org.eclipse.gef.tools.ConnectionCreationTool");
importManager.addImport("org.eclipse.gef.palette.PaletteContainer");
importManager.addImport("org.eclipse.gef.palette.PaletteDrawer");
importManager.addImport("org.eclipse.gef.palette.PaletteGroup");
importManager.addImport("org.eclipse.gef.palette.PaletteRoot");
importManager.addImport("org.eclipse.gef.palette.ConnectionCreationToolEntry");
importManager.addImport("org.eclipse.gef.palette.MarqueeToolEntry");
importManager.addImport("org.eclipse.gef.palette.SelectionToolEntry");
importManager.addImport("org.eclipse.gef.palette.ToolEntry");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.emf.edit.provider.IItemLabelProvider");
importManager.addImport("org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry");
importManager.addImport("org.eclipse.emf.common.notify.AdapterFactory");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=palette.getFactoryClassName()%> {
	/**
	 * @generated
	 */
	private final AdapterFactory domainAdapterFactory;

	/**
	 * @generated
	 */
	public <%=palette.getFactoryClassName()%>(AdapterFactory domainAdapterFactory) {
		this.domainAdapterFactory = domainAdapterFactory;
	}

	/**
	 * @generated
	 */
	public void contributeToPalette(PaletteRoot paletteRoot) {
        PaletteGroup controls = new PaletteGroup("Controls");
        paletteRoot.add(controls);

        ToolEntry tool = new SelectionToolEntry();
        controls.add(tool);
        paletteRoot.setDefaultEntry(tool);

        controls.add(new MarqueeToolEntry());
<%
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%
final List nodeCreationTools = new ArrayList();
final List linkCreationTools = new ArrayList();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>

	/**
	 * @generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitle()%>");
<%
List tools = toolGroup.getEntries();
for (int j = 0; j < tools.size(); j++) {
	ToolGroupItem groupItem = (ToolGroupItem) tools.get(j);
	if (groupItem instanceof ToolEntry) {
			ToolEntry toolEntry = (ToolEntry) groupItem;
			if (!toolEntry.getGenNodes().isEmpty()) {
				nodeCreationTools.add(toolEntry);
			} else if (!toolEntry.getGenLinks().isEmpty()) {
				linkCreationTools.add(toolEntry);
			}%>
		paletteContainer.add(<%=toolEntry.getCreateMethodName()%>());
<%	} else if (groupItem instanceof ToolGroup) {
	/* FIXME */
	} else if (groupItem instanceof Separator) {%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%	} /*else - no more options possible, log warning? */%>
<%} /*for*/%>
		return paletteContainer;
	}
<%
}
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		ToolEntry nodeCreationTool = (ToolEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNodes();
		GenNode firstGenNode = (GenNode) genNodes.get(0);
		GenClass genClass = firstGenNode.getDomainMetaClass();
		final String domainElementInstanceCreationCode;
		if (!genClass.isMapEntry()) {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + 
				importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName() + "())";
		}
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=nodeCreationTool.getCreateMethodName()%>() {
		<%if (nodeCreationTool.getSmallIconPath() != null) {%>
		ImageDescriptor smallImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=nodeCreationTool.getSmallIconPath()%>");
		<%} else {%>
		ImageDescriptor smallImage = getImage(<%=domainElementInstanceCreationCode%>);
		<%}%>
		<%if (nodeCreationTool.getLargeIconPath() != null) {%>
		ImageDescriptor largeImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=nodeCreationTool.getLargeIconPath()%>");
		<%} else {%>
		ImageDescriptor largeImage = smallImage;
		<%}%>
		final int[] visualIds = new int[] {
<%
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();
%>
			<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genNodesIterator.hasNext()) {%>,<%}%>
<%
		}
%>		
		};
		return new <%=importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry")%>("<%=nodeCreationTool.getTitle()%>", 
			"<%=nodeCreationTool.getDescription()%>", new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallImage, largeImage) {
			public Tool createTool() {
				Tool result = new CreationTool() {
					protected Request createTargetRequest() {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>(visualIds);
						request.setFactory(getFactory());
						return request;
					}
					protected void performCreation(int button) {
						super.performCreation(button);
						final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> createdEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());
						if (createdEditPart != null) {
							getCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {
								public void run() {
									if (createdEditPart.isActive()) {
										createdEditPart.performRequest(new <%=importManager.getImportedName("org.eclipse.gef.Request")%>(<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT));
									}
								}
							});
						}
					}
				};
				result.setProperties(getToolProperties());
				return result;
			}
		};
	}
<%
	}

	for (int j = 0; j < linkCreationTools.size(); j++) {
		ToolEntry linkCreationTool = (ToolEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLinks();
		GenLink firstGenLink = (GenLink) genLinks.get(0);
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		final String domainElementInstanceCreationCode;
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = "null";
		}
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=linkCreationTool.getCreateMethodName()%>() {
		<%if (linkCreationTool.getSmallIconPath() != null) {%>
		ImageDescriptor smallImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=linkCreationTool.getSmallIconPath()%>");
		<%} else {%>
		ImageDescriptor smallImage = getImage(<%=domainElementInstanceCreationCode%>);
		<%}%>
		<%if (linkCreationTool.getLargeIconPath() != null) {%>
		ImageDescriptor largeImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=linkCreationTool.getLargeIconPath()%>");
		<%} else {%>
		ImageDescriptor largeImage = smallImage;
		<%}%>
		final int[] visualIds = new int[] {
<%
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
			<%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genLinksIterator.hasNext()) {%>,<%}%>
<%
		}
%>		
		};
		return new ConnectionCreationToolEntry("<%=linkCreationTool.getTitle()%>", "<%=linkCreationTool.getDescription()%>", 
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>.class), smallImage, largeImage) {
			public Tool createTool() {
				Tool result = new ConnectionCreationTool() {
					{
						setUnloadWhenFinished(true);
					}
					protected Request createTargetRequest() {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>(visualIds);
						request.setFactory(getFactory());
						return request;
					}
				};
				result.setProperties(getToolProperties());
				return result;
			}
		};
	}
<%
	}
%>

	/**
	 * @generated
	 */
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
	}
	
	/**
	 * @generated
	 */
	private ImageDescriptor getImage(Object o) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));
		}
		return null;
	}
}
<%importManager.emitSortedImports();%>
