<%@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.gef.Tool");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gef.tools.CreationTool");
importManager.addImport("org.eclipse.gef.tools.ConnectionCreationTool");
importManager.addImport("org.eclipse.gef.palette.PaletteContainer");
importManager.addImport("org.eclipse.gef.palette.PaletteDrawer");
importManager.addImport("org.eclipse.gef.palette.PaletteGroup");
importManager.addImport("org.eclipse.gef.palette.PaletteRoot");
importManager.addImport("org.eclipse.gef.palette.ConnectionCreationToolEntry");
importManager.addImport("org.eclipse.gef.palette.MarqueeToolEntry");
importManager.addImport("org.eclipse.gef.palette.SelectionToolEntry");
importManager.addImport("org.eclipse.gef.palette.ToolEntry");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.emf.edit.provider.IItemLabelProvider");
importManager.addImport("org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry");
importManager.addImport("org.eclipse.emf.common.notify.AdapterFactory");

importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=palette.getFactoryClassName()%> {
	/**
	 * @generated
	 */
	private final AdapterFactory domainAdapterFactory;

	/**
	 * @generated
	 */
	public <%=palette.getFactoryClassName()%>(AdapterFactory domainAdapterFactory) {
		this.domainAdapterFactory = domainAdapterFactory;
	}

	/**
	 * @generated
	 */
	public void contributeToPalette(PaletteRoot paletteRoot) {
        PaletteGroup controls = new PaletteGroup("Controls");
        paletteRoot.add(controls);

        ToolEntry tool = new SelectionToolEntry();
        controls.add(tool);
        paletteRoot.setDefaultEntry(tool);

        controls.add(new MarqueeToolEntry());
<%
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%
final LinkedList<ToolGroup> toolGroupsQueue = new LinkedList<ToolGroup>();
for(Object next : palette.getGroups()) {
	toolGroupsQueue.add((ToolGroup) next);
}
final LinkedList<ToolEntry> toolsQueue = new LinkedList<ToolEntry>();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();
%>

	/**
	 * @generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
<%if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { %>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer")%>("<%=toolGroup.getTitle()%>");
<%} else if (toolGroup.isStack()) {%>
<%
	if (toolGroup.getSmallIconPath() != null) {
%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolGroup.getSmallIconPath()%>");
<%
	} else {
%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = null;
<%
	}
%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteStack")%>("<%=toolGroup.getTitle()%>", <%if (toolGroup.getDescription() != null) {%>"<%=toolGroup.getDescription()%>"<%} else {%>null<%}%>, smallImage);
<%} else {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup")%>("<%=toolGroup.getTitle()%>");
<%}
if (toolGroup.getDescription() != null) {%>
		paletteContainer.setDescription("<%=toolGroup.getDescription()%>");
<%}%>
<%
for(Iterator it = toolGroup.getEntries().iterator(); it.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) it.next();
	if (groupItem instanceof ToolEntry) {
		toolsQueue.add((ToolEntry) groupItem);
%>
		paletteContainer.add(<%=((ToolEntry) groupItem).getCreateMethodName()%>());
<%	} else if (groupItem instanceof ToolGroup) {
		toolGroupsQueue.addLast((ToolGroup) groupItem);
%>
		paletteContainer.add(<%=((ToolGroup) groupItem).getCreateMethodName()%>());
<%
	} else if (groupItem instanceof Separator) {%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%	} /*else - no more options possible, log warning? */%>
<%} /*for*/%>
		return paletteContainer;
	}
<%
} /*while*/
boolean hasNodeEntries = false;
boolean hasLinkEntries = false;
for(ToolEntry toolEntry : toolsQueue) {
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);
	String domainElementInstanceCreationCode = null;
	if (firstGenElement instanceof GenNode) {
		GenNode firstGenNode = (GenNode) firstGenElement;
		GenClass genClass = firstGenNode.getDomainMetaClass();
		if (!genClass.isMapEntry()) {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + 
				importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName() + "())";
		}
	} else if (firstGenElement instanceof GenLink) {
		GenLink firstGenLink = (GenLink) firstGenElement;
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		}
	}
%>

	/**
	 * @generated
	 */
	private ToolEntry <%=toolEntry.getCreateMethodName()%>() {
		<%if (toolEntry.getSmallIconPath() != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolEntry.getSmallIconPath()%>");
		<%} else if (domainElementInstanceCreationCode != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = getImageDescriptor(<%=domainElementInstanceCreationCode%>); 
		<%} else {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = null;
		<%}%>
		<%if (toolEntry.getLargeIconPath() != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> largeImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolEntry.getLargeIconPath()%>");
		<%} else {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> largeImage = smallImage;
		<%}%>
<%
	if (!toolEntry.getElements().isEmpty()) {
%>
		final int[] visualIds = new int[] {
<%
		for (Iterator genElementsIterator = toolEntry.getElements().iterator(); genElementsIterator.hasNext();) {
			GenCommonBase next = (GenCommonBase) genElementsIterator.next();
%>
			<%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genElementsIterator.hasNext()) {%>,<%}%>
<%
		}
	}
%>
		};
<%
	if (firstGenElement instanceof GenNode) {
		hasNodeEntries = true;
%>
		ToolEntry result = new NodeToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, visualIds);
<%
	} else if (firstGenElement instanceof GenLink) {
		hasLinkEntries = true;
%>
		ToolEntry result = new LinkToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, visualIds);
<%
	} else {
%>
		ToolEntry result = new ToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage) {};
<%
	}
	// there's a problem with qualifiedToolName - we should also respect different tools 
	// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
	if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {
%>
		result.setToolClass(<%=importManager.getImportedName(toolEntry.getQualifiedToolName())%>.class);
<%
	} /*tool class presence*/
	if (!toolEntry.getProperties().isEmpty()) {
		for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
			Map.Entry entry = (Map.Entry) it.next();
%>
		result.setToolProperty("<%=entry.getKey()%>", "<%=entry.getValue()%>");
<%
		} /*properties iterator*/
	} /*properties presence check*/
%>
		return result;
	}
<%
}	/*for*/
%>

<%
if (hasNodeEntries) {
%>
	/**
	 * @generated
	 */
	private static class NodeToolEntry extends <%=importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry")%> {

		/**
		 * @generated
		 */
		private final int[] myVisualIDs;

		/**
		 * @generated
		 */
		private NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {
			super(title, description, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallIcon, largeIcon);
			myVisualIDs = visualIDs;
		}

		/**
		 * @generated
		 */
		public Tool createTool() {
			Tool result = new CreationTool() {
				protected Request createTargetRequest() {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>(myVisualIDs);
					request.setFactory(getFactory());
					return request;
				}
				protected void performCreation(int button) {
					super.performCreation(button);
					final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> createdEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());
					if (createdEditPart != null) {
						getCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {
							public void run() {
								if (createdEditPart.isActive()) {
									createdEditPart.performRequest(new <%=importManager.getImportedName("org.eclipse.gef.Request")%>(<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT));
								}
							}
						});
					}
				}
			};
			result.setProperties(getToolProperties());
			return result;
		}
	}
<%
}	/*if (hasNodeEntries)*/
if (hasLinkEntries) {
%>

	/**
	 * @generated
	 */
	private static class LinkToolEntry extends ConnectionCreationToolEntry {

		/**
		 * @generated
		 */
		private final int[] myVisualIDs;

		/**
		 * @generated
		 */
		private LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {
			super(title, description, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>.class), smallIcon, largeIcon);
			myVisualIDs = visualIDs;
		}

		/**
		 * @generated
		 */
		public Tool createTool() {
			Tool result = new ConnectionCreationTool() {
				{
					setUnloadWhenFinished(true);
				}
				protected Request createTargetRequest() {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>(myVisualIDs);
					request.setFactory(getFactory());
					return request;
				}
			};
			result.setProperties(getToolProperties());
			return result;
		}
	}
<%
}	/*if (hasLinkEntries)*/
%>

	/**
	 * @generated
	 */
	private ImageDescriptor getImageDescriptor(Object o) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));
		}
		return null;
	}
}
<%importManager.emitSortedImports();%>
