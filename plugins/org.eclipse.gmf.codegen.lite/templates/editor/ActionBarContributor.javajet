<%@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="ActionBarContributorGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenEditorView editorView = (GenEditorView) ((Object[]) argument)[0];
final GenModel genModel = editorView.getEditorGen().getDomainGenModel();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

import org.eclipse.gef.ui.actions.ActionBarContributor;
import org.eclipse.gef.ui.actions.DeleteRetargetAction;
import org.eclipse.gef.ui.actions.GEFActionConstants;
import org.eclipse.gef.ui.actions.RedoRetargetAction;
import org.eclipse.gef.ui.actions.UndoRetargetAction;
import org.eclipse.gef.ui.actions.ZoomComboContributionItem;
import org.eclipse.gef.ui.actions.ZoomInRetargetAction;
import org.eclipse.gef.ui.actions.ZoomOutRetargetAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.ui.IWorkbenchActionConstants;
import org.eclipse.ui.actions.ActionFactory;

/**
 * The action bar contributor for the <%=genModel.getModelName()%> editor.
 *
 * @generated
 */
public class <%=editorView.getActionBarContributorClassName()%> extends ActionBarContributor {
<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("java.util.List")%> globalActionKeys = new <%=importManager.getImportedName("java.util.ArrayList")%>();

	/**
	 * @generated
	 */
	private ZoomComboContributionItem myZoomContributionItem;
<%
}
%>
	/**
	 * @generated
	 */
    protected void buildActions() {
        addRetargetAction(new UndoRetargetAction());
        addRetargetAction(new RedoRetargetAction());
        addRetargetAction(new DeleteRetargetAction());
    
        addRetargetAction(new ZoomInRetargetAction());
        addRetargetAction(new ZoomOutRetargetAction());
    }

	/**
	 * @generated
	 */
    protected void declareGlobalActionKeys() {
        addGlobalActionKey(ActionFactory.PRINT.getId());
		addGlobalActionKey(ActionFactory.DELETE.getId());
    }

<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @generated
	 */
	protected void addGlobalActionKey(String key) {
		super.addGlobalActionKey(key);
		globalActionKeys.add(key);
	}

<%
}
%>
	/**
	 * @generated
	 */
    public void contributeToMenu(IMenuManager menuManager) {
        super.contributeToMenu(menuManager);

<%
if (editorView.isEclipseEditor()) {
%>
        // add a "View" menu after "Edit"
        MenuManager viewMenu = new MenuManager("View");
        viewMenu.add(getAction(GEFActionConstants.ZOOM_IN));
        viewMenu.add(getAction(GEFActionConstants.ZOOM_OUT));
        
        menuManager.insertAfter(IWorkbenchActionConstants.M_EDIT, viewMenu);
<%
} else {
%>
		menuManager.add(getAction(GEFActionConstants.ZOOM_IN));
		menuManager.add(getAction(GEFActionConstants.ZOOM_OUT));
<%
}
%>
    }

	/**
	 * @generated
	 */
    public void contributeToToolBar(IToolBarManager toolBarManager) {
        super.contributeToToolBar(toolBarManager);

        toolBarManager.add(getAction(ActionFactory.UNDO.getId()));
        toolBarManager.add(getAction(ActionFactory.REDO.getId()));
    
        toolBarManager.add(new Separator());
<%
if (editorView.isEclipseEditor()) {
%>
        toolBarManager.add(new ZoomComboContributionItem(getPage()));
<%
} else {
%>
		myZoomContributionItem = new ZoomComboContributionItem(getPage());
		toolBarManager.add(myZoomContributionItem);
<%
}
%>
    }

<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @generated
	 */
	public void updateGlobalActions(<%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> viewPart) {
		<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%> registry = viewPart == null ? null : (<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%>) viewPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%>.class);
		<%=importManager.getImportedName("org.eclipse.ui.IActionBars")%> bars = getActionBars();
		if (registry == null) {
			bars.clearGlobalActionHandlers();
		} else {
			for (int i = 0; i < globalActionKeys.size(); i++) {
				String id = (String) globalActionKeys.get(i);
				bars.setGlobalActionHandler(id, registry.getAction(id));
			}
		}
		<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%> zoomManager = viewPart == null ? null : (<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>) viewPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>.class);
		myZoomContributionItem.setZoomManager(zoomManager);
		bars.updateActionBars();
	}
<%
}
%>
}
<%importManager.emitSortedImports();%>
