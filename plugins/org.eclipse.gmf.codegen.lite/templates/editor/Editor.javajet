<%@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="EditorGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenEditorView genEditor = (GenEditorView) ((Object[]) argument)[0];
final GenDiagram genDiagram = genEditor.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
final boolean isEclipseEditor = genEditor.isEclipseEditor();

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);%>

<%
importManager.registerInnerClass(genEditor.getClassName() + "ContextMenuProvider");
if (!isRichClientPlatform) {
	importManager.registerInnerClass("ResourceTracker");
}
%>

/**
 * @generated
 */
public class <%=genEditor.getClassName()%> extends <%=importManager.getImportedName(isEclipseEditor ? "org.eclipse.gmf.runtime.lite.parts.DiagramEditor" : "org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> {
	/**
	 * @generated
	 */
	public static final String ID = "<%=genEditor.getID()%>"; //$NON-NLS-1$

<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
	/**
	 * This class listens to changes to the file system in the workspace, and
	 * makes the following changes: 
	 * <ul><li>If an open, saved file gets deleted, the editor is closed.</li>
	 * <li>If an open file gets renamed or moved, the editor's
	 * input is changed accordingly.</li></ul>
	 *
	 * @generated
	 */
	private class ResourceTracker implements <%=importManager.getImportedName("org.eclipse.core.resources.IResourceChangeListener")%> {
		/**
		 * @generated
		 */
		public void resourceChanged(<%=importManager.getImportedName("org.eclipse.core.resources.IResourceChangeEvent")%> event) {
			<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> delta = event.getDelta();
			if (delta != null) {
				<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = getFileFromInput(getEditorInput());
				if (file != null) {
					<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> fileDelta = delta.findMember(file.getFullPath());
					if (fileDelta != null) {
						processFileDelta(fileDelta);
					}
				}
			}
		}

		/**
		 * @generated
		 */
		private void processFileDelta(<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> delta) {
			assert (delta != null && delta.getResource().equals(getFileFromInput(getEditorInput())));
			if (delta.getKind() == <%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%>.REMOVED) {
				if ((<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%>.MOVED_TO & delta.getFlags()) == 0) {
					<%/*XXX: make sure unsaved deleted file is handled correctly*/%>
					if (!isDirty()) {
						closeEditor();
					}
				} else {
					// else if it was moved or renamed
					final <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> newFile = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(delta.getMovedToPath());
					final <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> newEditorInput;
					if (getEditorInput() instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
						<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> newFileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(newFile.getFullPath().toString(), true);
						<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> oldFileURI = ((<%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) getEditorInput()).getURI();
						if (oldFileURI.fragment() != null) {
							newFileURI = newFileURI.appendFragment(oldFileURI.fragment());
						}
						newEditorInput = new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(newFileURI);
					} else {
						newEditorInput = new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(newFile);
					}
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%> display = getSite().getShell().getDisplay();
					display.asyncExec(new Runnable() {
						public void run() {
							setInput(newEditorInput);
						}
					});
				}
			}
		}
	}

	/**
	 * @generated
	 */
	private ResourceTracker resourceTracker;

	/**
	 * @generated
	 */
	private ResourceTracker getResourceTracker() {
		if (resourceTracker == null) {
			resourceTracker = new ResourceTracker();
		}
		return resourceTracker;
	}

<%
}
if (!isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genEditor.getActionBarContributorQualifiedClassName())%> myActionBarContributor;
<%
}
%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> diagramRoot;

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram;

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ComposedAdapterFactory")%> domainAdapterFactory;

	/**
	 * @generated
	 */
	protected void createActions() {
		addStackAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.UndoAction")%>(this));
		addStackAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.RedoAction")%>(this));

		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.DeleteAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.DirectEditAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this));

		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.LEFT));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.RIGHT));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.TOP));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.BOTTOM));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.CENTER));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.MIDDLE));

<%
if (isEclipseEditor) {
%>
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.SaveAction")%>(this));
<%
}
%>
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.PrintAction")%>(this));
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.ui.actions.LayoutDiagramAction")%>(this));

		<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> zoomIn = new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction")%>(getZoomManager());
		<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> zoomOut = new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomOutAction")%>(getZoomManager());
		addAction(zoomIn);
		addAction(zoomOut);
		getSite().getKeyBindingService().registerAction(zoomIn);
		getSite().getKeyBindingService().registerAction(zoomOut);
		<%=importManager.getImportedName("org.eclipse.gef.KeyHandler")%> keyHandler = getGraphicalViewer().getKeyHandler();
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.DEL, 127, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.getId()));
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.F2, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.DIRECT_EDIT));
	}

<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	void closeEditor() {
		getSite().getShell().getDisplay().syncExec(new Runnable() {
			public void run() {
				getSite().getPage().closeEditor(<%=genEditor.getClassName()%>.this, false);
			}
		});
	}
<%
}
if (!isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	protected void updateActionBars() {
		if (myActionBarContributor != null) {
			myActionBarContributor.updateGlobalActions(this);
		}
	}

<%
}
%>
	/**
	 * @generated
	 */
	public void dispose() {
<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> oldResource = getFileFromInput(getEditorInput());
		if (oldResource != null) {
			oldResource.getWorkspace().removeResourceChangeListener(getResourceTracker());
		}
<%
}
if (!isEclipseEditor) {
%>
		myActionBarContributor.dispose();
		myActionBarContributor = null;
<%
}
%>
		// important: always call super implementation of dispose
		super.dispose();
	}

<%
if (isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	public void doSave(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) {
		try {
			save(monitor);
			getCommandStack().markSaveLocation();
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(getSite().getShell(), "Error During Save", "The current <%=genDiagram.getEditorGen().getDomainGenModel().getModelName()%> model could not be saved.", e.getStatus());
		}
	}

<%
}
%>
	/**
	 * @generated
	 */
	public void configurePalette(<%=importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot")%> paletteRoot) {
<%
{
	final Palette palette = genDiagram.getPalette();
	if (palette != null) {
%>
		new <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>(getDomainAdapterFactory()).contributeToPalette(paletteRoot);
<%
	}
}
%>
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> getDiagramRoot() {
		return diagramRoot;
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagram() {
		return diagram;
	}

<%
if (isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.IEditorSite")%> site, <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) throws <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> {
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> file = getURIFromInput(input);
		if (file == null) {
			throw new <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%>("The specified input is not valid.");
		}
		super.init(site, input);
		// validate
		if (getDiagramRoot() == null) {
			throw new <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%>("The specified input is not valid.");
		}
	}

	/**
	 * @generated
	 */
	protected void setInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
<%
	if (!isRichClientPlatform) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> oldResource = getFileFromInput(getEditorInput());
		if (oldResource != null) {
			oldResource.getWorkspace().removeResourceChangeListener(getResourceTracker());
		}
<%
	}
%>
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> file = getURIFromInput(input);
		load(file);
		setPartName(file.lastSegment());
		super.setInput(input);
<%
	if (!isRichClientPlatform) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> newResource = getFileFromInput(getEditorInput());
		if (newResource != null) {
			newResource.getWorkspace().addResourceChangeListener(getResourceTracker());
		}
<%
	}
%>
	}

<%
	if (!isRichClientPlatform) {
%>
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> getFileFromInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) input).getFile();
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = getURIFromInput(input);
		if (uri != null) {
			if ("platform".equals(uri.scheme()) && (uri.segmentCount() > 2)) { //$NON-NLS-1$
				if ("resource".equals(uri.segment(0))) { //$NON-NLS-1$
					<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path = new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.decode(uri.path())).removeFirstSegments(1);
					return <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(path);
				}
			}
		}
		return null;
	}

<%
	}
%>
	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> getURIFromInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input == null) {
			return null;
		}
<%
	if (!isRichClientPlatform) {
%>
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>)input).getFile().getFullPath().toString(), true);
		}
<%
	}
%>
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) input).getURI();
		}
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IPathEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createFileURI(((<%=importManager.getImportedName("org.eclipse.ui.IPathEditorInput")%>)input).getPath().toOSString());
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) input.getAdapter(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.class);
		if (uri != null) {
			return uri;
		}
		return null;
	}

<%
}	//editor-specific code
%>

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> getDomainAdapterFactory() {
		if (domainAdapterFactory == null) {
			<%=importManager.getImportedName("java.util.List")%> factories = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			factories.add(new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory")%>());
<%
final EList genPackages = genDiagram.getEditorGen().getAllDomainGenPackages(true);
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
%>
			factories.add(new <%=importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%}%>
			factories.add(new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory")%>());
			factories.add(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.provider.NotationItemProviderAdapterFactory")%>());
			domainAdapterFactory = new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ComposedAdapterFactory")%>(factories);
		}
		return domainAdapterFactory;
	}

<%
if (!isEclipseEditor) {
%>
	/**
	 * @generated
	 */
	public void createPartControl(<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
		super.createPartControl(parent);
		<%=importManager.getImportedName("org.eclipse.ui.IActionBars")%> bars = getViewSite().getActionBars();
		myActionBarContributor = new <%=importManager.getImportedName(genEditor.getActionBarContributorQualifiedClassName())%>();
		myActionBarContributor.init(bars, getSite().getPage());
		bars.updateActionBars();
	}

	/**
	 * @generated
	 */
	protected void setInput(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramURI) throws <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> {
		load(diagramURI);
		if (diagram == null || diagramRoot == null) {
			throw new <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%>(new <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>(<%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%>.ERROR,
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID, 0, "Failed to load diagram", null));
		}
	}
<%
}
%>
	/**
	 * @generated
	 */
	private void load(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramFile) {
		diagramRoot = null;
		diagram = null;
		if (diagramFile == null) {
			return;
		}
		final <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramFileURI = diagramFile;
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = getEditingDomain();
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.getResource(diagramFile.trimFragment(), true);
		if (diagramResource == null) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%> operation = new <%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%>(editingDomain, "Load diagram", null) {
			protected <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				if (diagramFileURI.fragment() != null) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> possibleDiagram = diagramResource.getEObject(diagramFileURI.fragment());
					if (possibleDiagram instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) {
						diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) possibleDiagram;
					} else {
						return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
					}
				} else {
					diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) findInResource(diagramResource, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>.class);
					if (diagram == null) {
						diagram = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
						diagramResource.getContents().add(0, diagram);
						//Auxiliary creation should not be undoable.
						try {
							diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
					}
				}
				diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) diagram.getElement();
				if (diagramRoot == null) {
<%
{
%>
<%
	boolean sameFile = genDiagram.getEditorGen().isSameFileForDiagramAndModel();
	String resourceToUse;
	if (!sameFile) {
%>
					<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> modelFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.getModelFileURI(diagramFileURI);
					<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelResource = resourceSet.getResource(modelFile, true);
					if (modelResource == null) {
						diagram = null;
						return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
					}
<%
		resourceToUse = "modelResource";
	} else {
		resourceToUse = "diagramResource";
	}
%>
					diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) findInResource(<%=resourceToUse%>, <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>.class);
					if (diagramRoot == null) {
						diagramRoot = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
						<%=resourceToUse%>.getContents().add(0, <%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>diagramRoot);
						//We don't want this auxiliary creation to be undoable.
						try {
							<%=resourceToUse%>.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
					}
					if (!diagramRoot.equals(diagram.getElement())) {
						diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>diagramRoot);
					}
				}
				if (!diagram.eIsSet(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getView_Type())) {
					<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(diagram);
<%
	if (isEclipseEditor) {
%>
					doSave(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());
<%
	} else {
%>
						try {
							diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
<%
	}
%>
				}
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			}
		};
		try {
			operation.execute(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>(), null);
		} catch (<%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> e) {
			diagram = null;
			diagramRoot = null;
		}
	}
<%
}//local declarations
%>

	/**
	 * @generated
	 */
	private Object findInResource(<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource, Class expectedClass) {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = resource.getContents().iterator(); it.hasNext(); ) {
			Object next = it.next();
			if (expectedClass.isInstance(next)) {
				return next;
			}
		}
		return null;
	}

	/**
	 * @generated
	 */
	public void initializeGraphicalViewer() {
		// initialize the viewer with input
		<%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%> root = new <%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%>();
		getGraphicalViewer().setRootEditPart(root);
		getGraphicalViewer().setEditPartFactory(new <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>());

		<%=importManager.getImportedName("org.eclipse.draw2d.LayeredPane")%> printableLayers = (<%=importManager.getImportedName("org.eclipse.draw2d.LayeredPane")%>) root.getLayer(<%=importManager.getImportedName("org.eclipse.gef.LayerConstants")%>.PRINTABLE_LAYERS);
		<%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%> extLabelsLayer = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%>();
		extLabelsLayer.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.DelegatingLayout")%>());
		printableLayers.addLayerAfter(extLabelsLayer, <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER, <%=importManager.getImportedName("org.eclipse.gef.LayerConstants")%>.PRIMARY_LAYER);
		getGraphicalViewer().setContents(getDiagram());
	}

	/**
	 * @generated
	 */
	public void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%> viewer = getGraphicalViewer();
		// configure the context menu
		<%=importManager.getImportedName("org.eclipse.gef.ContextMenuProvider")%> provider = new <%=genEditor.getClassName()%>ContextMenuProvider(viewer);
		viewer.setContextMenu(provider);
		getSite().registerContextMenu(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID + ".editor.contextmenu", provider, getSite().getSelectionProvider()); //$NON-NLS-1$

		<%=importManager.getImportedName("org.eclipse.gef.KeyHandler")%> keyHandler = new <%=importManager.getImportedName("org.eclipse.gef.ui.parts.GraphicalViewerKeyHandler")%>(viewer);
		viewer.setKeyHandler(keyHandler);

		viewer.setProperty(<%=importManager.getImportedName("org.eclipse.gef.MouseWheelHandler")%>.KeyGenerator.getKey(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.CTRL), <%=importManager.getImportedName("org.eclipse.gef.MouseWheelZoomHandler")%>.SINGLETON);
	}

	/**
	 * @generated
	 */
	public boolean isFlyoutPalette() {
		return <%=genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout()%>;
	}

	/**
	 * @generated
	 */
	private class <%=genEditor.getClassName()%>ContextMenuProvider extends <%=importManager.getImportedName("org.eclipse.gef.ContextMenuProvider")%> {
		/**
		 * @generated
		 */
		public <%=genEditor.getClassName()%>ContextMenuProvider(<%=importManager.getImportedName("org.eclipse.gef.EditPartViewer")%> viewer) {
			super(viewer);
		}

		/**
		 * @generated
		 */
	    public void buildContextMenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuManager) {
	        <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.addStandardActionGroups(menuManager);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.UNDO.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_UNDO);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.REDO.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_UNDO);
	
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.COPY.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.PASTE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.DIRECT_EDIT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);

			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.ui.actions.ActionIds")%>.LAYOUT_ALL_ACTION, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_REST);

<%
if (isEclipseEditor) {
%>
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SAVE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_SAVE);
<%
}
%>
			appendAlignmentSubmenu(menuManager);
	    }

		/**
		 * @generated
		 */
		private void appendAlignmentSubmenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuManager) {
			// Alignment Actions
			<%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%> submenu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>("Align");
			submenu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS));
	
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_LEFT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_CENTER, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_RIGHT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_TOP, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_MIDDLE, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_BOTTOM, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
	
			if (!submenu.isEmpty()) {
				menuManager.appendToGroup(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_REST, submenu);
			}
		}

		/**
		 * @generated
		 */
		private void appendActionToMenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu, String actionId, String menuGroup) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action = getActionRegistry().getAction(actionId);
			if (action != null && action.isEnabled()) {
				menu.appendToGroup(menuGroup, action);
			}
		}
	}
}
<%importManager.emitSortedImports();%>
