<%@ jet package="org.eclipse.gmf.codegen.templates.lite.policies" class="OpenDiagramPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final OpenDiagramBehaviour behaviour = (OpenDiagramBehaviour) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = behaviour.getSubject().getDiagram();
final boolean openAsEditor = behaviour.isOpenAsEclipseEditor();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.registerInnerClass("OpenDiagramCommand");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.OpenDiagramEditPolicy")%> {
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getOpenCommand(<%=importManager.getImportedName("org.eclipse.gef.Request")%> openRequest) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> targetEditPart = getTargetEditPart(openRequest);
		if (false == targetEditPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) targetEditPart.getModel();
		return getOpenCommand(view);
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getOpenCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Style")%> linkStyle = view.getStyle(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getHintedDiagramLinkStyle());
		if (false == linkStyle instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%>) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(linkStyle);
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = new OpenDiagramCommand(linkStyle);
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domain, result);
	}

	/**
	 * @generated
	 */
	protected static class OpenDiagramCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%> myDiagramLink;

		/**
		 * @generated
		 */
		protected OpenDiagramCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%> linkStyle) {
			myDiagramLink = linkStyle;
		}

		/**
		 * @generated
		 */
		protected boolean prepare() {
			return true;
		}

		/**
		 * @generated
		 */
		public void execute() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagramToOpen = getDiagramToOpen();
			if (diagramToOpen == null) {
				diagramToOpen = createNewDiagram();
			}
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramURI = <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(diagramToOpen);
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage();
<%
if (openAsEditor) {
%>
			<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput = new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(diagramURI);
			try {
				page.openEditor(editorInput, getEditorID());
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				throw new RuntimeException("Can't open diagram", e);
			}
<%
} else {
%>
			try {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> diagramView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%>)page.showView(getViewID());
				diagramView.showDiagram(null, diagramURI);
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				throw new RuntimeException("Can't open diagram", e);
			}
<%
}
%>
		}

		/**
		 * @generated
		 */
		public void redo() {
			execute();
		}

		/**
		 * @generated
		 */
		public boolean canUndo() {
			return false;
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagramToOpen() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = myDiagramLink.getDiagramLink();
			// take first that matches the given model ID.
			if (result != null && result.getType().equals(getDiagramKind())) {
				return result;
			}
			return null;
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> createNewDiagram() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
			myDiagramLink.setDiagramLink(result);
			result.setElement(getDiagramDomainElement());
			addToResource(result);
			try {
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = myDiagramLink.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> next = (<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%>) it.next();
					if (next.isLoaded() && !<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.isReadOnly(next)) {
						next.save(<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.getSaveOptions());
					}
				}
			} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
				<%/*XXX: Throwing runtime exceptions is definitely not the most elegant way*/%>
				throw new RuntimeException("Can't create diagram of '" + getDiagramKind() + "' kind", e);
			}
			return result;
		}

		/**
		 * Returns the element that should be the underlying model element for the diagram.
		 * By default, the element associated with the edit part is returned.
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getDiagramDomainElement() {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) myDiagramLink.eContainer()).getElement();
		}

		/**
		 * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the initiating diagram.
		 * @generated
		 */
		protected void addToResource(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
			assert diagram.eResource() == null;
			assert myDiagramLink.eResource() != null;
			myDiagramLink.eResource().getContents().add(diagram);
		}

		/**
		 * @generated
		 */
		protected String getDiagramKind() {
<%if (behaviour.getDiagramKind() == null) {%>
			return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID;
<%} else {%>
			return "<%=behaviour.getDiagramKind()%>";
<%}%>
		}

		/**
		 * @generated
		 */
<%
if (openAsEditor) {
%>
		protected String getEditorID() {
<%
} else {
%>
		protected String getViewID() {
<%
}
%>
<%if (behaviour.getEditorID() == null) { %>
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>.ID;
<%} else {%>
			return "<%=behaviour.getEditorID()%>";
<%}%>
		}
	}
}
<%importManager.emitSortedImports();%>
