/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::providers::ValidationUtils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ValidationProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «validationProviderClassName» «EXPAND supertypes» {
	«EXPAND constraintsActive-»

	«EXPAND shouldConstraintsBePrivate-»

	«EXPAND runWithActiveConstraints-»

	«EXPAND isInDefaultEditorContext-»

	«EXPAND selectors FOR editorGen.audits-»

	«EXPAND strategy_support»

	«EXPAND AuditClass FOREACH editorGen.audits.rules.select(e| e.requiresConstraintAdapter && e.rule != null && e.target != null && e.target.getContext() != null)-»

	«EXPAND javaConstraints-»

	«EXPAND additions-»
} //«validationProviderClassName»
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE AuditClass FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedClassComment»
public static class «getConstraintAdapterLocalClassName()» extends org.eclipse.emf.validation.AbstractModelConstraint {
	«EXPAND xpt::Common::generatedMemberComment»
	private «root.editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;
	«EXPAND xpt::Common::generatedMemberComment»
	public «this.getConstraintAdapterLocalClassName()»() {
		expression = «EXPAND getExpression(root.editorGen.diagram, rule, target.getContext()) FOR root.editorGen.expressionProviders.getProvider(rule)»;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.core.runtime.IStatus validate(org.eclipse.emf.validation.IValidationContext ctx) {
		Object evalCtx = ctx.getTarget();
		«EXPAND adjustEvalCtx(root.editorGen.diagram) FOR target-»
		Object result = expression.evaluate(evalCtx);
		if(result instanceof Boolean && ((Boolean)result).booleanValue()) {
			return org.eclipse.core.runtime.Status.OK_STATUS;
		}
		return ctx.createFailureStatus(new Object[] { formatElement(ctx.getTarget()) }); 
	}
	«EXPAND AuditClass_formatElement-»
}
«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditable»«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenDomainAttributeTarget-»
if(evalCtx instanceof org.eclipse.emf.ecore.EObject) {
	evalCtx = ((org.eclipse.emf.ecore.EObject) evalCtx).eGet(«EXPAND MetaModel::MetaFeature FOR attribute»);
}
«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditedMetricTarget-»
evalCtx = «diagram.getMetricProviderQualifiedClassName()».calculateMetric(«toStringLiteral(metric.key)», evalCtx);	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionProviderBase»null«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier, false)»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenJavaExpressionProvider-»
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND MetaModel::MetaClass FOR genClassifier») {
	protected Object doEvaluate(Object context, java.util.Map env) {
		«EXPAND MetaModel::DeclareAndAssign("self", "context", true) FOR genClassifier»
		return «EXPAND javaConstraintsClassName FOR diagram».«this.getOperationName(valueSpec)»(self);
	}
}«-»
«ENDDEFINE»

«DEFINE AuditClass_formatElement FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatElement(org.eclipse.emf.ecore.EObject object) {
	if (object == null) {
		return String.valueOf(object);
	}
	org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «root.editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
	org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
	if (labelProvider != null) {
		return object.eClass() + " " + labelProvider.getText(object);
	}
	return object.toString();
}
«ENDDEFINE»

«DEFINE javaConstraints FOR gmfgen::GenDiagram-»
«LET getJavaAuditRules() AS javaAuditRules-»
«IF javaAuditRules.size() > 0-»
«EXPAND xpt::Common::generatedClassComment»
static class «EXPAND javaConstraintsClassName» {
	«EXPAND defineJavaConstraintOperation(editorGen.expressionProviders) FOREACH javaAuditRules-»
}	//«EXPAND javaConstraintsClassName»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenExpressionProviderContainer expressionProviders) FOR gmfgen::GenAuditRule-»
«EXPAND defineJavaConstraintOperation(this) FOR expressionProviders.getProvider(rule)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenJavaExpressionProvider-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(rule.rule, rule.target.getContext(), null)-»
«ENDDEFINE»

«DEFINE javaConstraintsClassName FOR gmfgen::GenDiagram»JavaAudits«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

