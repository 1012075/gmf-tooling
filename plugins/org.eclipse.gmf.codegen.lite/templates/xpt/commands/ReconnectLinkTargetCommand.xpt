/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»
«EXTENSION xpt::GenModelUtils»

«DEFINE ReconnectLinkTargetCommand FOR gmfgen::GenLink-»
«EXPAND xpt::Common::copyright FOR diagram.editorGen»
package «diagram.editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND attributes-»
	«EXPAND ctors-»
	«EXPAND prepare-»
	«EXPAND canReconnect-»
	«EXPAND createCommand-»
«IF creationConstraints <> null-»
	«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand('edge')-»
«ENDIF-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenLink»Reconnect«EXPAND xpt::commands::Common::commandNameInfix»TargetCommand«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenLink»«getDiagram().editCommandsPackageName».«EXPAND className»«ENDDEFINE»
«DEFINE supertypes FOR gmfgen::GenLink»extends org.eclipse.emf.common.command.CommandWrapper«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.Edge edge;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View newTarget;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View oldTarget;
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.gef.requests.ReconnectRequest request) {
		this((org.eclipse.gmf.runtime.notation.Edge)request.getConnectionEditPart().getModel(), (org.eclipse.gmf.runtime.notation.View)request.getTarget().getModel());
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.gmf.runtime.notation.Edge edge, org.eclipse.gmf.runtime.notation.View newTarget) {
		this.edge = edge;
		this.newTarget = newTarget;
		this.oldTarget = edge.getTarget();
	}
«ENDDEFINE»

«DEFINE prepare FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean prepare() {
«IF creationConstraints = null-»
		if (!canReconnect()) {
			return false;
		}
		return super.prepare();
«ELSE-»
		final boolean[] resultHolder = new boolean[1];
		//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
		final org.eclipse.emf.transaction.TransactionalEditingDomain domainModelEditDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(oldTarget.getDiagram().getElement());
		org.eclipse.emf.common.command.Command command = new org.eclipse.emf.common.command.AbstractCommand() {
			private org.eclipse.emf.common.command.Command deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
			public boolean canExecute() {
				return deleteCommand.canExecute();
			}
			public boolean canUndo() {
				return true;
			}
			public void redo() {
			}
			public void undo() {
			}
			public void execute() {
				deleteCommand.execute();
				try {
					resultHolder[0] = canReconnect();
				} finally {
					deleteCommand.undo();
				}
			}
		};
		if (!command.canExecute()) {
			return false;
		}
		new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(domainModelEditDomain, command).execute();
		if (!resultHolder[0]) {
			return false;
		}
		return super.prepare();
«ENDIF-»
	}
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean canReconnect() {
		«EXPAND xpt::commands::Common::checkLinkConstraints('edge.getSource().getElement()', 'newTarget.getElement()') FOR creationConstraints-»
		«EXPAND canReconnect FOR modelFacet-»
	}
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::LinkModelFacet-»
return false;
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::TypeLinkModelFacet-»
«LET childMetaFeature <> null and (childMetaFeature <> containmentMetaFeature and not childMetaFeature.ecoreFeature._derived) AS setChild-»
«LET targetMetaFeature <> null and (not targetMetaFeature.ecoreFeature._derived and (targetMetaFeature.ecoreFeature.oclIsKindOf(ecore::EReference) and (targetMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eOpposite <> containmentMetaFeature.ecoreFeature and (setChild implies targetMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eOpposite <> childMetaFeature.ecoreFeature)))) AS setTarget-»
«REM»Need to check the opposite of the target feature«ENDREM-»
	«IF setTarget-»
		«LET getReverse(targetMetaFeature) AS targetReverseFeature-»
			«IF targetReverseFeature <> null and not targetReverseFeature.ecoreFeature._derived-»
«EXPAND checkFeature('newTarget.getElement()', null) FOR targetReverseFeature-»
			«ENDIF-»
		«ENDLET-»
	«ENDIF-»
«ENDLET-»
«ENDLET-»
return true;
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::FeatureLinkModelFacet-»
«REM»Need to check the opposite of the meta feature«ENDREM-»
«LET getReverse(metaFeature) AS reverseMetaFeature-»
	«IF reverseMetaFeature <> null and not reverseMetaFeature.ecoreFeature._derived-»
		«EXPAND checkFeature('newTarget.getElement()', null) FOR reverseMetaFeature-»
	«ENDIF-»
«ENDLET-»
return true;
«ENDDEFINE»

«DEFINE createCommand FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.common.command.Command createCommand() {
		org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(oldTarget.getDiagram().getElement());
		org.eclipse.emf.common.command.CompoundCommand result = new org.eclipse.emf.common.command.CompoundCommand();
		result.append(new org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand(edge, newTarget));
		«EXPAND appendDomainModelCommand FOR modelFacet-»
		return result;
	}
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::LinkModelFacet-»
result.append(org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE);
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::TypeLinkModelFacet-»
«LET childMetaFeature <> null and (childMetaFeature <> containmentMetaFeature and not childMetaFeature.ecoreFeature._derived) AS setChild-»
«LET targetMetaFeature <> null and (not targetMetaFeature.ecoreFeature._derived and (targetMetaFeature.ecoreFeature.oclIsKindOf(ecore::EReference) and (targetMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eOpposite <> containmentMetaFeature.ecoreFeature and (setChild implies targetMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eOpposite <> childMetaFeature.ecoreFeature)))) AS setTarget-»
	«IF setTarget-»
		«IF targetMetaFeature.ecoreFeature.many-»
result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand('editingDomain', 'edge.getElement()', 'oldTarget.getElement()') FOR targetMetaFeature»);
		«ENDIF-»
result.append(«EXPAND xpt::commands::Common::plugFeatureCommand('editingDomain', 'edge.getElement()', 'newTarget.getElement()') FOR targetMetaFeature»);
	«ELSE-»
	«REM»No command may be generated here. Probably, this situation is impossible, but we'd better warn the user.«ENDREM-»
//XXX: Command should be added manually here. 
	«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::FeatureLinkModelFacet-»
«IF isContains(metaFeature)-»
if (newTarget.getElement().eContainer() != null) {
	result.append(org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE);
}
«ENDIF-»
«IF metaFeature.ecoreFeature.many-»
result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand('editingDomain', 'edge.getSource().getElement()', 'oldTarget.getElement()') FOR metaFeature»);
«ENDIF-»
«IF isContains(metaFeature)-»
result.append(new org.eclipse.emf.edit.command.AddCommand(editingDomain, «EXPAND xpt::commands::Common::getPhantomContainmentResource FOR 'edge'».getContents(), oldTarget.getElement()));
if (oldTarget.getElement().eResource() != null) {
	result.append(new org.eclipse.emf.edit.command.RemoveCommand(editingDomain, newTarget.getElement().eResource().getContents(), newTarget.getElement()));
}
«ENDIF-»
result.append(«EXPAND xpt::commands::Common::plugFeatureCommand('editingDomain', 'edge.getSource().getElement()', 'newTarget.getElement()') FOR metaFeature»);
«ENDDEFINE»

«DEFINE checkFeature(containerVar : String, containerClass : genmodel::GenClass) FOR genmodel::GenFeature-»
«IF ecoreFeature.upperBound.oclAsType(Integer) > 0-»
if («EXPAND xpt::commands::Common::featureMultiplicityComparator(containerVar, containerClass)») {
	return false;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenLink-»
«ENDDEFINE»
