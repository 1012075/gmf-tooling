/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::editor::i18n»
«EXTENSION xpt::editor::Wizard»

«DEFINE NewDiagramFileWizard FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «newDiagramFileWizardClassName» «EXPAND supertypes» {
	«EXPAND editingDomain-»
	«EXPAND selectedModelFile-»	
	«EXPAND creationPage-»
	«EXPAND selection-»
	«EXPAND workbenchPage-»
	«EXPAND diagramRoot-»

	«EXPAND ctor-»

	«EXPAND addPages-»

	«EXPAND performFinish-»

«IF isRichClientPlatform(self)-»
	«EXPAND SourceURISelectorPage-»
	«EXPAND DiagramURISelectorPage-»
«ENDIF-»
	«EXPAND RootElementSelectorPage-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.wizard.Wizard«ENDDEFINE»

«DEFINE selectedModelFileType FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»org.eclipse.emf.common.util.URI«ELSE»org.eclipse.core.resources.IFile«ENDIF»«ENDDEFINE»
«DEFINE selectedModelFileName FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»mySelectedModelFileURI«ELSE»mySelectedModelFile«ENDIF»«ENDDEFINE»
«DEFINE selectedModelFileAsURI FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»«EXPAND selectedModelFileName»«ELSE»org.eclipse.emf.common.util.URI.createPlatformResourceURI(«EXPAND selectedModelFileName».getFullPath().toString(), true)«ENDIF»«ENDDEFINE»
«DEFINE selectedModelFileAsString FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»«EXPAND selectedModelFileName».toString()«ELSE»«EXPAND selectedModelFileName».getFullPath().toString()«ENDIF»«ENDDEFINE»

«DEFINE editingDomain FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain myEditingDomain;
«ENDDEFINE»

«DEFINE selection FOR gmfgen::GenDiagram-»
«IF not isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.jface.viewers.IStructuredSelection mySelection;
«ENDIF-»
«ENDDEFINE»

«DEFINE workbenchPage FOR gmfgen::GenDiagram-»
«IF not isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IWorkbenchPage myWorkbenchPage;
«ENDIF-»
«ENDDEFINE»

«DEFINE selectedModelFile FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND selectedModelFileType» «EXPAND selectedModelFileName»;
«ENDDEFINE»

«DEFINE creationPage FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
private DiagramURISelectorPage myDiagramURISelectorPage;
«ELSE-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.dialogs.WizardNewFileCreationPage myFileCreationPage;
«ENDIF-»
«ENDDEFINE»

«DEFINE diagramRoot FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.ecore.EObject myDiagramRoot;
«ENDDEFINE»

«DEFINE ctor FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
public «newDiagramFileWizardClassName»(org.eclipse.emf.common.util.URI selectedModelFileURI, org.eclipse.emf.ecore.EObject diagramRoot, org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain) {
«ELSE-»
«EXPAND xpt::Common::generatedMemberComment»
public «newDiagramFileWizardClassName»(org.eclipse.core.resources.IFile selectedModelFile, org.eclipse.ui.IWorkbenchPage workbenchPage, org.eclipse.jface.viewers.IStructuredSelection selection, org.eclipse.emf.ecore.EObject diagramRoot, org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain) {
	«EXPAND assertNotNull('selectedModelFile')-»
	«EXPAND assertNotNull('workbenchPage')-»
	«EXPAND assertNotNull('selection')-»
	«EXPAND assertNotNull('diagramRoot')-»
«ENDIF-»
	«EXPAND assertNotNull('editingDomain')-»
«IF isRichClientPlatform(self)-»
	«EXPAND selectedModelFileName» = selectedModelFileURI;
«ELSE-»
	«EXPAND selectedModelFileName» = selectedModelFile;
	myWorkbenchPage = workbenchPage;
	mySelection = selection;
«ENDIF-»
	myDiagramRoot = diagramRoot;
	myEditingDomain = editingDomain;
	setDefaultPageImageDescriptor(«editorGen.plugin.getActivatorQualifiedClassName()».getBundledImageDescriptor("«EXPAND xpt::editor::CreationWizard::wizardBannerLocation»"));	«EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE assertNotNull(_var : String) FOR gmfgen::GenDiagram-»
assert «_var» != null : "Null «_var» in «newDiagramFileWizardClassName» constructor"; «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE addPages FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void addPages() {
«IF isRichClientPlatform(self)-»
	if (mySelectedModelFileURI == null) {
		addPage(new SourceURISelectorPage());
	}
	myDiagramURISelectorPage = new DiagramURISelectorPage();
	addPage(myDiagramURISelectorPage);
«ELSE-»
	myFileCreationPage = new org.eclipse.ui.dialogs.WizardNewFileCreationPage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageName(self)) FOR editorGen», mySelection) {
		public void createControl(org.eclipse.swt.widgets.Composite parent) {
			super.createControl(parent);

			org.eclipse.core.resources.IContainer parentContainer = mySelectedModelFile.getParent();
			String originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();
			String fileExtension = ".«editorGen.diagramFileExtension»"; «EXPAND xpt::Common::nonNLS»
			String fileName = originalFileName + fileExtension;
			for (int i = 1; i > 0 && parentContainer.getFile(new org.eclipse.core.runtime.Path(fileName)).exists(); i++) {
				fileName = originalFileName + i + fileExtension;
			}
			if (parentContainer.getFile(new org.eclipse.core.runtime.Path(fileName)).exists()) {
				return;	//failed to set name that does not exist, just leave empty.
			}
			setFileName(fileName);
		}
	};
	myFileCreationPage.setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageTitle(self)) FOR editorGen»);
	myFileCreationPage.setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageDescription(self)) FOR editorGen»);
	addPage(myFileCreationPage);
«ENDIF-»
	RootElementSelectorPage diagramRootElementSelectionPage = new RootElementSelectorPage();
	diagramRootElementSelectionPage.setModelElement(myDiagramRoot);
	addPage(diagramRootElementSelectionPage);
}
«ENDDEFINE»

«DEFINE performFinish FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean performFinish() {
	org.eclipse.emf.ecore.resource.ResourceSet resourceSet = myEditingDomain.getResourceSet();
	«EXPAND defineDiagramFileURI-»
	final org.eclipse.emf.ecore.resource.Resource diagramResource = resourceSet.createResource(diagramFileURI);
	org.eclipse.emf.common.command.AbstractCommand command = new org.eclipse.emf.common.command.AbstractCommand(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardCommandLabel(self)) FOR editorGen») {
		private org.eclipse.gmf.runtime.notation.Diagram myCreatedDiagram;

		protected boolean prepare() {
			int diagramVID = «EXPAND xpt::editor::VisualIDRegistry::getDiagramVisualIDMethodCall»(myDiagramRoot);
			if (diagramVID != «EXPAND xpt::editor::VisualIDRegistry::visualID») {
				return false;
			}
			return true;
		}
		public void execute() {
			myCreatedDiagram = «getDiagramEditorUtilQualifiedClassName()».createDiagramFor(myDiagramRoot);
			assert myCreatedDiagram != null;
			diagramResource.getContents().add(myCreatedDiagram);
«IF editorGen.sameFileForDiagramAndModel-»
			diagramResource.getContents().add(myCreatedDiagram.getElement());
«ENDIF-»
		}
		public void redo() {
			execute();
		}
		public boolean canUndo() {
			return false;
		}
	};
	try {
		new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(myEditingDomain, command).execute();
		diagramResource.save(«getDiagramEditorUtilQualifiedClassName()».getSaveOptions());
		«EXPAND openEditor-»
		if (editor != null) {
			«EXPAND layoutEditor-»
		}
	} catch (java.io.IOException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Save operation failed for: " + «EXPAND fileString», ex);	«EXPAND xpt::Common::nonNLS»
«IF editorGen.editor.eclipseEditor and not isRichClientPlatform(self)-»
	} catch (org.eclipse.ui.PartInitException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to open editor", ex); «EXPAND xpt::Common::nonNLS»
«ENDIF-»
	}
	return true;
}
«ENDDEFINE»

«DEFINE fileString FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»diagramFileURI.toString()«ELSE»diagramFile.getFullPath().toString()«ENDIF»«ENDDEFINE»

«DEFINE defineDiagramFileURI FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
	org.eclipse.emf.common.util.URI diagramFileURI = myDiagramURISelectorPage.getNewFileURI();
«ELSE-»
	org.eclipse.core.resources.IFile diagramFile = myFileCreationPage.createNewFile();
	«getDiagramEditorUtilQualifiedClassName()».setCharset(diagramFile);
	org.eclipse.emf.common.util.URI diagramFileURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);
«ENDIF-»
«ENDDEFINE»

«DEFINE openEditor FOR gmfgen::GenDiagram-»
«IF editorGen.editor.eclipseEditor-»
	«IF isRichClientPlatform(self)-»
org.eclipse.ui.IEditorPart editor = «getDiagramEditorUtilQualifiedClassName()».openEditor(diagramFileURI);
	«ELSE-»
org.eclipse.ui.IEditorPart editor = org.eclipse.ui.ide.IDE.openEditor(myWorkbenchPage, diagramFile);
	«ENDIF-»
«ELSE-»
org.eclipse.ui.IViewPart editor = «getDiagramEditorUtilQualifiedClassName()».showView(diagramFileURI);
«ENDIF-»
«ENDDEFINE»

«DEFINE layoutEditor FOR gmfgen::GenDiagram-»
org.eclipse.gmf.runtime.lite.services.IDiagramLayouter layouter = (org.eclipse.gmf.runtime.lite.services.IDiagramLayouter) editor.getAdapter(org.eclipse.gmf.runtime.lite.services.IDiagramLayouter.class);
if (layouter != null) {
	org.eclipse.gef.GraphicalViewer graphicalViewer = (org.eclipse.gef.GraphicalViewer) editor.getAdapter(org.eclipse.gef.GraphicalViewer.class);
	if (graphicalViewer != null) {
		org.eclipse.emf.common.command.Command layoutCommand = layouter.layout((org.eclipse.gef.GraphicalEditPart) graphicalViewer.getContents());
		if (layoutCommand != null && layoutCommand.canExecute()) {
			graphicalViewer.getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(myEditingDomain, layoutCommand));
«IF editorGen.editor.eclipseEditor-»
			diagramResource.save(«getDiagramEditorUtilQualifiedClassName()».getSaveOptions());
«ENDIF-»
		}
	}
}
«ENDDEFINE»

«DEFINE SourceURISelectorPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class SourceURISelectorPage extends «EXPAND xpt::editor::URISelectorPage::qualifiedClassName» {
	«EXPAND xpt::Common::generatedMemberComment»
	public SourceURISelectorPage() {
		super(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardSourceURISelectorPageName(self)) FOR editorGen»);
		setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardSourceURISelectorPageTitle(self)) FOR editorGen»);
		setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardSourceURISelectorPageDescription(self)) FOR editorGen»);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getFileExtension() {
		return "«editorGen.domainFileExtension»";	«EXPAND xpt::Common::nonNLS»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		if (super.validatePage()) {
			mySelectedModelFileURI = getFileURI();
			return true;
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String validateFile(java.io.File file) {
		if (!file.exists()) {
			return «EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardNoSourceFile(self)) FOR editorGen»;
		}
		return null;
	}
}
«ENDDEFINE»

«DEFINE DiagramURISelectorPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class DiagramURISelectorPage extends «EXPAND xpt::editor::URISelectorPage::qualifiedClassName» {
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.common.util.URI myNewFileURI;

	«EXPAND xpt::Common::generatedMemberComment»
	public DiagramURISelectorPage() {
		super(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageName(self)) FOR editorGen»);
		setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageTitle(self)) FOR editorGen»);
		setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramURISelectorPageDescription(self)) FOR editorGen»);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getFileExtension() {
		return "«editorGen.diagramFileExtension»";	«EXPAND xpt::Common::nonNLS»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setVisible(boolean visible) {
		super.setVisible(visible);
		if (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {
			java.io.File originalFile = new java.io.File(mySelectedModelFileURI.toFileString());
			String originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();
			java.io.File parentFile = originalFile.getParentFile();
			java.io.File newFile = new java.io.File(parentFile, originalFileName + getFileExtension());
			for(int i = 1; i > 0 && newFile.exists(); i++) {
				newFile = new java.io.File(parentFile, originalFileName + i + getFileExtension());
			}
			if (newFile.exists()) {
				return;	//failed to set name that does not exist, just leave empty.
			}
			setFile(newFile);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		myNewFileURI = null;
		if (super.validatePage()) {
			myNewFileURI = getFileURI();
			return true;
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.common.util.URI getNewFileURI() {
		return myNewFileURI;
	}
		
	«EXPAND xpt::Common::generatedMemberComment»
	protected String validateFile(java.io.File file) {
		if (file.exists()) {
			return «EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardDiagramFileExists(self)) FOR editorGen»;
		}
		return null;
	}
}
«ENDDEFINE»

«DEFINE RootElementSelectorPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class RootElementSelectorPage extends «EXPAND xpt::editor::ModelElementSelectionPage::qualifiedClassName» {
	«EXPAND xpt::Common::generatedMemberComment»
	protected RootElementSelectorPage() {
		super(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageName(self)) FOR editorGen»);
		setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageTitle(self)) FOR editorGen»);
		setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageDescription(self)) FOR editorGen»);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getSelectionTitle() {
		return «EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageLabelText(self)) FOR editorGen»;
	}

«IF isRichClientPlatform(self)-»
	«EXPAND xpt::Common::generatedMemberComment»
	public void setVisible(boolean visible) {
		if (visible) {
			if (myDiagramRoot != null) {
				setModelElement(myDiagramRoot);
			} else {
				org.eclipse.emf.ecore.resource.Resource resource;
				try {
					resource = myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true);
				} catch (org.eclipse.emf.common.util.WrappedException e) {
					resource = null;
				}
				setModelResource(resource);
			}
		}
		super.setVisible(visible);
	}

«ENDIF-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		myDiagramRoot = getModelElement();
		if (myDiagramRoot == null) {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageNoRootSelected(self)) FOR editorGen»);
			return false;
		}
		boolean result = «EXPAND xpt::editor::VisualIDRegistry::visualID FOR getDiagram()» == «EXPAND xpt::editor::VisualIDRegistry::getDiagramVisualIDMethodCall»(myDiagramRoot);
		if (result) {
			setErrorMessage(null);
		} else {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewDiagramFileWizardRootElementSelectorPageInvalidRootSelected(self)) FOR editorGen»);
		}
		return result;
	}
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardNoSourceFile(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardSourceURISelectorPageName(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardSourceURISelectorPageTitle(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardSourceURISelectorPageDescription(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardDiagramFileExists(self))-»
«ENDIF-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardDiagramURISelectorPageName(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardDiagramURISelectorPageTitle(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardDiagramURISelectorPageDescription(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageName(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageTitle(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageDescription(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageLabelText(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageNoRootSelected(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardRootElementSelectorPageInvalidRootSelected(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewDiagramFileWizardCommandLabel(self))-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardNoSourceFile(self), 'Source file does not exist')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardSourceURISelectorPageName(self), 'Select source file')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardSourceURISelectorPageTitle(self), 'Source file')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardSourceURISelectorPageDescription(self), 'Select file with semantic model element to be depicted on diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardDiagramFileExists(self), 'Diagram file already exists')-»
«ENDIF-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardDiagramURISelectorPageName(self), 'Initialize new ' + editorGen.diagramFileExtension + ' file')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardDiagramURISelectorPageTitle(self), 'Diagram file')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardDiagramURISelectorPageDescription(self), 'Create new diagram based on ' + editorGen.domainGenModel.modelName + ' model content')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageName(self), 'Select diagram root element')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageTitle(self), 'Diagram root element')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageDescription(self), 'Select semantic model element to be depicted on diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageLabelText(self), '&Select diagram root element')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageNoRootSelected(self), 'No diagram root element selected')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardRootElementSelectorPageInvalidRootSelected(self), 'Invalid diagram root element is selected')-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewDiagramFileWizardCommandLabel(self), 'Initializing diagram contents')-»
«ENDDEFINE»

