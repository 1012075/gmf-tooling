/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::editor::Wizard»
«EXTENSION xpt::editor::GenDiagram»
«EXTENSION xpt::editor::i18n»

«DEFINE CreationWizardPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «creationWizardPageClassName» «EXPAND supertypes» {
	«EXPAND attrs-»

	«EXPAND ctor-»

	«EXPAND createControl-»

	«EXPAND validatePage-»

	«EXPAND getResult-»

	«EXPAND getDiagramFileURI-»

	«EXPAND finish-»

	«EXPAND doFinish-»

	«EXPAND createDiagramFile-»

«IF standaloneDomainModel(self) and hasDocumentRoot(self)-»
	«EXPAND createDocumentRoot-»
«ENDIF-»

	«EXPAND handleException-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»extends «IF isRichClientPlatform(self)»org.eclipse.jface.wizard.WizardPage«ELSE»org.eclipse.ui.dialogs.WizardNewFileCreationPage«ENDIF»«ENDDEFINE»

«DEFINE attrs FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.swt.widgets.Text fileField;
«ENDIF-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND createdDiagramFileType» «EXPAND createdDiagramFileAttributeName»;
«ENDDEFINE»

«DEFINE createdDiagramFileAttributeName FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»myCreatedDiagramFileURI«ELSE»myCreatedDiagramFile«ENDIF»«ENDDEFINE»
«DEFINE createdDiagramFileMethodName FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»getCreatedDiagramFileURI«ELSE»getCreatedDiagramFile«ENDIF»«ENDDEFINE»
«DEFINE createdDiagramFileType FOR gmfgen::GenDiagram»«IF isRichClientPlatform(self)»org.eclipse.emf.common.util.URI«ELSE»org.eclipse.core.resources.IFile«ENDIF»«ENDDEFINE»

«DEFINE getResult FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public «EXPAND createdDiagramFileType» «EXPAND createdDiagramFileMethodName»() {
	return «EXPAND createdDiagramFileAttributeName»;
}
«ENDDEFINE»

«DEFINE ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public «creationWizardPageClassName»(«EXPAND ctorFormalParams») {
	super(«EXPAND ctor_superCallParams»);
	setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageTitle(self)) FOR editorGen»);
	setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageDescription(self)) FOR editorGen»);
}
«ENDDEFINE»

«DEFINE ctorFormalParams FOR gmfgen::GenDiagram»«IF not isRichClientPlatform(self)»org.eclipse.jface.viewers.IStructuredSelection selection«ENDIF»«ENDDEFINE»

«DEFINE ctor_superCallParams FOR gmfgen::GenDiagram»«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPagePageName(self)) FOR editorGen»«IF not isRichClientPlatform(self)», selection«ENDIF»«ENDDEFINE»

«DEFINE createControl FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
public void createControl(org.eclipse.swt.widgets.Composite parent) {
	org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE);
	{
		org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout();
		layout.numColumns = 1;
		layout.verticalSpacing = 12;
		composite.setLayout(layout);

		org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData();
		data.verticalAlignment = org.eclipse.swt.layout.GridData.FILL;
		data.grabExcessVerticalSpace = true;
		data.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL;
		composite.setLayoutData(data);
	}
	org.eclipse.swt.widgets.Label resourceURILabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.LEFT);
	{
		resourceURILabel.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageResourceURILabel(self)) FOR editorGen»);

		org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData();
		data.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL;
		resourceURILabel.setLayoutData(data);
	}

	org.eclipse.swt.widgets.Composite fileComposite = new org.eclipse.swt.widgets.Composite(composite, org.eclipse.swt.SWT.NONE);
	{
		org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData();
		data.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL;
		data.grabExcessHorizontalSpace = true;
		fileComposite.setLayoutData(data);

		org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout();
		layout.marginHeight = 0;
		layout.marginWidth = 0;
		layout.numColumns = 2;
		fileComposite.setLayout(layout);
	}
	fileField = new org.eclipse.swt.widgets.Text(fileComposite, org.eclipse.swt.SWT.BORDER);
	{
		org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData();
		data.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL;
		data.grabExcessHorizontalSpace = true;
		data.horizontalSpan = 1;
		fileField.setLayoutData(data);
	}

	fileField.addModifyListener(validator);
	org.eclipse.swt.widgets.Button resourceURIBrowseFileSystemButton = new org.eclipse.swt.widgets.Button(fileComposite, org.eclipse.swt.SWT.PUSH);
	resourceURIBrowseFileSystemButton.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageBrowseButtonLabel(self)) FOR editorGen»);

	resourceURIBrowseFileSystemButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() {
			 public void widgetSelected(org.eclipse.swt.events.SelectionEvent event) {
				 String fileExtension = "«editorGen.diagramFileExtension»";
				 String filePath = «getDiagramEditorUtilQualifiedClassName()».openFilePathDialog(getShell(), "*." + fileExtension, org.eclipse.swt.SWT.OPEN);	«EXPAND xpt::Common::nonNLS»
				 if (filePath != null) {
					 if (!filePath.endsWith("." + fileExtension)) {	«EXPAND xpt::Common::nonNLS»
						 filePath += "." + fileExtension;	«EXPAND xpt::Common::nonNLS»
					 }
					 fileField.setText(filePath);
				 }
			 }
		 }); 
	setPageComplete(validatePage());
	setControl(composite);
}

«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.swt.events.ModifyListener validator =
	new org.eclipse.swt.events.ModifyListener() {
		public void modifyText(org.eclipse.swt.events.ModifyEvent e) {
			setPageComplete(validatePage());
		}
	};
«ENDIF-»
«ENDDEFINE»

«DEFINE validatePage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected boolean validatePage() {
«IF isRichClientPlatform(self)-»
	org.eclipse.emf.common.util.URI diagramFileURI = getDiagramFileURI();
	if (diagramFileURI == null || diagramFileURI.isEmpty()) {
		setErrorMessage(null);
		return false;
	}

	if (diagramFileURI.isFile()) {
		java.io.File diagramFile = new java.io.File(diagramFileURI.toFileString());
		if (diagramFile.exists()) {
			setErrorMessage(java.text.MessageFormat.format(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageDiagramFileExists(self)) FOR editorGen», new Object[] {diagramFile}));
			return false;
		}
	}
«ELSE-»
	if (!super.validatePage()) {
		return false;
	}
	String fileName = getFileName();
	if (fileName == null) {
		setErrorMessage(null);
		return false;
	}

	org.eclipse.core.runtime.IPath path = getContainerFullPath().append(fileName);
	if (path.getFileExtension() == null) {
		path = path.addFileExtension("«editorGen.diagramFileExtension»");	«EXPAND xpt::Common::nonNLS»
	}
	if (org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().exists(path)) {
		setErrorMessage(java.text.MessageFormat.format(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageDiagramFileExists(self)) FOR editorGen», new Object[] {path.toOSString()}));
		return false;
	}
«ENDIF-»
	String requiredExt = "«editorGen.diagramFileExtension»";	«EXPAND xpt::Common::nonNLS»
«IF isRichClientPlatform(self)-»
	String enteredExt = diagramFileURI.fileExtension();
«ELSE-»
	String enteredExt = path.getFileExtension();
«ENDIF-»
	if (enteredExt == null || !enteredExt.equals(requiredExt)) {
		setErrorMessage(java.text.MessageFormat.format(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageIncorrectExtension(self)) FOR editorGen», new Object[] {requiredExt})); 
		return false;
	}
«IF not editorGen.sameFileForDiagramAndModel-»
	«IF isRichClientPlatform(self)-»
	org.eclipse.emf.common.util.URI modelFileURI = «getDiagramEditorUtilQualifiedClassName()».getModelFileURI(getDiagramFileURI());
	java.io.File modelFile = new java.io.File(modelFileURI.toFileString());
	if (modelFile.exists()) {
		setErrorMessage(java.text.MessageFormat.format(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageDiagramFileExists(self)) FOR editorGen», new Object[] {modelFile}));
		return false;
	}
	«ELSE-»
	path = path.removeFileExtension().addFileExtension("«editorGen.domainFileExtension»"); «EXPAND xpt::Common::nonNLS»
	if (org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().exists(path)) {
		setErrorMessage(java.text.MessageFormat.format(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageDiagramFileExists(self)) FOR editorGen», new Object[] {path.lastSegment()}));
		return false;
	}
	«ENDIF-»
«ENDIF-»
	setErrorMessage(null);
	return true;
}
«ENDDEFINE»

«DEFINE getDiagramFileURI FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.common.util.URI getDiagramFileURI() {
	try {
		return org.eclipse.emf.common.util.URI.createFileURI(fileField.getText());
	} catch (Exception exception) {
	}
	return null;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE finish FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment('Performs the operations necessary to create and open the diagram\n' + 
'@return boolean indicating whether the creation and opening the Diagram was successful ')»
public boolean finish() {
	final boolean[] result = new boolean[1];
«IF isRichClientPlatform(self)-»
		org.eclipse.jface.operation.IRunnableWithProgress op = new org.eclipse.jface.operation.IRunnableWithProgress() {
			public void run(org.eclipse.core.runtime.IProgressMonitor monitor) {
«ELSE-»
		org.eclipse.ui.actions.WorkspaceModifyOperation op = new org.eclipse.ui.actions.WorkspaceModifyOperation(null) {
			protected void execute(org.eclipse.core.runtime.IProgressMonitor monitor) {
«ENDIF-»
				result[0] = doFinish(monitor);
			}
		};

		try {
			getContainer().run(false, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (java.lang.reflect.InvocationTargetException e) {
			if (e.getTargetException() instanceof org.eclipse.core.runtime.CoreException) {
				org.eclipse.jface.dialogs.ErrorDialog.openError(
					getContainer().getShell(),
					«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageCreationFailed(self)) FOR editorGen»,
					null,	// no special message
					((org.eclipse.core.runtime.CoreException) e.getTargetException()).getStatus());
			}
			else {
				// CoreExceptions are handled above, but unexpected runtime exceptions and errors may still occur.
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getLog().log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageCreationFailed(self)) FOR editorGen», e.getTargetException()));
			}
			return false;
		}
		return result[0];
	}
«ENDDEFINE»

«DEFINE doFinish FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment('@param monitor the <code>org.eclipse.core.runtime.IProgressMonitor</code> to use to indicate progress and check for cancellation\n' + 
'@return boolean indicating whether the diagram was created and opened successfully')»
public boolean doFinish(org.eclipse.core.runtime.IProgressMonitor monitor) {
	«EXPAND createdDiagramFileAttributeName» = createDiagramFile(monitor);
	return «EXPAND createdDiagramFileAttributeName» != null;
}
«ENDDEFINE»

«DEFINE createDiagramFile FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND createdDiagramFileType» createDiagramFile(org.eclipse.core.runtime.IProgressMonitor monitor) {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = «EXPAND xpt::editor::Common::createEditingDomain FOR editorGen»;
	org.eclipse.emf.ecore.resource.ResourceSet resourceSet = editingDomain.getResourceSet();
	«EXPAND defineResources-»

	if (diagramResource != null«IF standaloneDomainModel(self)» && modelResource != null«ENDIF») {
«IF domainDiagramElement <> null and not standaloneDomainModel(self)-»
		((org.eclipse.emf.ecore.xmi.XMLResource) diagramResource).getDefaultSaveOptions().put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE);
		((org.eclipse.emf.ecore.xmi.XMLResource) diagramResource).getDefaultLoadOptions().put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE);
«ENDIF-»
		org.eclipse.emf.workspace.AbstractEMFOperation saveOperation = new org.eclipse.emf.workspace.AbstractEMFOperation(editingDomain, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageCommandLabel(self)) FOR editorGen») {
			public org.eclipse.core.runtime.IStatus doExecute(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
				«EXPAND createAndSave-»
			}
		};
		try {
			saveOperation.execute(new org.eclipse.core.runtime.NullProgressMonitor(), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Exception occurred while creating the diagram", e);	«EXPAND xpt::Common::nonNLS»
			return null;
		}
		«EXPAND setCharset-»
		«EXPAND openDiagram-»
«IF isRichClientPlatform(self)-»
		return getDiagramFileURI();
«ELSE-»
		return diagramFile;
«ENDIF-»
	}
return null;
}
«ENDDEFINE»

«DEFINE defineResources FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform(self)-»
final org.eclipse.emf.ecore.resource.Resource diagramResource = resourceSet.createResource(getDiagramFileURI());
	«IF standaloneDomainModel(self)-»
final org.eclipse.emf.ecore.resource.Resource modelResource = resourceSet.createResource(«getDiagramEditorUtilQualifiedClassName()».getModelFileURI(getDiagramFileURI()));
	«ENDIF-»
«ELSE-»
org.eclipse.core.runtime.IPath diagramFilePath = getContainerFullPath().append(getFileName());
if (diagramFilePath.getFileExtension() == null) {
	diagramFilePath = diagramFilePath.addFileExtension("«editorGen.diagramFileExtension»");		«EXPAND xpt::Common::nonNLS»
}
final org.eclipse.core.resources.IFile diagramFile = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getFile(diagramFilePath);
final org.eclipse.emf.ecore.resource.Resource diagramResource = resourceSet.createResource(org.eclipse.emf.common.util.URI.createPlatformResourceURI(diagramFilePath.toString(), true));
	«IF standaloneDomainModel(self)-»
org.eclipse.core.runtime.IPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension("«editorGen.domainFileExtension»"); «EXPAND xpt::Common::nonNLS»
final org.eclipse.core.resources.IFile modelFile = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getFile(modelFilePath);
final org.eclipse.emf.ecore.resource.Resource modelResource = resourceSet.createResource(org.eclipse.emf.common.util.URI.createPlatformResourceURI(modelFilePath.toString(), true));
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE createAndSave FOR gmfgen::GenDiagram-»
monitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageTaskName(self)) FOR editorGen», 1);
try {
«IF domainDiagramElement <> null-»
	«EXPAND createInitialModel('model')»
	«LET (if standaloneDomainModel(self) then 'modelResource' else 'diagramResource' endif) AS resourceToUse-»
	«resourceToUse».getContents().add(«IF hasDocumentRoot(self)»createDocumentRoot(model)«ELSE»«EXPAND MetaModel::DowncastToEObject('model') FOR domainDiagramElement»«ENDIF»);
	«ENDLET-»
«ENDIF-»
	org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createDiagram();
«IF domainDiagramElement <> null-»
	diagram.setElement(«EXPAND MetaModel::DowncastToEObject('model') FOR domainDiagramElement»);
«ENDIF-»
	«getNotationViewFactoryQualifiedClassName()».INSTANCE.decorateView(diagram);
	diagramResource.getContents().add(diagram);
	try {
«IF standaloneDomainModel(self)-»
		modelResource.save(«getDiagramEditorUtilQualifiedClassName()».getSaveOptions());
«ENDIF-»
		diagramResource.save(«getDiagramEditorUtilQualifiedClassName()».getSaveOptions());
	} catch (java.io.IOException e) {
		handleSaveException(e);
	}
	return org.eclipse.core.runtime.Status.OK_STATUS;
} finally {
	monitor.done();
}
«ENDDEFINE»

// TODO: introduce separate method as in FullRT
«DEFINE createInitialModel(varName : String) FOR gmfgen::GenDiagram»«EXPAND MetaModel::NewInstance(varName) FOR domainDiagramElement»«ENDDEFINE»

«DEFINE setCharset FOR gmfgen::GenDiagram-»
«IF not isRichClientPlatform(self)-»
«getDiagramEditorUtilQualifiedClassName()».setCharset(diagramFile);
	«IF standaloneDomainModel(self)-»
«getDiagramEditorUtilQualifiedClassName()».setCharset(modelFile);
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE openDiagram FOR gmfgen::GenDiagram-»
«IF editorGen.editor.eclipseEditor-»
«IF isRichClientPlatform(self)-»
if («getDiagramEditorUtilQualifiedClassName()».openEditor(getDiagramFileURI()) == null) {
	return null;
}
«ELSE-»
try {
	org.eclipse.ui.ide.IDE.openEditor(org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);
} catch (org.eclipse.ui.PartInitException e) {
	«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getLog().log(e.getStatus());
	return null;
}
«ENDIF-»
«ELSE-»
if («getDiagramEditorUtilQualifiedClassName()».showView(diagramResource.getURI()) == null) {
	return null;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE createDocumentRoot FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static «EXPAND MetaModel::QualifiedClassName FOR getDocumentRoot(self)» createDocumentRoot(«EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» model) {
	«EXPAND MetaModel::NewInstance('docRoot') FOR getDocumentRoot(self)»
«LET getDocumentRootSetFeature(self) AS f»«IF f = null-»
	docRoot.set«domainDiagramElement.ecoreClass.name»(model); // FIXME name of the set method is pure guess«ELSE-»
	«EXPAND MetaModel::modifyFeature('docRoot', getDocumentRoot(self), 'model') FOR f»;«ENDIF»
«ENDLET-»
	return docRoot;
}
«ENDDEFINE»

«DEFINE handleException FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private void handleSaveException(java.io.IOException e) throws org.eclipse.core.commands.ExecutionException {
	throw new org.eclipse.core.commands.ExecutionException(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreationWizardPageSaveFailed(self)) FOR editorGen», e);
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPagePageName(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageTitle(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageDescription(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageDiagramFileExists(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageIncorrectExtension(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageModelFileExists(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageCreationFailed(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageCommandLabel(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageTaskName(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageSaveFailed(self))-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageResourceURILabel(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForCreationWizardPageBrowseButtonLabel(self))-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPagePageName(self), 'Diagram Location')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageTitle(self), 'Create ' + editorGen.domainGenModel.modelName + ' Diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageDescription(self), 'Create a new ' + editorGen.domainGenModel.modelName + ' Diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageDiagramFileExists(self), 'Diagram File already exists: {0}')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageIncorrectExtension(self), 'The file name must end in {0}')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageModelFileExists(self), 'Model File already exists: {0}')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageCreationFailed(self), 'Creation Failed')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageCommandLabel(self), 'Create Diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageTaskName(self), 'Creating Diagram')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageSaveFailed(self), 'Save Failed')-»
«IF isRichClientPlatform(self)-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageResourceURILabel(self), '&File')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForCreationWizardPageBrowseButtonLabel(self), '&Browse...')-»
«ENDIF-»
«ENDDEFINE»
