/*
 * Copyright (c) 2007, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import gmf.GenModelUtils;
import xpt.GenModelUtils;
import xpt.commands.CommandUtils;
import xpt.diagram.PhantomUtils;

modeltype genmodel uses "http://www.eclipse.org/emf/2002/GenModel";
modeltype gmfgen uses "http://www.eclipse.org/gmf/2009/GenModel";

library LinkFinder;

helper incomingLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.incomingGenClass().isSuperTypeOf(effectiveMetaClass)) endif)
}

helper incomingTypeLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return incomingLinks(gcb)->select(e | (Sequence { e.modelFacet })[gmfgen::TypeLinkModelFacet]->size() > 0)
}

helper outgoingLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.outgoingGenClass().isSuperTypeOf(effectiveMetaClass)) endif)
}

helper outgoingNonPhantomLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return outgoingLinks(gcb)->select(e | not e.modelFacet.isPhantomLink(gcb.getDiagram()))
}

helper containedLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.containerGenClass().isSuperTypeOf(effectiveMetaClass)) endif)
}

helper containedTypeModelFacetLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return containedLinks(gcb)->select(e | (Sequence { e.modelFacet })[gmfgen::TypeLinkModelFacet]->size() > 0)
}

helper containedFeatureModelFacetLinks(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return containedLinks(gcb)->select(e | (Sequence { e.modelFacet })[gmfgen::FeatureLinkModelFacet]->size() > 0)
}

helper containedLinksWithSelector(gcb : gmfgen::GenCommonBase) : Collection(gmfgen::GenLink) {
	return containedTypeModelFacetLinks(gcb)->select(e | e.modelFacet.getElementSelector() <> null)
}

helper needsSourceVisualID(gcb : gmfgen::GenCommonBase) : Boolean {
	return containedLinks(gcb)->select(e | e.modelFacet <> null and getRelatedChildLabelGenNodes(e.getDiagram(), e.modelFacet.getSourceType())->size() > 0)->size() > 0
}

helper needsTargetVisualID(gcb : gmfgen::GenCommonBase) : Boolean {
	return containedLinks(gcb)->select(e | e.modelFacet <> null and getRelatedChildLabelGenNodes(e.getDiagram(), e.modelFacet.getTargetType())->size() > 0)->size() > 0
}

helper getPossibleContainers(link : gmfgen::GenLink) : Collection(gmfgen::GenCommonBase) {
	return let containerClass = link.containerGenClass() in (if containerClass = null then Sequence {  } else ((Sequence { link.getDiagram() })[gmfgen::GenContainerBase]->union(link.getDiagram().getAllNodes()->asSequence()))[gmfgen::GenCommonBase]->union(link.getDiagram().links->asSequence())->select(e | let effectiveMetaClass = e.oclAsType(gmfgen::GenCommonBase).getEffectiveMetaClass() in (if effectiveMetaClass = null then false else containerClass.isSuperTypeOf(effectiveMetaClass) endif)) endif)
}

helper gmfgen::LinkModelFacet::getElementSelector() : gmfgen::GenConstraint {
	return null
}

helper gmfgen::TypeLinkModelFacet::getElementSelector() : gmfgen::GenConstraint {
	return self.modelElementSelector
}

helper gmfgen::GenLink::incomingGenClass() : genmodel::GenClass {
	return self.modelFacet.incomingGenClass()
}

helper gmfgen::LinkModelFacet::incomingGenClass() : genmodel::GenClass {
	return null
}

helper gmfgen::FeatureLinkModelFacet::incomingGenClass() : genmodel::GenClass {
	return getTypeGenClass(self.metaFeature)
}

helper gmfgen::TypeLinkModelFacet::incomingGenClass() : genmodel::GenClass {
	return getTypeGenClass(self.targetMetaFeature)
}

helper gmfgen::GenLink::outgoingGenClass() : genmodel::GenClass {
	return self.modelFacet.outgoingGenClass()
}

helper gmfgen::LinkModelFacet::outgoingGenClass() : genmodel::GenClass {
	return null
}

helper gmfgen::FeatureLinkModelFacet::outgoingGenClass() : genmodel::GenClass {
	return self.metaFeature.genClass
}

helper gmfgen::TypeLinkModelFacet::outgoingGenClass() : genmodel::GenClass {
	return (if self.sourceMetaFeature = null then self.containmentMetaFeature.genClass else getTypeGenClass(self.sourceMetaFeature) endif)
}

helper getTypeGenClass(feature : genmodel::GenFeature) : genmodel::GenClass {
	return findGenClassifier(feature.genClass.genPackage.genModel, feature.ecoreFeature.eType).oclAsType(genmodel::GenClass)
}

helper gmfgen::GenLink::containerGenClass() : genmodel::GenClass {
	return self.modelFacet.containerGenClass()
}

helper gmfgen::LinkModelFacet::containerGenClass() : genmodel::GenClass {
	return null
}

helper gmfgen::TypeLinkModelFacet::containerGenClass() : genmodel::GenClass {
	return self.containmentMetaFeature.genClass
}

helper gmfgen::FeatureLinkModelFacet::containerGenClass() : genmodel::GenClass {
	return self.metaFeature.genClass
}

helper gmfgen::GenCommonBase::getEffectiveMetaClass() : genmodel::GenClass {
	return null
}

helper gmfgen::GenDiagram::getEffectiveMetaClass() : genmodel::GenClass {
	return self.domainDiagramElement
}

helper gmfgen::GenNode::getEffectiveMetaClass() : genmodel::GenClass {
	return self.modelFacet.metaClass
}

helper gmfgen::GenLink::getEffectiveMetaClass() : genmodel::GenClass {
	return self.modelFacet.getEffectiveMetaClass()
}

helper gmfgen::LinkModelFacet::getEffectiveMetaClass() : genmodel::GenClass {
	return null
}

helper gmfgen::TypeLinkModelFacet::getEffectiveMetaClass() : genmodel::GenClass {
	return self.metaClass
}

helper gmfgen::GenChildLabelNode::getEffectiveMetaClass() : genmodel::GenClass {
	return null
}
