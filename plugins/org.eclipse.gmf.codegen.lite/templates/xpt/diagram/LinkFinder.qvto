import xpt.GenModelUtils;
import xpt.commands.CommandUtils;
import xpt.diagram.PhantomUtils;

modeltype genModel uses "http://www.eclipse.org/emf/2002/GenModel";
modeltype genModel_1 uses "http://www.eclipse.org/gmf/2009/GenModel";

library LinkFinder;

helper incomingLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.incomingGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)) endif)
}

helper incomingTypeLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return incomingLinks(gcb)->select(e | (Sequence { e.modelFacet })[genModel_1::TypeLinkModelFacet]->size() > 0)
}

helper outgoingLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.outgoingGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)) endif)
}

helper outgoingNonPhantomLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return outgoingLinks(gcb)->select(e | not e.modelFacet.isPhantomLink(gcb.getDiagram()))
}

helper containedLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return let effectiveMetaClass = gcb.getEffectiveMetaClass() in (if effectiveMetaClass = null then Sequence {  } else gcb.getDiagram().links->select(e | e.containerGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)) endif)
}

helper containedTypeModelFacetLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return containedLinks(gcb)->select(e | (Sequence { e.modelFacet })[genModel_1::TypeLinkModelFacet]->size() > 0)
}

helper containedFeatureModelFacetLinks(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return containedLinks(gcb)->select(e | (Sequence { e.modelFacet })[genModel_1::FeatureLinkModelFacet]->size() > 0)
}

helper containedLinksWithSelector(gcb : genModel_1::GenCommonBase) : Collection(genModel_1::GenLink) {
	return containedTypeModelFacetLinks(gcb)->select(e | e.modelFacet.getElementSelector() <> null)
}

helper needsSourceVisualID(gcb : genModel_1::GenCommonBase) : Boolean {
	return containedLinks(gcb)->select(e | e.modelFacet <> null and getRelatedChildLabelGenNodes(e.getDiagram(), e.modelFacet.getSourceType())->size() > 0)->size() > 0
}

helper needsTargetVisualID(gcb : genModel_1::GenCommonBase) : Boolean {
	return containedLinks(gcb)->select(e | e.modelFacet <> null and getRelatedChildLabelGenNodes(e.getDiagram(), e.modelFacet.getTargetType())->size() > 0)->size() > 0
}

helper getPossibleContainers(link : genModel_1::GenLink) : Collection(genModel_1::GenCommonBase) {
	return let containerClass = link.containerGenClass().ecoreClass in (if containerClass = null then Sequence {  } else ((Sequence { link.getDiagram() })[genModel_1::GenContainerBase]->union(link.getDiagram().getAllNodes()->asSequence()))[genModel_1::GenCommonBase]->union(link.getDiagram().links->asSequence())->select(e | let effectiveMetaClass = e.oclAsType(genModel_1::GenCommonBase).getEffectiveMetaClass() in (if effectiveMetaClass = null then false else containerClass.isSuperTypeOf(effectiveMetaClass.ecoreClass) endif)) endif)
}

helper genModel_1::LinkModelFacet::getElementSelector() : genModel_1::GenConstraint {
	return null
}

helper genModel_1::TypeLinkModelFacet::getElementSelector() : genModel_1::GenConstraint {
	return self.modelElementSelector
}

helper genModel_1::GenLink::incomingGenClass() : genModel::GenClass {
	return self.modelFacet.incomingGenClass()
}

helper genModel_1::LinkModelFacet::incomingGenClass() : genModel::GenClass {
	return null
}

helper genModel_1::FeatureLinkModelFacet::incomingGenClass() : genModel::GenClass {
	return getTypeGenClass(self.metaFeature)
}

helper genModel_1::TypeLinkModelFacet::incomingGenClass() : genModel::GenClass {
	return getTypeGenClass(self.targetMetaFeature)
}

helper genModel_1::GenLink::outgoingGenClass() : genModel::GenClass {
	return self.modelFacet.outgoingGenClass()
}

helper genModel_1::LinkModelFacet::outgoingGenClass() : genModel::GenClass {
	return null
}

helper genModel_1::FeatureLinkModelFacet::outgoingGenClass() : genModel::GenClass {
	return self.metaFeature.genClass
}

helper genModel_1::TypeLinkModelFacet::outgoingGenClass() : genModel::GenClass {
	return (if self.sourceMetaFeature = null then self.containmentMetaFeature.genClass else getTypeGenClass(self.sourceMetaFeature) endif)
}

helper getTypeGenClass(feature : genModel::GenFeature) : genModel::GenClass {
	return findGenClassifier(feature.genClass.genPackage.genModel, feature.ecoreFeature.eType).oclAsType(genModel::GenClass)
}

helper genModel_1::GenLink::containerGenClass() : genModel::GenClass {
	return self.modelFacet.containerGenClass()
}

helper genModel_1::LinkModelFacet::containerGenClass() : genModel::GenClass {
	return null
}

helper genModel_1::TypeLinkModelFacet::containerGenClass() : genModel::GenClass {
	return self.containmentMetaFeature.genClass
}

helper genModel_1::FeatureLinkModelFacet::containerGenClass() : genModel::GenClass {
	return self.metaFeature.genClass
}

helper genModel_1::GenCommonBase::getEffectiveMetaClass() : genModel::GenClass {
	return null
}

helper genModel_1::GenDiagram::getEffectiveMetaClass() : genModel::GenClass {
	return self.domainDiagramElement
}

helper genModel_1::GenNode::getEffectiveMetaClass() : genModel::GenClass {
	return self.modelFacet.metaClass
}

helper genModel_1::GenLink::getEffectiveMetaClass() : genModel::GenClass {
	return self.modelFacet.getEffectiveMetaClass()
}

helper genModel_1::LinkModelFacet::getEffectiveMetaClass() : genModel::GenClass {
	return null
}

helper genModel_1::TypeLinkModelFacet::getEffectiveMetaClass() : genModel::GenClass {
	return self.metaClass
}

helper genModel_1::GenChildLabelNode::getEffectiveMetaClass() : genModel::GenClass {
	return null
}
