/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::policies::i18n»
«EXTENSION xpt::diagram::policies::ClassNames»
«EXTENSION xpt::diagram::policies::ComponentEditPolicy»
«EXTENSION xpt::diagram::LinkFinder»

«DEFINE ComponentEditPolicy FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND createDeleteCommand-»
	«EXPAND getDeleteViewCommand-»
	«EXPAND canDeleteView-»
«IF needsGetGraphicalEditPart(self)-»
	«EXPAND getGraphicalEditPart-»
«ENDIF-»
	«EXPAND domainModelRemoveCommand-»
	«EXPAND getDiagramElement-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR gmfgen::GenCommonBase»«ERROR 'Unexpected type!'»«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR gmfgen::GenNode-»
«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand('getDiagramNode()')-»
«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR gmfgen::GenLink-»
«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand('getDiagramEdge()')-»
«ENDDEFINE»

«DEFINE getDiagramElement FOR gmfgen::GenCommonBase»«ERROR 'Unexpected type!'»«ENDDEFINE»

«DEFINE getDiagramElement FOR gmfgen::GenNode-»
«EXPAND getDiagramNode-»
«ENDDEFINE»

«DEFINE getDiagramElement FOR gmfgen::GenLink-»
«EXPAND getDiagramEdge-»
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenCommonBase»«getComponentEditPolicyClassName(self)»«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenCommonBase»«getDiagram().editPoliciesPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenCommonBase»extends org.eclipse.gmf.runtime.lite.edit.policies.ComponentEditPolicyEx«ENDDEFINE»

«DEFINE createDeleteCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createDeleteCommand(org.eclipse.gef.requests.GroupRequest deleteRequest) {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND getDiagramElementMethodName»().getDiagram().getElement());
«LET incomingTypeLinks(self) AS incomingTypeLinks-»
«LET outgoingNonPhantomLinks(self) AS outgoingLinks-»
«IF incomingTypeLinks->size() > 0 or outgoingLinks->size() > 0-»
	org.eclipse.gmf.runtime.lite.commands.CompositeWrappingCommand result = new org.eclipse.gmf.runtime.lite.commands.CompositeWrappingCommand(editingDomain, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForDeleteModelElementLabel(getDiagram())) FOR getDiagram().editorGen»);
«ENDIF-»
	«EXPAND deleteIncomingLinks(incomingTypeLinks, true)-»
	«EXPAND deleteOutgoingLinks(outgoingLinks, true)-»
	«EXPAND createDeleteCommandPrim(true)-»
«IF incomingTypeLinks->size() > 0 or outgoingLinks->size() > 0-»
	result.add(cc);
	return result;
«ELSE-»
	return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, cc);
«ENDIF-»
«ENDLET-»
«ENDLET-»
}
«ENDDEFINE»

«DEFINE deleteIncomingLinks(incomingLinks : Collection(gmfgen::GenLink), deleteFromModel : Boolean) FOR gmfgen::GenCommonBase-»
«IF incomingLinks->size() > 0-»
	for(java.util.Iterator it = getGraphicalEditPart().getTargetConnections().iterator(); it.hasNext(); ) {
		org.eclipse.gef.EditPart nextEditPart = (org.eclipse.gef.EditPart) it.next();
		org.eclipse.gmf.runtime.notation.Edge nextEdge = (org.eclipse.gmf.runtime.notation.Edge) nextEditPart.getModel();
		int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextEdge);
		switch (visualID) {
«FOREACH incomingLinks AS nextLink-»
		case «nextLink.getEditPartQualifiedClassName()».VISUAL_ID:
«ENDFOREACH-»
			«EXPAND deleteDependentLinks(deleteFromModel)-»
		}
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE deleteOutgoingLinks(outgoingLinks : Collection(gmfgen::GenLink), deleteFromModel : Boolean) FOR gmfgen::GenCommonBase-»
«IF outgoingLinks->size() > 0-»
	for(java.util.Iterator it = getGraphicalEditPart().getSourceConnections().iterator(); it.hasNext(); ) {
		org.eclipse.gef.EditPart nextEditPart = (org.eclipse.gef.EditPart) it.next();
		org.eclipse.gmf.runtime.notation.Edge nextEdge = (org.eclipse.gmf.runtime.notation.Edge) nextEditPart.getModel();
		int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextEdge);
		switch (visualID) {
«FOREACH outgoingLinks AS nextLink-»
		case «nextLink.getEditPartQualifiedClassName()».VISUAL_ID:
«ENDFOREACH-»
			«EXPAND deleteDependentLinks(deleteFromModel)-»
		}
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE deleteDependentLinks(deleteFromModel : Boolean) FOR gmfgen::GenCommonBase-»
{
	org.eclipse.gef.requests.GroupRequest deleteLinkRequest = new org.eclipse.gef.requests.GroupRequest(«IF deleteFromModel»org.eclipse.gef.RequestConstants.REQ_DELETE«ELSE»org.eclipse.gmf.runtime.lite.requests.RequestConstants.REQ_FORCED_DELETE_VIEW«ENDIF»);
	deleteLinkRequest.setEditParts(nextEditPart);
	result.add(nextEditPart.getCommand(deleteLinkRequest));
	break;
}
«ENDDEFINE»

«DEFINE getGraphicalEditPart FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.GraphicalEditPart getGraphicalEditPart() {
	return (org.eclipse.gef.GraphicalEditPart) getHost();
}
«ENDDEFINE»

«DEFINE createDeleteCommandPrim(deleteFromModel : Boolean) FOR gmfgen::GenCommonBase»«ERROR 'UnexpectedType'»«ENDDEFINE»

«DEFINE createDeleteCommandPrim(deleteFromModel : Boolean) FOR gmfgen::GenNode-»
org.eclipse.emf.common.command.CompoundCommand cc = new org.eclipse.emf.common.command.CompoundCommand();
«IF deleteFromModel-»
cc.append(createDomainModelRemoveCommand(editingDomain));
«ENDIF-»
cc.append(new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand((org.eclipse.gmf.runtime.notation.View) «EXPAND getDiagramElementMethodName»().eContainer(), «EXPAND getDiagramElementMethodName»()));
«ENDDEFINE»

«DEFINE createDeleteCommandPrim(deleteFromModel : Boolean) FOR gmfgen::GenLink-»
org.eclipse.emf.common.command.CompoundCommand cc = new org.eclipse.emf.common.command.CompoundCommand();
«IF deleteFromModel-»
cc.append(createDomainModelRemoveCommand(editingDomain));
«ENDIF-»
cc.append(new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalEdgeCommand(«EXPAND getDiagramElementMethodName»().getDiagram(), «EXPAND getDiagramElementMethodName»()));
«ENDDEFINE»

«DEFINE getDiagramElementMethodName FOR gmfgen::GenCommonBase»«ERROR 'Unexpected type: ' + self.repr()»«ENDDEFINE»
«DEFINE getDiagramElementMethodName FOR gmfgen::GenNode»getDiagramNode«ENDDEFINE»
«DEFINE getDiagramElementMethodName FOR gmfgen::GenLink»getDiagramEdge«ENDDEFINE»

«DEFINE getDiagramNode FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.notation.Node «EXPAND getDiagramElementMethodName»() {
	return (org.eclipse.gmf.runtime.notation.Node) getHost().getModel();
}
«ENDDEFINE»

«DEFINE getDiagramEdge FOR gmfgen::GenLink-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.notation.Edge «EXPAND getDiagramElementMethodName»() {
	return (org.eclipse.gmf.runtime.notation.Edge) getHost().getModel();
}
«ENDDEFINE»

«DEFINE getDeleteViewCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDeleteViewCommand(org.eclipse.gef.requests.GroupRequest deleteRequest, boolean isForced) {
	if (!isForced && !canDeleteView()) {
		return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
	}
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND getDiagramElementMethodName»().getDiagram().getElement());
«LET incomingLinks(self) AS incomingLinks-»
«LET outgoingLinks(self) AS outgoingLinks-»
«IF incomingLinks->size() > 0 or outgoingLinks->size() > 0-»
	org.eclipse.gmf.runtime.lite.commands.CompositeWrappingCommand result = new org.eclipse.gmf.runtime.lite.commands.CompositeWrappingCommand(editingDomain, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForDeleteDiagramElementLabel(getDiagram())) FOR getDiagram().editorGen»);
«ENDIF-»
	«EXPAND deleteIncomingLinks(incomingLinks, false)-»
	«EXPAND deleteOutgoingLinks(outgoingLinks, false)-»
	«EXPAND createDeleteCommandPrim(false)-»
«IF incomingLinks->size() > 0 or outgoingLinks->size() > 0-»
	result.add(cc);
	return result;
«ELSE-»
	return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, cc);
«ENDIF-»
«ENDLET-»
«ENDLET-»
}
«ENDDEFINE»

«DEFINE canDeleteView FOR gmfgen::GenCommonBase»«ERROR 'Unexpected Type: ' + self.repr()»«ENDDEFINE»

«DEFINE canDeleteView FOR gmfgen::GenLink-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean canDeleteView() {
	return false;
}
«ENDDEFINE»

«DEFINE canDeleteView FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean canDeleteView() {
	if («EXPAND getDiagramElementMethodName»().getEAnnotation("Shortcut") != null) {	«EXPAND xpt::Common::nonNLS»
		return true;
	}
	org.eclipse.gmf.runtime.notation.View parentView = (org.eclipse.gmf.runtime.notation.View) «EXPAND getDiagramElementMethodName»().eContainer();
	if (parentView == null) {
		return true;
	}
	org.eclipse.gmf.runtime.notation.CanonicalStyle canonicalStyle = (org.eclipse.gmf.runtime.notation.CanonicalStyle) parentView.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getCanonicalStyle());
	if (canonicalStyle != null) {
		return !canonicalStyle.isCanonical();
	}
	return «not getDiagram().synchronized»;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForDeleteModelElementLabel(self))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForDeleteDiagramElementLabel(self))-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDeleteModelElementLabel(self), 'Delete Model Element')-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDeleteDiagramElementLabel(self), 'Delete Diagram Element')-»
«ENDDEFINE»
