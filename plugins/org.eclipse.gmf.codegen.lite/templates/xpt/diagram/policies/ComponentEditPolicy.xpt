/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::policies::ClassNames»
«EXTENSION xpt::diagram::LinkFinder»

«DEFINE ComponentEditPolicy FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «getComponentEditPolicyClassName()» «EXPAND supertypes» {
	«EXPAND createDeleteCommand-»
«LET incomingLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0) AS incomingTypeLinks-»
«IF incomingTypeLinks.size() > 0-»
	«EXPAND getGraphicalEditPart-»
«ENDIF-»
«ENDLET-»
	«EXPAND domainModelRemoveCommand-»
	«EXPAND getDiagramElement-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR GenCommonBase»«ERROR "Unexpected type!"»«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR GenNode-»
«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand("getDiagramNode()")-»
«ENDDEFINE»

«DEFINE domainModelRemoveCommand FOR GenLink-»
«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand("getDiagramEdge()")-»
«ENDDEFINE»

«DEFINE getDiagramElement FOR GenCommonBase»«ERROR "Unexpected type!"»«ENDDEFINE»

«DEFINE getDiagramElement FOR GenNode-»
«EXPAND getDiagramNode-»
«ENDDEFINE»

«DEFINE getDiagramElement FOR GenLink-»
«EXPAND getDiagramEdge-»
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenCommonBase»extends org.eclipse.gef.editpolicies.ComponentEditPolicy«ENDDEFINE»

«DEFINE createDeleteCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createDeleteCommand(org.eclipse.gef.requests.GroupRequest deleteRequest) {
«LET incomingLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0) AS incomingTypeLinks-»
«IF incomingTypeLinks.size() > 0-»
	org.eclipse.gef.commands.CompoundCommand result = new org.eclipse.gef.commands.CompoundCommand();
	for(java.util.Iterator it = getGraphicalEditPart().getTargetConnections().iterator(); it.hasNext(); ) {
		org.eclipse.gef.EditPart nextEditPart = (org.eclipse.gef.EditPart) it.next();
		org.eclipse.gmf.runtime.notation.Edge nextEdge = (org.eclipse.gmf.runtime.notation.Edge) nextEditPart.getModel();
		int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextEdge);
		switch (visualID) {
«FOREACH incomingTypeLinks AS nextLink-»
		case «nextLink.getEditPartQualifiedClassName()».VISUAL_ID:
«ENDFOREACH-»
			{
				org.eclipse.gef.requests.GroupRequest deleteLinkRequest = new org.eclipse.gef.requests.GroupRequest(org.eclipse.gef.RequestConstants.REQ_DELETE);
				deleteLinkRequest.setEditParts(nextEditPart);
				result.add(nextEditPart.getCommand(deleteLinkRequest));
				break;
			}
		}
	}
«ENDIF-»
	«EXPAND createDeleteCommandPrim-»
«IF incomingTypeLinks.size() > 0-»
	result.add(new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, cc));
	return result.unwrap();
«ELSE-»
	return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, cc);
«ENDIF-»
«ENDLET-»
}
«ENDDEFINE»

«DEFINE getGraphicalEditPart FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.GraphicalEditPart getGraphicalEditPart() {
	return (org.eclipse.gef.GraphicalEditPart) getHost();
}
«ENDDEFINE»

«DEFINE createDeleteCommandPrim FOR gmfgen::GenCommonBase»«ERROR "UnexpectedType"»«ENDDEFINE»

«DEFINE createDeleteCommandPrim FOR gmfgen::GenNode-»
org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(getDiagramNode().getDiagram().getElement());
org.eclipse.emf.common.command.CompoundCommand cc = new org.eclipse.emf.common.command.CompoundCommand();
cc.append(createDomainModelRemoveCommand(editingDomain));
cc.append(new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand((org.eclipse.gmf.runtime.notation.View) getDiagramNode().eContainer(), getDiagramNode()));
«ENDDEFINE»

«DEFINE createDeleteCommandPrim FOR gmfgen::GenLink-»
org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(getDiagramEdge().getDiagram().getElement());
org.eclipse.emf.common.command.CompoundCommand cc = new org.eclipse.emf.common.command.CompoundCommand();
cc.append(createDomainModelRemoveCommand(editingDomain));
cc.append(new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalEdgeCommand(getDiagramEdge().getDiagram(), getDiagramEdge()));
«ENDDEFINE»

«DEFINE getDiagramNode FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.notation.Node getDiagramNode() {
	return (org.eclipse.gmf.runtime.notation.Node) getHost().getModel();
}
«ENDDEFINE»

«DEFINE getDiagramEdge FOR gmfgen::GenLink-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.notation.Edge getDiagramEdge() {
	return (org.eclipse.gmf.runtime.notation.Edge) getHost().getModel();
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenCommonBase»«ENDDEFINE»
