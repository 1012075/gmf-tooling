<%@ jet package="org.eclipse.gmf.codegen.templates.lite.providers"  class="DomainElementInitializerGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%
final String javaExprContainer = "JavaInitializers";
importManager.registerInnerClass(javaExprContainer);
final String javaConstraintsContainer = "JavaConstraints";
importManager.registerInnerClass(javaExprContainer);
importManager.registerInnerClass(genDiagram.getLinkCreationConstraintsClassName());

importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class DomainElementInitializer <%/*XXX: class name should be customizable!*/%>{
	/**
	 * @generated
	 */
	public static interface IElementInitializer {
		/**
		 * @generated
		 */
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance);
	}

<%
{	//start local block that separates initializers and constraints
boolean needsNullInitializer = false;
boolean needsObjectInitializer = false;
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet<GenFeatureValueSpec>();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __javaOperationContainer = javaExprContainer; // place java expression methods here
for (Map.Entry<TypeModelFacet, GenCommonBase> next : genDiagram.getTypeModelFacet2GenBaseMap().entrySet()) {
	String id = next.getValue().getUniqueIdentifier();
	TypeModelFacet modelFacet = next.getKey();

	GenElementInitializer elementInitializer = modelFacet.getModelElementInitializer();
	if (elementInitializer instanceof GenFeatureSeqInitializer == false || expressionProviders == null) {
		if (!needsNullInitializer) {
			needsNullInitializer = true;
%>
	/**
	 * @generated
	 */
	private static IElementInitializer NULL_INITIALIZER = new IElementInitializer() {
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
		}
	};

<%
		}
%>
	/**
	 * @generated
	 */
	public static IElementInitializer <%=id%> = NULL_INITIALIZER;
<%
		continue;
	}
	needsObjectInitializer = true;
	GenFeatureSeqInitializer rootFtSeqInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();
	javaInitializers.addAll(rootFtSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
	for(GenFeatureSeqInitializer nextFtSeqInitializer : rootFtSeqInitializer.getAllFeatureSeqInitializers()) {
		boolean isTopLevelObjInit = nextFtSeqInitializer == rootFtSeqInitializer;
		if(isTopLevelObjInit){
%>
		/**
		 * @generated
		 */
		public static final IElementInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%> = new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%		} else {%>
		ObjectInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%>() {
			return new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%		} %>
		 	protected void init() {				
<%		for(GenFeatureInitializer nextFtInitializer : (List<GenFeatureInitializer>)nextFtSeqInitializer.getInitializers()) {
			String metaFeatureAccessor = nextFtSeqInitializer.getFeatureAccessor(nextFtInitializer, importManager);
			if(nextFtInitializer instanceof GenReferenceNewElementSpec) {
				GenReferenceNewElementSpec newElementSpec = (GenReferenceNewElementSpec)nextFtInitializer;
%>			
				add(createNewElementFeatureInitializer(<%=metaFeatureAccessor%>, new ObjectInitializer[] {
<%				for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { %>
					<%=newElemInit.getInitializerFieldName(id)%>(), 
<%				} // end of newElementInitializers %>
				}));
<%			} // end of GenReferenceNewElementSpec
			else if(nextFtInitializer instanceof GenFeatureValueSpec) {
				String __outEnvVarName = ""; // no env to setup;
				GenClassifier __genExprContext = nextFtSeqInitializer.getElementClass();
				GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)nextFtInitializer;
%>			
				add(createExpressionFeatureInitializer(<%=metaFeatureAccessor%>, <%@ include file="../expressions/getExpression.jetinc"%>));
<%
			} // end of GenFeatureValueSpec
		} // end of GenFeatureInitializer iteration
%>			}
<%		if(!isTopLevelObjInit) { %>
				}; // <%=nextFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
			}
<%		} // GenFeatureInitializer iteration
	} // All GenFeatureSeqInitializer iteration
%>
		}; // <%=rootFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
<%
}
if (needsObjectInitializer) {
%>
	/** 
	 * @generated
	 */	
	public static abstract class ObjectInitializer implements IElementInitializer {
		/** 
		 * @generated
		 */		
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> element;		
		/** 
		 * @generated
		 */		
		private <%=importManager.getImportedName("java.util.List")%> featureInitializers = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		/** 
		 * @generated
		 */
		ObjectInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> element) {
			this.element = element;
			init();
		}
		/**
	 	 * @generated
	 	 */
	 	protected abstract void init();							
		/** 
		 * @generated
		 */
		protected final FeatureInitializer add(FeatureInitializer initializer) {
			featureInitializers.add(initializer);
			return initializer;
		}
		/** 
		 * @generated
		 */		
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = featureInitializers.iterator(); it.hasNext();) {
				FeatureInitializer nextExpr = (FeatureInitializer)it.next();
				try {
					nextExpr.init(instance);
				} catch(RuntimeException e) {
					<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Feature initialization failed", e);	//$NON-NLS-1$
				}
			}
		}
	} // end of ObjectInitializer
	
	/** 
	 * @generated
	 */
	interface FeatureInitializer {
		/**
		 * @generated
		 */
		void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance);
	}
	
	/**
	 * @generated
	 */		
	static FeatureInitializer createNewElementFeatureInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> initFeature, ObjectInitializer[] newObjectInitializers) {
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature = initFeature;
		final ObjectInitializer[] initializers = newObjectInitializers;
		return new FeatureInitializer() {
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				for (int i = 0; i < initializers.length; i++) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);
					if(feature.isMany()) {
						((<%=importManager.getImportedName("java.util.Collection")%>)contextInstance.eGet(feature)).add(newInstance);
					} else {
						contextInstance.eSet(feature, newInstance);
					}						
					initializers[i].initializeElement(newInstance);
				}
			}
		};
	}

	/**
	 * @generated
	 */		
	static FeatureInitializer createExpressionFeatureInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> initFeature, <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> valueExpression) {
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature = initFeature;
		final <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression = valueExpression;
		return new FeatureInitializer() {				
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				expression.assignTo(feature, contextInstance);
			}
		};			
	}
<%
	if(!javaInitializers.isEmpty()) {
%>
		/** 
		 * @generated
		 */
		static class <%=javaExprContainer%> {
<%
		for(GenFeatureValueSpec __genValueExpression : javaInitializers) {
			GenClassifier __genExprContext = __genValueExpression.getFeatureSeqInitializer().getElementClass();
			GenExpressionProviderBase provider = expressionProviders.getProvider(__genValueExpression);
			if(!(provider instanceof GenJavaExpressionProvider)) continue;
			String __genExprResultType = provider.getQualifiedInstanceClassName(__genValueExpression.getFeature());
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
%>
		} //<%=javaExprContainer%>
<%	} /* end of javaInitializers */ %>
<%
}
}	//end local block that separates initializers and constraints
%>

<%
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
if (genDiagram.hasLinkCreationConstraints() && expressionProviders != null) {
	String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
	boolean hasJavaConstraints = false;
%>
	/**
	 * @generated
	 */
	public static class <%=genDiagram.getLinkCreationConstraintsClassName()%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		if(linkConstraints.getSourceEndContextClass() == null || linkConstraints.getTargetEndContextClass() == null) continue;
		hasJavaConstraints |= (linkConstraints.getSourceEnd() != null && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) ||
							(linkConstraints.getTargetEnd() != null && expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider);
%>
		/**
		 * @generated 
		 */
		public static final <%=genDiagram.getLinkCreationConstraintsClassName()%> <%=linkConstraints.getConstraintsInstanceFieldName()%> = create<%=linkConstraints.getConstraintsInstanceFieldName()%>();
<%
	} // end of link iteration
%>

<%
	final String oppositeEndVarName = "oppositeEnd";
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
%>
		/**
		 * @generated 
		 */
		private static <%=genDiagram.getLinkCreationConstraintsClassName()%> create<%=linkConstraints.getConstraintsInstanceFieldName()%>() {
<%
		String __javaOperationContainer = javaConstraintsContainer;
		Map __exprEnvVariables = new java.util.HashMap();
		String __outEnvVarName = "sourceEnv";
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		__exprEnvVariables.put(oppositeEndVarName, targetContext); //$NON-NLS-1$

%><%@ include file="../expressions/initEnv.jetinc"%>
			<%=importedAbstractExprCls%> sourceExpression = <%
		if(linkConstraints.getSourceEnd() != null) {
%><%@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
<%
		__outEnvVarName = "targetEnv";
		__genExprContext = targetContext;
		__genValueExpression = linkConstraints.getTargetEnd();			
		__exprEnvVariables.put(oppositeEndVarName, srcContext); //$NON-NLS-1$
%><%@ include file="../expressions/initEnv.jetinc"%>
			<%=importedAbstractExprCls%> targetExpression = <%
		if(linkConstraints.getTargetEnd() != null) {
%><%@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
			return new <%=genDiagram.getLinkCreationConstraintsClassName()%>(sourceExpression, targetExpression);
		}
<%
	} // end of link iteration
%>
		/**
		 * @generated 
		 */	
		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
		/**
		 * @generated 
		 */	
		private <%=importedAbstractExprCls%> srcEndInv;
		/**
		 * @generated 
		 */	
		private <%=importedAbstractExprCls%> targetEndInv;
		/**
		 * @generated 
		 */		
		public <%=genDiagram.getLinkCreationConstraintsClassName()%>(<%=importedAbstractExprCls%> sourceEnd, <%=importedAbstractExprCls%> targetEnd) {
			this.srcEndInv = sourceEnd;			
			this.targetEndInv = targetEnd;			
		}
		
		/**
		 * @generated 
		 */	
		public boolean canCreateLink(Object source, Object target, boolean isBackDirected) {
			if (source != null) {
				<%=importedAbstractExprCls%> sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;
				if (sourceConstraint != null && !evaluate(sourceConstraint, source, target, false)) {
					return false;
				}
			}
			if (target != null) {
				<%=importedAbstractExprCls%> targetConstraint = isBackDirected ? srcEndInv : targetEndInv;
				if (targetConstraint != null && !evaluate(targetConstraint, source, target, true)) {
					return false;
				}
			}
			return true;
		}
	
		/**
		 * @generated 
		 */
		private static boolean evaluate(<%=importedAbstractExprCls%> constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
			<%=importManager.getImportedName("java.util.Map")%> evalEnv = <%=importManager.getImportedName("java.util.Collections")%>.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
			try {
				Object val = constraint.evaluate(sourceEnd, evalEnv);
				return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
			} catch(Exception e) {	
				<%=pluginActivatorClass%>.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
				return false;
			}
		}
<%
if(hasJavaConstraints) {
%>		
	/**
	 * @generated
	 */
	private static class <%=javaConstraintsContainer%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
		String __genExprResultType = "java.lang.Boolean";
		Map __exprEnvVariables = new java.util.HashMap();
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {				
			__exprEnvVariables.put(oppositeEndVarName, targetContext);
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
		__genValueExpression = linkConstraints.getTargetEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {		
			__genExprContext = targetContext;
			__exprEnvVariables.put(oppositeEndVarName, srcContext);
%>
<%@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
	} /*java constraints iteration*/
%>
	} // <%=javaConstraintsContainer%>
<%
} /* end of hasJavaConstraints */
%>		
	}
<%} /*end of hasLinkCreationConstraints()*/ %>	
}
<%importManager.emitSortedImports();%>
