<%@ jet package="org.eclipse.gmf.codegen.templates.lite.providers"  class="LinkViewFactoryGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.*"%>
<%
GenLink genElement = (GenLink) ((Object[]) argument)[0];
GenDiagram genDiagram = genElement.getDiagram();
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genElement.getNotationViewFactoryClassName()%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator")%> {
	/**
	 * @generated
	 */
	public static <%=genElement.getNotationViewFactoryClassName()%> INSTANCE = new <%=genElement.getNotationViewFactoryClassName()%>();

	/**
	 * @generated
	 */
	public void decorateView(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
<%@ include file="createVIDAnnotation.jetinc"%>
		//XXX: init styles from attributes!!!
<%
for (Iterator it = genElement.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel label = (GenLinkLabel) it.next();
%>
		create<%=label.getVisualID()%>Label(view);
<%
}/*iterate over labels*/
%>
	}

<%
for (Iterator it = genElement.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel label = (GenLinkLabel) it.next();
%>
	/**
	 * @generated
	 */
	private void create<%=label.getVisualID()%>Label(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> label = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createNode();
		view.getPersistedChildren().add(label);
		<%=importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(label);
	}
<%
}/*iterate over labels*/
%>
}
<%importManager.emitSortedImports();%>
