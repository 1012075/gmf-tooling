<%@ jet package="org.eclipse.gmf.codegen.templates.lite.expressions" class="OCLExpressionFactoryGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenExpressionInterpreter genInterpreter = (GenExpressionInterpreter) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genInterpreter.getContainer().getEditorGen().getDiagram();
final String factoryClassName = genInterpreter.getClassName();
final String abstractExpressionClass = genInterpreter.getContainer().getAbstractExpressionQualifiedClassName();
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

<%
importManager.registerInnerClass("Expression");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.Map");
importManager.addImport("java.lang.ref.WeakReference");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
importManager.addImport("org.eclipse.emf.ecore.EEnum");
importManager.addImport("org.eclipse.emf.ecore.EEnumLiteral");
importManager.addImport("org.eclipse.emf.ecore.ETypedElement");

importManager.addImport("org.eclipse.ocl.Environment");
importManager.addImport("org.eclipse.ocl.EvaluationEnvironment");
importManager.addImport("org.eclipse.ocl.ParserException");
importManager.addImport("org.eclipse.ocl.Query");
importManager.addImport("org.eclipse.ocl.ecore.EcoreFactory");
importManager.addImport("org.eclipse.ocl.ecore.OCL");
importManager.addImport("org.eclipse.ocl.expressions.OCLExpression");
importManager.addImport("org.eclipse.ocl.expressions.OperationCallExp");
importManager.addImport("org.eclipse.ocl.expressions.Variable");
importManager.addImport("org.eclipse.ocl.helper.OCLHelper");
importManager.addImport("org.eclipse.ocl.utilities.AbstractVisitor");
importManager.addImport("org.eclipse.ocl.utilities.PredefinedType");

%>

/**
 * @generated 
 */
public class <%=factoryClassName%> {

	<%@ include file="OCLExpressionFactory_additions.jetinc" fail="silent"%>

	/**
	 * @generated 
	 */
	private <%=factoryClassName%>() {
	}

	/**
	 * @generated 
	 */	
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body, EClassifier context, Map environment) {		
		return new Expression(body, context, environment);
	}
	
	/**
	 * @generated 
	 */	
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body, EClassifier context) {		
		return getExpression(body, context, Collections.EMPTY_MAP);
	}	
	
	/**
	 * @generated 
	 */	
	private static class Expression extends <%=importManager.getImportedName(abstractExpressionClass)%> {
		/**
		 * @generated 
		 */		
		private WeakReference queryRef;

		/**
		 * @generated 
		 */		
		private final OCL oclInstance;

		/**
		 * @generated 
		 */			
		public Expression(String body, EClassifier context, Map environment) {
			super(body, context);
			oclInstance = OCL.newInstance();
			initCustomEnv(oclInstance.getEnvironment(), environment);
		}

		/**
		 * @generated 
		 */
		protected Query getQuery() {
			Query oclQuery = null;
			if(this.queryRef != null) {
				oclQuery = (Query)this.queryRef.get();
			}
			if(oclQuery == null) {
				OCLHelper oclHelper = oclInstance.createOCLHelper();
				oclHelper.setContext(context());
				try {
					OCLExpression oclExpression = oclHelper.createQuery(body());
					oclQuery = oclInstance.createQuery(oclExpression);
					this.queryRef = new WeakReference(oclQuery);
					setStatus(IStatus.OK, null, null);
				} catch (ParserException e) {
					setStatus(IStatus.ERROR, e.getMessage(), e);
				}
			}
			return oclQuery;			
		}

		/**
		 * @generated 
		 */		
		protected Object doEvaluate(Object context, Map env) {
			Query oclQuery = getQuery();					
			if (oclQuery == null) {
				return null;
			}
			EvaluationEnvironment evalEnv = oclQuery.getEvaluationEnvironment();
			// init environment
			for (Iterator it = env.entrySet().iterator(); it.hasNext();) {
				Map.Entry nextEntry = (Map.Entry) it.next();
				evalEnv.replace((String)nextEntry.getKey(), nextEntry.getValue());					
			}
			
			try {
				initExtentMap(context);
				Object result = oclQuery.evaluate(context);
				return (result != oclInstance.getEnvironment().getOCLStandardLibrary().getOclInvalid()) ? result : null;
			} finally {				
				evalEnv.clear();
				oclQuery.getExtentMap().clear();
			}
		}
		
		/**
		 * @generated
		 */	
		protected Object performCast(Object value, ETypedElement targetType) {
			if (targetType.getEType() instanceof EEnum) {
				if(value instanceof EEnumLiteral) {
					EEnumLiteral literal = (EEnumLiteral)value;
					return (literal.getInstance() != null) ? literal.getInstance() : literal;
				}
			}
			return super.performCast(value, targetType);
		}

		/**
		 * @generated
		 */	
		private void initExtentMap(Object context) {
			if (!getStatus().isOK() || context == null) {
				return;
			}
			final Query queryToInit = getQuery();
			final Object extentContext = context;
			
			queryToInit.getExtentMap().clear();
			if (queryToInit.queryText() != null && queryToInit.queryText().indexOf(PredefinedType.ALL_INSTANCES_NAME) >= 0) {
				AbstractVisitor visitior = new AbstractVisitor() {
					private boolean usesAllInstances  = false;
					
					public Object visitOperationCallExp(OperationCallExp oc) {
						if(!usesAllInstances) {
							usesAllInstances = PredefinedType.ALL_INSTANCES == oc.getOperationCode();
							if(usesAllInstances) {
								queryToInit.getExtentMap().putAll(oclInstance.getEvaluationEnvironment().createExtentMap(extentContext));
							}
						}
						return super.visitOperationCallExp(oc);
					}
				};
				queryToInit.getExpression().accept(visitior);
			}
		}

		/**
		 * @generated 
		 */		
		private static void initCustomEnv(Environment ecoreEnv, Map environment) {
			for (Iterator it = environment.keySet().iterator(); it.hasNext();) {
						String varName = (String)it.next();
				EClassifier varType = (EClassifier) environment.get(varName);
				ecoreEnv.addElement(varName, createVar(ecoreEnv, varName, varType), false);
				}
		}
		
		/**
		 * @generated 
		 */		
		private static Variable createVar(Environment ecoreEnv, String name, EClassifier type) {
			Variable var = EcoreFactory.eINSTANCE.createVariable(); // or ecoreEnv.getOCLFactory().createVariable()?
			var.setName(name);
			var.setType(ecoreEnv.getUMLReflection().getOCLType(type));
			return var;
		}		
	}
}
<%importManager.emitSortedImports();%>
