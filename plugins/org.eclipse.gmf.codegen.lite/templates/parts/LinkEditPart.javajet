<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="LinkEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.* java.util.*"%>
<%
GenLink genLink = (GenLink) ((Object[]) argument)[0];
GenDiagram genDiagram = genLink.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("TreeEditPartAdapter");
%>
<%@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.addImport("java.util.List");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
<%{
GenCommonBase genCommonBase = genLink;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> myDecorationManager;

	/**
	 * @generated
	 */
	public <%=genLink.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		assert view instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>;
		setModel(view);
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> getDiagramEdge() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) getModel();
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> getDecorationManager() {
		return myDecorationManager;
	}

<%@ include file="registerModel.jetinc"%>
<%
GenLinkLabel primaryLabel = null;
for(Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel next = (GenLinkLabel)it.next();
	if (!next.isReadOnly()) {
		primaryLabel = next;
		break;
	}
}
%>

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%@ include file="linkComponentEditPolicy.javajetinc"%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_ENDPOINTS_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy")%>());
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_BENDPOINTS_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.BendpointEditPolicy")%>());
<%
if (primaryLabel != null) {
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy")%>());
<%
}
%>
<%{
GenCommonBase genCommonBase = genLink;%>
<%@ include file="customBehaviour.jetinc"%>
<%@include file="openEditPolicy.jetinc"%>
<%}%>
	}

<%
if (primaryLabel != null) {
%>

	/**
	 * Returns the label which should be direct-edited by default.
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getPrimaryLabelEditPart() {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>.VISUAL_ID) {
				return (EditPart) getViewer().getEditPartRegistry().get(nextChild);
			}
		}
		return null;
	}

	/**
	 * @generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT.equals(req.getType())) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit;
			if (req instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) {
				labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
			} else {
				labelToEdit = getPrimaryLabelEditPart();
			}
			if (labelToEdit != null) {
				labelToEdit.performRequest(req);
			}
		}
<%@include file="performOpen.jetinc"%>
		super.performRequest(req);
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getLabelEditPart(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> req) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> result = getViewer().findObjectAt(req.getLocation());
		if (result != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) result.getModel();
			if (getDiagramEdge().getChildren().contains(view)) {
				int visualId = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
				switch (visualId) {
<%
		for (Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
			GenLinkLabel genLabel = (GenLinkLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}
%>
				case <%=importManager.getImportedName(genLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return result;
<%
		}
%>
				}
			}
		}
		return getPrimaryLabelEditPart();
	}

<%
}	//if (primaryLabel != null, i.e., there are editable labels)
%>

	/**
	 * @generated
	 */
	protected List getModelChildren() {
		return ((Edge)getModel()).getChildren();
	}

<%@ include file="refresher.javajetinc"%>

	/**
	 * @generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
		return super.getAdapter(key);
	}

	/**
	 * @generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element
%>
	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		getDiagramEdge().getElement().eAdapters().add(domainModelRefresher);
	}

	/**
	 * @generated
	 */
	public void deactivate() {
		getDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);
		super.deactivate();
	}

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
}
%>
<%@ include file="refreshers.javajetinc/externalRefreshers.javajetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@ include file="refreshers.javajetinc/bendpoints.javajetinc"%>
	}

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
//XXX:		refreshBackgroundColor();
//XXX:		refreshForegroundColor();
//XXX:		refreshFont();
		refreshVisibility();
		refreshBendpoints();
	}

	/**
	 * @generated
	 */
	protected void refreshBendpoints() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%> bendpoints = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%>) getDiagramEdge().getBendpoints();
		if (bendpoints == null) {
			getConnectionFigure().setRoutingConstraint(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST);
			return;
		}
		<%=importManager.getImportedName("java.util.List")%> modelConstraint = bendpoints.getPoints();
		<%=importManager.getImportedName("java.util.List")%> figureConstraint = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (int i = 0; i < modelConstraint.size(); i++) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%> wbp = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%>) modelConstraint.get(i);
			<%=importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint")%> rbp = new <%=importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint")%>(getConnectionFigure());
			rbp.setRelativeDimensions(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(wbp.getSourceX(), wbp.getSourceY()), new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(wbp.getTargetX(), wbp.getTargetY()));
			rbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));
			figureConstraint.add(rbp);
		}
		getConnectionFigure().setRoutingConstraint(figureConstraint);
	}

	/**
	 * @generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = ((View)getModel()).isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @generated
	 */
	public void addNotify() {
		super.addNotify();
		getConnectionFigure().setConnectionRouter(new <%=importManager.getImportedName("org.eclipse.draw2d.BendpointConnectionRouter")%>());
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> result = primCreateFigure();
		myDecorationManager = createDecorationManager(result);
		return result;
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> createDecorationManager(<%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.ConnectionDecorationManager")%>(connection);
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> primCreateFigure() {<%
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.PolylineConnection";
	}
%>
		return new <%=importManager.getImportedName(figureQualifiedClassName)%>();
<%} // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {%>
		return <%=((SnippetViewmap) viewmap).getBody()%>;
<%} // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {%>
 		return new <%=((InnerClassViewmap) viewmap).getClassName()%>();
<%}%>
	}

<%
if (genLink.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genLink.getViewmap()).getClassBody();
%>
<%=classBody%>
<%@ include file="mapmodeWorkaround.javajetinc"%>
<%
}
%>

	/**
	 * @generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramEdge(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @generated
		 */
		protected void createEditPolicies() {
<%@ include file="linkComponentEditPolicy.javajetinc"%>
<%
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		String editPatternCode = importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String primaryView = "getDiagramEdge()";
		String resolvedSemanticElement = "(" + importManager.getImportedName(typeLinkModelFacet.getMetaClass().getQualifiedInterfaceName()) + ") getDiagramEdge().getElement()";
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		GenClass underlyingMetaClass = typeLinkModelFacet.getMetaClass();
%>
<%@ include file="treeDirectEditPolicy.jetinc"%>
<%
}
%>
		}

<%
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
<%@include file="treeDirectEdit.jetinc" %>

		/**
		 * @generated
		 */
		protected String getEditText() {
			<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
	
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelEditText();
			}
			return "";
		}

<%
}
%>

<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element
%>
		/**
		 * @generated
		 */
		public void activate() {
			super.activate();
			getDiagramEdge().getElement().eAdapters().add(domainModelRefresher);
		}

		/**
		 * @generated
		 */
		public void deactivate() {
			getDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);
			super.deactivate();
		}

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
}
%>
		/**
		 * @generated
		 */
		protected void createRefreshers() {
			super.createRefreshers();
<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet || primaryLabel != null) {
	//Otherwise, an empty string will be returned, and it will not change no matter what.
%>
			Refresher labelRefresher = new Refresher() {
				public void refresh() {
					refreshVisuals();
				}
			};
<%
	if (primaryLabel != null) {
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		if (labelModelFacet instanceof FeatureLabelModelFacet) {
			FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
			for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
				GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
			}
		}
	} else {
		GenClass metaClass = ((TypeLinkModelFacet) genLink.getModelFacet()).getMetaClass();
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
}
%>
		}

<%
if (primaryLabel != null) {
%>
		/**
		 * @generated
		 */
		protected String getText() {
			<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelText();
			}
			return super.getText();
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> getPrimaryLabelEditPart() {
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return (<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>) <%=genLink.getEditPartClassName()%>.this.getViewer().getEditPartRegistry().get(nextChild);
				}
			}
			return null;
		}
<%
}
%>

		/**
		 * Since labels are not selectable edit parts, they are filtered from the overview as well.
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
	}
}
<%importManager.emitSortedImports();%>
