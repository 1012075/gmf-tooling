<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="DiagramEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
List childNodes = genDiagram.getTopLevelNodes();
%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.gef.editparts.AbstractGraphicalEditPart");
importManager.addImport("org.eclipse.draw2d.IFigure");
importManager.addImport("org.eclipse.draw2d.FreeformLayer");
importManager.addImport("org.eclipse.draw2d.FreeformLayout");
importManager.addImport("org.eclipse.draw2d.MarginBorder");
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.draw2d.geometry.Dimension");
importManager.addImport("org.eclipse.draw2d.geometry.Point");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.SnapToGrid");
importManager.addImport("org.eclipse.gef.SnapToHelper");
importManager.addImport("org.eclipse.gef.editpolicies.RootComponentEditPolicy");
importManager.addImport("org.eclipse.gef.commands.UnexecutableCommand");
importManager.addImport("org.eclipse.gef.editpolicies.RootComponentEditPolicy");
importManager.addImport("org.eclipse.gef.editpolicies.XYLayoutEditPolicy");
importManager.addImport("org.eclipse.gef.requests.ChangeBoundsRequest");
importManager.addImport("org.eclipse.gef.requests.CreateRequest");
importManager.addImport("org.eclipse.gmf.runtime.notation.Bounds");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.Node");
importManager.addImport("org.eclipse.gmf.runtime.notation.NotationPackage");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("java.util.List");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genDiagram.getEditPartClassName()%> extends AbstractGraphicalEditPart implements IUpdatableEditPart {
	/**
	 * @generated
	 */
	public static String MODEL_ID = "<%=genDiagram.getEditorGen().getModelID()%>";

<%{
GenCommonBase genCommonBase = genDiagram;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	public <%=genDiagram.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> model) {
		setModel(model);
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagram() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) getModel();
	}

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {
			protected Command getCreateCommand(CreateRequest request) {
<%if (null != genDiagram.getPalette()) {
final Palette palette = genDiagram.getPalette();%>
				if (request instanceof <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) {
					<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx requestEx = (<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) request;
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for(int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenTopLevelNode next = (GenTopLevelNode)it.next();
%>
						case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.append(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command(getDiagram(), requestEx, (<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>)getConstraintFor(request)));
							break;
<%
}
%>
						}
					}
					return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagram().getElement()), result);
				}
<%}/*when there's palette*/%>
				return null;
			}
			protected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {
				final Node node = (Node) child.getModel();
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> emfCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>("Change node position/size") {
					private Point moveDelta;
					private Dimension resizeDelta;

					public boolean canUndo() {
						return canExecute();
					}
					protected boolean prepare() {
						if (node.getLayoutConstraint() instanceof Bounds == false) {
							return false;
						}
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> original = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> transformed = request.getTransformedRectangle(original);
						resizeDelta = transformed.getSize().expand(original.getSize().negate());
						moveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());
						return true;
					}
					public void undo() {
						execute(moveDelta.getNegated(), resizeDelta.getNegated());
					}
					public void execute() {
						execute(moveDelta, resizeDelta);
					}
					public void redo() {
						execute();
					}
					private void execute(Point move, Dimension resize) {
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						bounds.setX(bounds.getX() + move.x);
						bounds.setY(bounds.getY() + move.y);
						bounds.setWidth(bounds.getWidth() + resize.width);
						bounds.setHeight(bounds.getHeight() + resize.height);
					}
				};
				return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagram().getElement()), emfCommand);
			}
			protected Command createChangeConstraintCommand(EditPart child, Object constraint) {
				assert false;
				return UnexecutableCommand.INSTANCE;
			}
		});
		installNotationModelRefresher();
	}

	/**
	 * @generated
	 */
	protected IFigure createFigure() {
		IFigure f = new FreeformLayer();
		f.setBorder(new MarginBorder(5));
		f.setLayoutManager(new FreeformLayout());
		return f;
	}

	/**
	 * @generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.SnapToHelper")%>.class == key) {
			return new <%=importManager.getImportedName("org.eclipse.gef.SnapToGrid")%>(this);
		}
<%/*@ include file="adapters/propertySource.javajetinc"*/%>
		return super.getAdapter(key);
	}

	/**
	 * @generated
	 */
	protected List getModelChildren() {
		return getDiagram().getVisibleChildren();
	}

<%
for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenTopLevelNode next = (GenTopLevelNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = false;
	String resolvedSemanticElement = "parent.getElement()";
%>
<%@ include file="createNodeCommand.javajetinc"%>
<%
}
%>

<%@ include file="refresher.javajetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
	}

	/**
	 * @generated
	 */
	private class UpdateManager extends <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EContentAdapter")%> {
		/**
		 * @generated
		 */
		public void notifyChanged(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> msg) {
			super.notifyChanged(msg);
			if (msg.isTouch()) {
				return;
			}
			<%=importManager.getImportedName("java.util.Collection")%> affectedEditParts = findAffectedParts(msg);
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = affectedEditParts.iterator(); it.hasNext(); ) {
				IUpdatableEditPart next = (IUpdatableEditPart) it.next();
				IUpdatableEditPart.Refresher refresher = next.getRefresher((<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%>)msg.getFeature(), msg);
				if (refresher != null) {
					refresher.refresh();
				}
			}
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("java.util.Collection")%>/*<IUpdatableEditPart>*/ findAffectedParts(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> msg) {
			Object notifier = msg.getNotifier();
			if (notifier instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = getView((EObject) notifier);
				if (view != null) {
					EditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);
					if (affectedEditPart != null) {
						return <%=importManager.getImportedName("java.util.Collections")%>.singleton(affectedEditPart);
					}
				}
			}
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getView(EObject offspring) {
			while (offspring != null && offspring instanceof View == false) {
				offspring = offspring.eContainer();
			}
			return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) offspring;
		}
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		getDiagram().eAdapters().add(updateManager);
		getDiagram().getElement().eAdapters().add(domainModelRefresher);
		installNotationModelRefresher();
	}

	/**
	 * @generated
	 */
	public void deactivate() {
		uninstallNotationModelRefresher();
		getDiagram().getElement().eAdapters().remove(domainModelRefresher);
		getDiagram().eAdapters().remove(updateManager);
		super.deactivate();
	}

<%
{
String _getDiagramCode = "getDiagram()";
String _getViewCode = "getDiagram()";
String _getSemanticElementCode = "getDiagram().getElement()";
boolean isListLayout = false;
%>
<%@ include file="notationModelRefresher.jetinc"%>
<%
}
%>

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

	/**
	 * @generated
	 */
	private UpdateManager updateManager = new UpdateManager();
}
<%importManager.emitSortedImports();%>
