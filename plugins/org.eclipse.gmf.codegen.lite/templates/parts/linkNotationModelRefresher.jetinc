<%
if (myHelper.containsLinks() || _includeUncontainedLinks) {
%>
	/**
	 * @generated
	 */
	private void installLinkNotationModelRefresher() {
		LinkNotationModelRefresher refresher = getLinkNotationModelRefresher();
		if (refresher.isInstalled()) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(<%=_getDiagramCode%>.getElement());
		refresher.install(domainModelEditDomain);
		refreshLinkNotationModel();
	}

	/**
	 * @generated
	 */
	private void uninstallLinkNotationModelRefresher() {
		getLinkNotationModelRefresher().uninstall();
	}

	/**
	 * @generated
	 */
	private LinkNotationModelRefresher linkNotationModelRefresher;

	/**
	 * Service to find a notational element that corresponds to the given underlying domain element. 
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> viewService;

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> getViewService() {
		if (viewService == null) {
			viewService = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService")%>(getViewer());
		}
		return viewService;
	}

	/**
	 * @generated
	 */
	private LinkNotationModelRefresher getLinkNotationModelRefresher() {
		if (linkNotationModelRefresher == null) {
			linkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());
		}
		return linkNotationModelRefresher;
	}

	/**
	 * @generated
	 */
	private class LinkNotationModelRefresher extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.OwnedLinksNotationModelRefresher")%> {
		/**
		 * @generated
		 */
		public LinkNotationModelRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> viewService) {
			super(viewService);
		}
<%
	boolean hasConstraintsInContainedLinks = false;
	for (Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeModelFacet typeModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
			hasConstraintsInContainedLinks = true;
			break;
		}
	}
	if (hasConstraintsInContainedLinks) {
%>

		/**
		 * NB: Child links of this element are selected based on constraint declared in <%=genDiagram.getVisualIDRegistryQualifiedClassName()%>. 
		 * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in 
		 * notational model having to be updated.
		 * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications
		 * result in such an update.
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> getConstrainedChildLinksFilter() {
			return <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.NOT_TOUCH;
		}
<%
	}
	if (_includeUncontainedLinks) {
%>
		/**
		 * Creates a notification filter which filters notifications that may possibly result in uncontained links. 
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> createUncontainedLinksFilter() {
			return <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.SET).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.UNSET).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.REMOVE).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.REMOVE_MANY)
			)));
		}
<%
	}
%>
		/**
		 * Creates a notification filter which filters notifications that may possibly affect the notational model
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> createFilter() {
<%
	{
		boolean hasDeclaredFilter = false;
		Set genAffectingFeatures = new LinkedHashSet();
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
			if (modelFacet == null) {
				continue;
			}
			GenFeature _feature = modelFacet.getChildMetaFeature();
%>
<%@ include file="notificationFilter.jetinc" %>
<%
			_feature = modelFacet.getSourceMetaFeature();
%>
<%@ include file="notificationFilter.jetinc" %>
<%
			_feature = modelFacet.getTargetMetaFeature();
%>
<%@ include file="notificationFilter.jetinc" %>
<%
		}
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			GenFeature _feature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
%>
<%@ include file="notificationFilter.jetinc" %>
<%
		}
		if (hasConstraintsInContainedLinks) {
			if (hasDeclaredFilter) {
%>
			filter = getConstrainedChildLinksFilter().or(filter);
<%
			} else {
				hasDeclaredFilter = true;
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = getConstrainedChildLinksFilter();
<%
			}
		}
		if (_includeUncontainedLinks) {
			if (hasDeclaredFilter) {
%>
			filter = filter.or(createUncontainedLinksFilter());
<%
			} else {
				hasDeclaredFilter = true;
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = createUncontainedLinksFilter();
<%
			}
		}
		if (!hasDeclaredFilter) {
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.NOT_TOUCH;
<%
		}
	}	//local declaration of hasDeclaredFilter
%>
			return filter;
		}

		/**
	 	 * @generated
	 	 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand")%> getCreateNotationalElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor")%> descriptor) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor")%> linkDescriptor = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor")%>) descriptor;
<%
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
	String _diagramCode = "getHost().getDiagram()";
%>
<%@ include file="../common/createNotationalEdgeCommand.jetinc"%>
<%
}
%>
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getSemanticChildLinks() {
<%
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
%>
<%@include file="../common/semanticChildLinks.jetinc"%>
<%
}
%>
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getNotationalChildLinks() {
			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.LinkedList")%>();
			<%=importManager.getImportedName("java.util.List")%> allLinks = <%=_getDiagramCode%>.getEdges();
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = allLinks.iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
<%
	if (_includeUncontainedLinks) {
%>
				if (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {
					result.add(next);
					continue;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source = next.getSource();
				if (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {
					result.add(next);
					continue;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target = next.getTarget();
				if (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {
					result.add(next);
					continue;
				}
<%
	}
	if (myHelper.containsFeatureModelFacetLinks()) {
%>
				if (!next.isSetElement() || next.getElement() == null) {
					if (next.getSource() == <%=_getViewCode%>) {
						int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
						switch (linkVID) {
<%
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
%>
						case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
		}
%>
							result.add(next);
							break;
						}
					}
<%
		if (myHelper.containsTypeModelFacetLinks()) {
%>
				} else {
<%
		} else {
%>
				}
<%
		}
	}
	if (myHelper.containsTypeModelFacetLinks()) {
		if (!myHelper.containsFeatureModelFacetLinks()) {
%>
				if (next.isSetElement() && next.getElement() != null) {
<%
		}
%>
					if (next.getElement().eContainer() == <%=_getViewCode%>.getElement()) {
						int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
						switch (linkVID) {
<%
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
%>
						case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
		}
%>
							result.add(next);
							break;
						}
					}
				}
<%
	}
%>
			}
			return result;
		}

		/**
		 * Returns whether a notational edge should be created for the given domain element. 
		 * The generated code always returns <%=genDiagram.isSynchronized()%>. 
		 * User can change implementation of this method to handle a more sophisticated logic.
		 * @generated
		 */
		protected boolean shouldCreateView(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor")%> descriptor) {
			return <%=genDiagram.isSynchronized()%>;
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getHost() {
			return <%=_getViewCode%>;
		}
	}

	/**
	 * @generated
	 */
	protected void refreshLinkNotationModel() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher")%> linkRefresher = getLinkNotationModelRefresher();
		if (!linkRefresher.isInstalled()) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = linkRefresher.buildRefreshNotationModelCommand();
		if (command == null) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(<%=_getDiagramCode%>.getElement());
		getViewer().getEditDomain().getCommandStack().execute(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command));
	}
<%
}
%>
