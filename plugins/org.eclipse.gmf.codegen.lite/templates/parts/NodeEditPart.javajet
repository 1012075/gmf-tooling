<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="NodeEditPartGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.gmfgen.util.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.ecore.*"
%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenNode genNode = (GenNode) genElement;
final GenDiagram genDiagram = genNode.getDiagram();
Palette palette = genDiagram.getPalette();
boolean isXYLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("LinkNotationModelRefresher");	//from linkNotationModelRefresher.jetinc
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
importManager.registerInnerClass("TreeEditPartAdapter");
%>

<%@ include file="../common/featureGetAccessor.jetinc"%>
<%@ include file="../common/relatedNodesFinder.jetinc"%>

<%
class NodeEditPartHelper {
	private final List myInnerLabels = new LinkedList();
	private final List myAllInnerLabels = new LinkedList();
	private final List myExternalLabels = new LinkedList();
	private final List myPinnedCompartments = new LinkedList();
	private final List myFloatingCompartments = new LinkedList();
	private final List myContainedFeatureModelFacetLinks = new LinkedList();
	private final List myContainedTypeModelFacetLinks = new LinkedList();
	private GenNodeLabel myPrimaryLabel;
	private boolean myHasChildrenInListCompartments = false;
	private boolean hasIncomingLinks = false;
	private boolean hasOutgoingLinks = false;

	public NodeEditPartHelper(GenNode genNode){
		myPrimaryLabel = null;

		for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel next = (GenNodeLabel) labels.next();
			if (myPrimaryLabel == null && !next.isReadOnly()){
				myPrimaryLabel = next;
			}
			if (next instanceof GenExternalNodeLabel) {
				myExternalLabels.add(next);
			} else {
				myAllInnerLabels.add(next);
				if (next.getViewmap() instanceof ParentAssignedViewmap) {
					myInnerLabels.add(next);
				}
			}
		}
		
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
			if (next.getViewmap() instanceof ParentAssignedViewmap){
				myPinnedCompartments.add(next);
			} else {
				myFloatingCompartments.add(next);
			}	
			
			myHasChildrenInListCompartments |= next.isListLayout() && !next.getChildNodes().isEmpty();
		}

		for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
			GenLink genLink = (GenLink)it.next();
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass incomingClass;
			GenClass outgoingClass;
			GenClass containerClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
				outgoingClass = modelFacet.getSourceMetaFeature() == null
					? modelFacet.getContainmentMetaFeature().getGenClass()
					: modelFacet.getSourceMetaFeature().getTypeGenClass();
				if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
					//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
					containerClass = null;
				} else {
					containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
				}
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				incomingClass = metaFeature.getTypeGenClass();
				outgoingClass = metaFeature.getGenClass();
				containerClass = metaFeature.getGenClass();
			} else {
				continue;
			}
			hasIncomingLinks |= (incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
			hasOutgoingLinks |= (outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
			if (containerClass != null && containerClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					myContainedTypeModelFacetLinks.add(genLink);
				} else {
					myContainedFeatureModelFacetLinks.add(genLink);
				}
			}
		}
	}

	public boolean hasBothChildrenAndCompartments() {
		return !genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty();
	}

	public boolean containsLinks() {
		return containsFeatureModelFacetLinks() || containsTypeModelFacetLinks();
	}

	public boolean containsFeatureModelFacetLinks() {
		return !myContainedFeatureModelFacetLinks.isEmpty();
	}

	public boolean containsTypeModelFacetLinks() {
		return !myContainedTypeModelFacetLinks.isEmpty();
	}

	public boolean hasIncomingLinks() {
		return hasIncomingLinks;
	}

	public boolean hasOutgoingLinks() {
		return hasOutgoingLinks;
	}

	public boolean hasChildrenInListCompartments(){
		return myHasChildrenInListCompartments;
	}
	
	public boolean hasInnerFixedLabels(){
		return !myInnerLabels.isEmpty();
	}
	
	public boolean hasPinnedCompartments(){
		return !myPinnedCompartments.isEmpty();
	}
	
	public boolean hasFixedChildren(){
		return hasInnerFixedLabels() || hasPinnedCompartments();
	}
	
	public boolean hasExternalLabels(){
		return !myExternalLabels.isEmpty();
	}
	
	public GenNodeLabel getPrimaryLabel(){
		return myPrimaryLabel;
	}
	
	public Iterator getInnerFixedLabels(){
		return myInnerLabels.iterator();
	}
	
	public Iterator getExternalLabels(){
		return myExternalLabels.iterator();
	}
	
	public Iterator getPinnedCompartments(){
		return myPinnedCompartments.iterator();
	}

	public Iterator getAllInnerLabels() {
		return myAllInnerLabels.iterator();
	}

	public Iterator getContainedFeatureModelFacetLinks() {
		return myContainedFeatureModelFacetLinks.iterator();
	}

	public Iterator getContainedTypeModelFacetLinks() {
		return myContainedTypeModelFacetLinks.iterator();
	}
}
final NodeEditPartHelper myHelper = new NodeEditPartHelper(genNode);
%>
<%@ include file="../copyright4java.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);%>
<%
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%> {
<%{
GenCommonBase genCommonBase = genNode;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> contentPane;

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> primaryShape;

<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childNodesPane;
<%
	}
%>

	/**
	 * @generated
	 */
	public <%=genNode.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> model) {
		assert model instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>;
		setModel(model);
	}

<%@ include file="registerModel.jetinc"%>

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%@ include file="componentEditPolicy.javajetinc"%>
<%
String layoutEditPolicyBaseClass;
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.XYLayoutEditPolicy";
} else {
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy";
}
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName(layoutEditPolicyBaseClass)%>() {
<%
{
	String _getViewCode = "getDiagramNode()";
	List childNodes = genNode.getChildNodes();
	boolean isListLayout = !isXYLayout;
%>
<%@include file="createAddCommand.jetinc"%>
<%@include file="createCloneCommand.jetinc"%>
<%
}
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCreateCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateRequest")%> request) {
<%
if (palette != null && !genNode.getChildNodes().isEmpty()) {
%>
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) request;
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for(int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
%>
						case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.append(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command((View) getModel(), requestEx<%if (isXYLayout) {%>, 
								(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>)getConstraintFor(request)<%}%>));
							break;
<%
	}
%>
						}
					}
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((View) getModel()).getDiagram().getElement()), result);
				}
<%
}
%>
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				if (!isDirectChild(child)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
<%@include file="changeConstraintCommand.jetinc"%>
			}
			protected Command createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				assert false;
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
} else {
%>
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> rect) {
				return null;
			}
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
				return null;
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
}
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> createChildEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child) {
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
				if (isDirectChild(child)) {
					return super.createChildEditPolicy(child);
				}
<%
}
%>
				return new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>() {
					public <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getTargetEditPart(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
						if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_SELECTION.equals(request.getType())) {
							return <%=genNode.getEditPartClassName()%>.this;
						}
						return super.getTargetEditPart(request);
					}
				};
			}
		});
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.GRAPHICAL_NODE_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy")%>() {
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getReconnectTargetCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
<%
if (!myHelper.hasIncomingLinks()) {
%> 
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
<%
} else {
%>
				<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection = request.getConnectionEditPart();
				if (connection.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> == false) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)connection.getModel();
				String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(edge);
				if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = null;
				int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(edge);
				switch (visualID) {
<%
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass incomingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			incomingClass = metaFeature.getTypeGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}
%>
				case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result = new Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(request);
					break;
<%
	}
%>
				}
				if (result == null) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
<%
}
%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getReconnectSourceCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
<%
if (!myHelper.hasOutgoingLinks()) {
%> 
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
<%
} else {
%>
				<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection = request.getConnectionEditPart();
				if (connection.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> == false) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)connection.getModel();
				String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(edge);
				if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = null;
				int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(edge);
				switch (visualID) {
<%
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass outgoingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			outgoingClass = modelFacet.getSourceMetaFeature() == null
				? modelFacet.getContainmentMetaFeature().getGenClass()
				: modelFacet.getSourceMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			outgoingClass = metaFeature.getGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}
%>
				case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result = new Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(request);
					break;
<%
	}
%>
				}
				if (result == null) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
<%
}
%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCreateCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> request) {
<%if (palette != null && myHelper.hasOutgoingLinks()) {%>
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) request;
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for (int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
%>
						case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.appendIfCanExecute(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(requestEx));
							break;
<%
}
%>
						}
					}
					if (!result.canExecute()) {
						//returning an unexecutable command does not change cursor to "No".
						return null;
					}
					<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> wrappedResult = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
					request.setStartCommand(wrappedResult);
					return wrappedResult;
				}
<%}/*when there's palette*/%>
				return null;
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCompleteCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> request) {
<%if (palette != null && myHelper.hasIncomingLinks()) {%>
				if (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) request;
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for (int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
%>
						case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.appendIfCanExecute(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(requestEx));
							break;
<%
}
%>
						}
					}
					if (result.getCommandList().size() != 1 || !result.canExecute()) {
						//Cannot create several connections at once.
						return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
					}
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
				}
<%}/*when there's palette*/%>
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
		});
<%
if (myHelper.getPrimaryLabel() != null) {
%>
		//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here.
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy")%>() {
			protected void showCurrentEditValue(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDirectEditCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
				return null;
			}
		});
<%
}
%>
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> invisibleRectangle = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		invisibleRectangle.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.StackLayout")%>());
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> shape = createNodeShape();
		invisibleRectangle.add(shape);
		contentPane = setupContentPane(shape);
<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		childNodesPane = createChildNodesPane();
		shape.add(childNodesPane);
<%
	}
%>

		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> decorationShape = createDecorationPane();
		if (decorationShape != null) {
			invisibleRectangle.add(decorationShape);
		}

		return invisibleRectangle;
	}

<%
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createChildNodesPane() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> result = new <%=importManager.getImportedName("org.eclipse.draw2d.RectangleFigure")%>();
		setupContentPane(result);
		return result;
	}
<%
	}
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createNodeShape() {
<%
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}
%>
		primaryShape = new <%=importManager.getImportedName(figureQualifiedClassName)%>()<%if (isXYLayout) {%> {
			protected boolean useLocalCoordinates() {
				return true;
			}
		}<%} /* use flow layout*/ %>;
<%} else if (viewmap instanceof SnippetViewmap) {%>
		primaryShape = <%=((SnippetViewmap) viewmap).getBody()%>;
<%} else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
%>
		<%=figureQualifiedClassName%> figure = new <%=figureQualifiedClassName%>();
<%if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/%>
 		figure.setUseLocalCoordinates(true);
<%}%>
 		primaryShape = figure;
<%}%>
		return primaryShape;
	}
<%if (figureQualifiedClassName != null) {%>

	/**
	 * @generated
	 */
	public <%=figureQualifiedClassName%> getPrimaryShape() {
		return (<%=figureQualifiedClassName%>) primaryShape;
	}
<%}%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createDecorationPane() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
		if (annotation == null) {
			return null;
		}
		
		<%=importManager.getImportedName("org.eclipse.draw2d.Figure")%> decorationPane = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		decorationPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.BorderLayout")%>());

		<%=importManager.getImportedName("org.eclipse.draw2d.ImageFigure")%> imageFigure = new <%=importManager.getImportedName("org.eclipse.draw2d.ImageFigure")%>(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage("icons/shortcut.gif"), <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.EAST);
		decorationPane.add(imageFigure, <%=importManager.getImportedName("org.eclipse.draw2d.BorderLayout")%>.BOTTOM);
 		return decorationPane;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> setupContentPane(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
<%
if (!isXYLayout) {
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");
%>
			<%=layoutClassName%> layout = new <%=layoutClassName%>();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
<%} else {%>
		nodeShape.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayout")%>() {

			public Object getConstraint(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
				Object result = constraints.get(figure);
				if (result == null) {
					result = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(0, 0, -1, -1);
				}
				return result;
			}
		});
<%}%>
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getContentPane() {
		if (contentPane == null) {
			return super.getContentPane();
		}
		return contentPane;
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

<%
	if (myHelper.hasFixedChildren()) {
%>
	/**
	 * @generated
	 */
	protected boolean addFixedChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
for (Iterator it = myHelper.getInnerFixedLabels(); it.hasNext(); ) {
	GenNodeLabel genLabel = (GenNodeLabel) it.next();
	final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();
%>
		if (childEditPart instanceof <%=labelEditPart%>) {
			((<%=labelEditPart%>) childEditPart).<%=childSetterName%>(getPrimaryShape().<%=childViewmap.getGetterName()%>());
			return true;
		}
<%
}

for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%	
} // for pinned compartments
%>
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
<%
//XXX: ignore labels assuming that they never may be removed
for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>		
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			pane.remove(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%
} // for pinned compartments
%>
		return false;
	}
<%
} // if myHelper.hasFixedChildren()
%>

	/**
	 * Returns the label which should be direct-edited by default.
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getPrimaryLabelEditPart() {
<%
		if (myHelper.getPrimaryLabel() != null) {
%>
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
				return (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getViewer().getEditPartRegistry().get(nextChild);
			}
		}
<%
		}
%>
		return null;
	}

	/**
	 * @generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT == req.getType()) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit;
			if (req instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) {
				labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
			} else {
				labelToEdit = getPrimaryLabelEditPart();
			}
			if (labelToEdit != null) {
				labelToEdit.performRequest(req);
			}
		}
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getLabelEditPart(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> req) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> result = getViewer().findObjectAt(req.getLocation());
		if (result != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) result.getModel();
			if (getDiagramNode().getChildren().contains(view)) {
				int visualId = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
				switch (visualId) {
<%
		for (Iterator it = myHelper.getAllInnerLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}
%>
				case <%=importManager.getImportedName(genLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return result;
<%
		}
%>
				}
			}
		}
		return getPrimaryLabelEditPart();
	}

<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @generated
	 */
	protected boolean isExternalLabel(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for (Iterator externalLabels = myHelper.getExternalLabels(); externalLabels.hasNext();) {
		GenNodeLabel next = (GenNodeLabel) externalLabels.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getExternalLabelsContainer() {
		<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%> root = (<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%>) getRoot();
		return root.getLayer(<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER);
	}

<%
}
if (!genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @generated
	 */
	protected boolean isDirectChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for(Iterator directChildren = genNode.getChildNodes().iterator(); directChildren.hasNext(); ) {
		GenChildNode next = (GenChildNode) directChildren.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}
<%
}
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren() || myHelper.hasBothChildrenAndCompartments()) {
%>

	/**
	 * @generated
	 */
	protected void addChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart, int index) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().add(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()) {
%>
		if (addFixedChild(childEditPart)) {
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.add(childFigure);
			return;
		}
<%
	}
%>
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().remove(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()){
%>
		if (removeFixedChild(childEditPart)){
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.remove(childFigure);
			return;
		}
<%
	}
%>
		super.removeChildVisual(childEditPart);
	}
<%
}
%>
<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @generated
	 */
	public void removeNotify() {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			if (isExternalLabel(childEditPart)) {
				IFigure labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
				getExternalLabelsContainer().remove(labelFigure);
			}
		}
		super.removeNotify();
	}
<%
}
%>

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
		refreshBackgroundColor();
		refreshForegroundColor();
		refreshFont();
		refreshVisibility();
	}

	/**
	 * @generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = getDiagramNode().isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @generated
	 */
	protected void refreshBounds() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> node = getDiagramNode();
		if (node.getLayoutConstraint() == null) {
			return;
		}
		assert node.getLayoutConstraint() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>;
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>) node.getLayoutConstraint();
		int x = bounds.getX();
		int y = bounds.getY();
		int width = bounds.getWidth();
		int height = bounds.getHeight();
		if (width < 0) {
			x -= width;
			width = -width;
		}
		if (height < 0) {
			y -= height;
			height = -height;
		}
		((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) getParent()).setLayoutConstraint(this, getFigure(), 
			new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(x, y, width, height));
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return getDiagramNode().getVisibleChildren();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelSourceConnections() {
		return getDiagramNode().getSourceEdges();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelTargetConnections() {
		return getDiagramNode().getTargetEdges();
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
<%/*@ include file="adapters/propertySource.javajetinc"*/%>
		return super.getAdapter(key);
	}

	/**
	 * @generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @generated
	 */
	public void deactivate() {
<%
if (myHelper.containsLinks()) {
%>
		uninstallLinkNotationModelRefresher();
<%
}
%>
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		uninstallNotationModelRefresher();
<%
}
%>
		getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
		super.deactivate();
	}
<%
{
	final String _getViewCode = "getDiagramNode()";
	final String _getDiagramCode = "getDiagramNode().getDiagram()";
	final boolean _includeUncontainedLinks = false;
	if (!genNode.getChildNodes().isEmpty()) {
		final boolean isListLayout = !isXYLayout;
		final List childNodes = genNode.getChildNodes();
%>
<%@ include file="notationModelRefresher.jetinc"%>
<%
	}
%>
<%@ include file="linkNotationModelRefresher.jetinc"%>
<%
}	//end of local declarations
%>

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%@ include file="refreshers.javajetinc/externalRefreshers.javajetinc"%>

<%
	final String primaryView = "getDiagramNode()";
%>
<%@ include file="refreshMethods/font.javajetinc"%>

<%@ include file="refreshMethods/shapeColor.javajetinc"%>

<%@ include file="refresher.javajetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new <%=importManager.getImportedName("java.util.HashMap")%>();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@ include file="refreshers.javajetinc/bounds.javajetinc"%>
<%@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@ include file="refreshers.javajetinc/sourceEdges.javajetinc"%>
<%@ include file="refreshers.javajetinc/targetEdges.javajetinc"%>
<%@ include file="refreshers.javajetinc/font.javajetinc"%>
<%@ include file="refreshers.javajetinc/shapeColor.javajetinc"%>
	}

<%
for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = !isXYLayout;
%>
<%@ include file="createNodeCommand.javajetinc"%>
<%
}
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
%>
	/**
	 * @generated
	 */
	private static class Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newSource;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> oldSource;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> reconnectCommand;
		/**
		 * @generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
			this((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)request.getConnectionEditPart().getModel(), (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)request.getTarget().getModel());
		}
		/**
		 * @generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newSource) {
			this.edge = edge;
			this.newSource = newSource;
			this.oldSource = edge.getSource();
		}
		/**
		 * @generated
		 */
		public void execute() {
			reconnectCommand.execute();
		}
		/**
		 * @generated
		 */
		public boolean canUndo() {
			return reconnectCommand.canUndo();
		}
		/**
		 * @generated
		 */
		public void undo() {
			reconnectCommand.undo();
		}
		/**
		 * @generated
		 */
		public void redo() {
			execute();
		}
		/**
		 * @generated
		 */
		protected boolean prepare() {
<%
	if (linkConstraints != null) {
%>
			final boolean[] resultHolder = new boolean[1];
			//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
			final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldSource.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
				private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
				public boolean canExecute() {
					return deleteCommand.canExecute();
				}
				public boolean canUndo() {
					return true;
				}
				public void redo() {
				}
				public void undo() {
				}
				public void execute() {
					deleteCommand.execute();
					try {
						resultHolder[0] = canReconnect();
					} finally {
						deleteCommand.undo();
					}
				}
			};
			if (!command.canExecute()) {
				return false;
			}
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command).execute();
			if (resultHolder[0]) {
				reconnectCommand = createReconnectCommand();
			}
			return resultHolder[0] && reconnectCommand.canExecute();
<%
	} else {
%>
			if (canReconnect()) {
				reconnectCommand = createReconnectCommand();
				return reconnectCommand.canExecute();
			}
			return false;
<%
	}
%>
		}

		/**
		 * @generated
		 */
		private boolean canReconnect() {
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			if (containmentFeature == null) {
%>
			return false;
<%
			} else {
%>
			<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%> container = (<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%>)getRelationshipContainer(newSource.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return false;
			}
<%
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
					}
				}
			}
			//No need to check the size of the source or target features: their size does not change
			//Still need to check the eOpposite() of the source feature
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
			if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
				GenFeature _feature = sourceReverseFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			{
				GenFeature _feature = metaFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createReconnectCommand() {
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldSource.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
			result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeSourceCommand")%>(edge, newSource));
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			boolean setSource = sourceFeature != null;
			boolean setChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						setSource = false;
					}
				}
			}
			if (containmentFeature != null || setChild) {
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = getRelationshipContainer(newSource.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
			}
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> oldContainer = edge.getElement().eContainer();
			if (oldContainer == null) {
				return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
			}
			if (oldContainer != container) {
<%
			}
			if (containmentFeature != null) {
				if (containmentFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
				} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
				}
%>
				result.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					container, <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
			}
			if (setChild) {
				if (childFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					edge.getElement()));
<%
				} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
				}
%>
				result.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					container, <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
			}
%>
			}
<%
			if (setSource) {
				if (sourceFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				oldSource.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				newSource.getElement()));
<%
				} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				newSource.getElement()));
<%
				}
			}
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				oldSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				newSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				oldSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				newSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
<%
			}
		}
%>
			return result;
		}

<%@ include file="getRelationshipContainer.jetinc"%>
<%
	if (linkConstraints != null) {
		String _edge = "edge";
%>
	/**
	 * @generated
	 */
<%@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
	}
%>
	}

<%
	if (palette != null) {
%>
	/**
	 * @generated
	 */
	private static class Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source;
		/**
		 * @generated
		 */
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx) {
			//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart().
			source = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getTargetEditPart().getModel();
		}
		/**
		 * @generated
		 */
		public void execute() {
			//This command never gets executed
		}
		/**
		 * @generated
		 */
		public void undo() {
			//This command never gets executed
		}
		/**
		 * @generated
		 */
		public void redo() {
			//This command never gets executed
		}
		/**
		 * @generated
		 */
		public boolean canUndo() {
			return true;
		}
		/**
		 * @generated
		 */
		protected boolean prepare() {
			if (source == null) {
				return false;
			}
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			if (containmentFeature == null) {
%>
			return false;
<%
			} else {
%>
			<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%> container = (<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%>)getRelationshipContainer(source.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return false;
			}
<%
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
				GenFeature childFeature = modelFacet.getChildMetaFeature();
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
					}
				}
				//Need to check the eOpposite() of the source feature
				GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
				GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
				if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
					GenFeature _feature = sourceReverseFeature;
					String _ownerInstance = "source.getElement()";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		{
			GenFeature _feature = metaFeature;
			String _ownerInstance = "source.getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
		}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}
<%@ include file="getRelationshipContainer.jetinc"%>

	}
<%
	}	//if there's palette 
}	//outgoing links
%>
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
%>
	/**
	 * @generated
	 */
	private static class Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> oldTarget;
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> reconnectCommand;
		/**
		 * @generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
			this((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)request.getConnectionEditPart().getModel(), (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)request.getTarget().getModel());
		}
		/**
		 * @generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget) {
			this.edge = edge;
			this.newTarget = newTarget;
			this.oldTarget = edge.getTarget();
		}
		/**
		 * @generated
		 */
		public void execute() {
			reconnectCommand.execute();
		}
		/**
		 * @generated
		 */
		public boolean canUndo() {
			return reconnectCommand.canUndo();
		}
		/**
		 * @generated
		 */
		public void undo() {
			reconnectCommand.undo();
		}
		/**
		 * @generated
		 */
		public void redo() {
			execute();
		}
		/**
		 * @generated
		 */
		protected boolean prepare() {
<%
	if (linkConstraints != null) {
%>
			final boolean[] resultHolder = new boolean[1];
			//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
			final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
				private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
				public boolean canExecute() {
					return deleteCommand.canExecute();
				}
				public boolean canUndo() {
					return true;
				}
				public void redo() {
				}
				public void undo() {
				}
				public void execute() {
					deleteCommand.execute();
					try {
						resultHolder[0] = canReconnect();
					} finally {
						deleteCommand.undo();
					}
				}
			};
			if (!command.canExecute()) {
				return false;
			}
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command).execute();
			if (resultHolder[0]) {
				reconnectCommand = createReconnectCommand();
			}
			return resultHolder[0] && reconnectCommand.canExecute();
<%
	} else {
%>
			if (canReconnect()) {
				reconnectCommand = createReconnectCommand();
				return reconnectCommand.canExecute();
			}
			return false;
<%
	}
%>
		}
		/**
		 * @generated
		 */
		private boolean canReconnect() {
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			//Need to check the eOpposite() of the target feature
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
			if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
				GenFeature _feature = targetReverseFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			//Need to check eOpposite() of the metaFeature
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}
		/**
		 * @generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createReconnectCommand() {
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
			result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand")%>(edge, newTarget));
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			if (targetFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				oldTarget.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				newTarget.getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				newTarget.getElement()));
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), oldTarget.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			}
		}
%>
			return result;
		}
<%
	if (linkConstraints != null) {
		String _edge = "edge";
%>
	/**
	 * @generated
	 */
<%@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
	}
%>
	}

<%
	if (palette != null) {
%>
	/**
	 * @generated
	 */
	private static class Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source;
		/**
		 * @generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target;
		/**
		 * @generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> createdEdge;
		/**
		 * @generated
		 */
		private final org.eclipse.emf.common.command.Command domainModelAddCommand;
		/**
		 * @generated
		 */
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx) {
			if (requestEx.getSourceEditPart().getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				source = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getSourceEditPart().getModel();
			} else {
				source = null;
			}
			if (requestEx.getTargetEditPart().getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				target = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getTargetEditPart().getModel();
			} else {
				target = null;
			}
			if (source == null || target == null) {
				createdEdge = null;
				domainModelAddCommand = <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
				return;
			}
			createdEdge = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createEdge();
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenClass linkClass = modelFacet.getMetaClass();
%>
			<%=importManager.getImportedName(importManager.getImportedName(linkClass.getQualifiedInterfaceName()))%> createdDomainElement = <%=importManager.getImportedName(linkClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=linkClass.getClassifierAccessorName()%>();
			createdEdge.setElement(<%if (linkClass.isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
			<%/*XXX: Class name DomainElementInitializer should be user-customizable*/%>
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=genLink.getUniqueIdentifier()%>.initializeElement(<%if (linkClass.isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
<%
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
%>
			createdEdge.setElement(null);
<%
		}
%>
			<%=importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(createdEdge);
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(source.getDiagram().getElement());
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
			org.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();
<%
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			//source/link features seem to be pointing from link to its ends, not vice versa.
			//Anyway, if there is containment feature and it is not opposite to either the source/target, we should add containment, 
			//otherwise we will have problems with saving uncontained EObjects.
			boolean addSource = sourceFeature != null;
			boolean addTarget = targetFeature != null;
			boolean addChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addSource = false;
					}
				}
				if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
					EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
					if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addTarget = false;
					}
				}
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = getRelationshipContainer(source.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				domainModelAddCommand = null;
				return;
			}
			addLinkEndsCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				container, <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement));
<%
			}
			if (addChild) {
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain,
				container, <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), createdDomainElement));
<%
			}
			if (addSource) {
				{
					GenFeature _feature = sourceFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(sourceFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				createdDomainElement, <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), source.getElement()));
<%
			}
			if (addTarget) {
				{
					GenFeature _feature = targetFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
				//Need to check the eOpposite() of the target feature
				GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
				if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
					GenFeature _feature = targetReverseFeature;
					String _ownerInstance = "target.getElement()";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
				}
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(targetFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				createdDomainElement, <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), target.getElement()));
<%
			}
%>
		domainModelAddCommand = addLinkEndsCommand;
<%
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			//Need to check eOpposite() of the metaFeature
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "target.getElement()";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
				GenClass _ownerGenClass = null;
%>
<%@ include file="featureMultiplicity.jetinc"%>
<%
			}
%>
			domainModelAddCommand = <%=importManager.getImportedName(metaFeature.getEcoreFeature().isMany()? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, source.getElement(), 
				<%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), target.getElement());
<%
		}
%>
		}

<%@ include file="getRelationshipContainer.jetinc"%>

		/**
		 * @generated
		 */
		public boolean canExecute() {
			if (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {
				return false;
			}
<%
{
	String _source = "source.getElement()";
	String _target = "target.getElement()";
%>
<%@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
		}
		/**
		 * @generated
		 */
		public boolean canUndo() {
			return source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();
		}
		/**
		 * @generated
		 */
		public void execute() {
			domainModelAddCommand.execute();
			source.getDiagram().insertEdge(createdEdge);
			createdEdge.setSource(source);
			createdEdge.setTarget(target);
		}
		/**
		 * @generated
		 */
		public void undo() {
			domainModelAddCommand.undo();
			source.getDiagram().removeEdge(createdEdge);
			createdEdge.setSource(null);
			createdEdge.setTarget(null);
		}
		/**
		 * @generated
		 */
		public void redo() {
			execute();
		}
	}
<%
	}
%>
<%}/*when there's palette*/%>
<%
if (genNode.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genNode.getViewmap()).getClassBody();
%>
<%=classBody%>
<%@ include file="mapmodeWorkaround.javajetinc"%>
<%
}
%>

	/**
	 * @generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramNode(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @generated
		 */
		protected void createEditPolicies() {
<%@ include file="componentEditPolicy.javajetinc"%>
<%
if (myHelper.getPrimaryLabel() != null) {
		String editPatternCode = importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		String resolvedSemanticElement = "(" + importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName()) + ") getDiagramNode().getElement()";
		LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
		GenClass underlyingMetaClass = genNode.getDomainMetaClass();
%>
<%@ include file="treeDirectEditPolicy.jetinc"%>
<%
}
%>
		}

<%
if (myHelper.getPrimaryLabel() != null) {
%>
<%@include file="treeDirectEdit.jetinc" %>

		/**
		 * @generated
		 */
		protected String getEditText() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelEditText();
			}
			return "";
		}

<%
}
%>
		/**
		 * @generated
		 */
		public void activate() {
			super.activate();
			getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
		}

		/**
		 * @generated
		 */
		public void deactivate() {
			getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
			super.deactivate();
		}

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
if (myHelper.getPrimaryLabel() != null) {
%>
		/**
		 * @generated
		 */
		protected String getText() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelText();
			}
			return super.getText();
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> getPrimaryLabelEditPart() {
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return (<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>) <%=genNode.getEditPartClassName()%>.this.getViewer().getEditPartRegistry().get(nextChild);
				}
			}
			return null;
		}
<%
}
%>

		/**
		 * @generated
		 */
		protected void createRefreshers() {
			super.createRefreshers();
			Refresher labelRefresher = new Refresher() {
				public void refresh() {
					refreshVisuals();
				}
			};
<%
if (myHelper.getPrimaryLabel() != null) {
	LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
	if (labelModelFacet instanceof FeatureLabelModelFacet) {
		GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
%>
			registerRefresher(<%=importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=feature.getFeatureAccessorName()%>(), labelRefresher);
<%
	} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
		CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
		for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
} else {
	GenClass metaClass = genNode.getDomainMetaClass();
	if (metaClass != null) {
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
%>
<%
}
%>
		}

		/**
		 * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well.
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
				switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next)) {
<%
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.add(next);
					break;
<%
}
%>
<%
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.addAll(next.getChildren());
					break;
<%
}
%>
				}
			}
			result.addAll(getDiagramNode().getSourceEdges());
			return result;
		}
	}
}
<%importManager.emitSortedImports();%>
