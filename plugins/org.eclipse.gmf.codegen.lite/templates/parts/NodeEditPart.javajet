<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="NodeEditPartGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.gmfgen.util.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.ecore.*"
%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenNode genNode = (GenNode) genElement;
final GenDiagram genDiagram = genNode.getDiagram();
boolean isXYLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("LinkNotationModelRefresher");	//from linkNotationModelRefresher.jetinc
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
importManager.registerInnerClass("TreeEditPartAdapter");
%>

<%@ include file="../common/featureGetAccessor.jetinc"%>

<%
@SuppressWarnings("unchecked")
class NodeEditPartHelper {
	private final List myInnerLabels = new LinkedList();
	private final List myAllLabels = new LinkedList();
	private final List myExternalLabels = new LinkedList();
	private final List myPinnedCompartments = new LinkedList();
	private final List myFloatingCompartments = new LinkedList();
	private final List myContainedFeatureModelFacetLinks = new LinkedList();
	private final List myContainedTypeModelFacetLinks = new LinkedList();
	private GenNodeLabel myPrimaryLabel;

	public NodeEditPartHelper(GenNode genNode){
		myPrimaryLabel = null;

		for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel next = (GenNodeLabel) labels.next();
			if (myPrimaryLabel == null && !next.isReadOnly()){
				myPrimaryLabel = next;
			}
			myAllLabels.add(next);
			if (next instanceof GenExternalNodeLabel) {
				myExternalLabels.add(next);
			} else {
				if (next.getViewmap() instanceof ParentAssignedViewmap) {
					myInnerLabels.add(next);
				}
			}
		}
		
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
			if (next.getViewmap() instanceof ParentAssignedViewmap){
				myPinnedCompartments.add(next);
			} else {
				myFloatingCompartments.add(next);
			}	
		}

		for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
			GenLink genLink = (GenLink)it.next();
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass containerClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
					//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
					containerClass = null;
				} else {
					containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
				}
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				containerClass = metaFeature.getGenClass();
			} else {
				continue;
			}
			if (containerClass != null && containerClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					myContainedTypeModelFacetLinks.add(genLink);
				} else {
					myContainedFeatureModelFacetLinks.add(genLink);
				}
			}
		}
	}

	public boolean hasBothChildrenAndCompartments() {
		return !genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty();
	}

	public boolean containsLinks() {
		return containsFeatureModelFacetLinks() || containsTypeModelFacetLinks();
	}

	public boolean containsFeatureModelFacetLinks() {
		return !myContainedFeatureModelFacetLinks.isEmpty();
	}

	public boolean containsTypeModelFacetLinks() {
		return !myContainedTypeModelFacetLinks.isEmpty();
	}

	public boolean hasInnerFixedLabels(){
		return !myInnerLabels.isEmpty();
	}
	
	public boolean hasPinnedCompartments(){
		return !myPinnedCompartments.isEmpty();
	}
	
	public boolean hasFixedChildren(){
		return hasInnerFixedLabels() || hasPinnedCompartments();
	}
	
	public boolean hasExternalLabels(){
		return !myExternalLabels.isEmpty();
	}
	
	public GenNodeLabel getPrimaryLabel(){
		return myPrimaryLabel;
	}
	
	public Iterator getInnerFixedLabels(){
		return myInnerLabels.iterator();
	}
	
	public Iterator getExternalLabels(){
		return myExternalLabels.iterator();
	}
	
	public Iterator getPinnedCompartments(){
		return myPinnedCompartments.iterator();
	}

	public Iterator getAllLabels() {
		return myAllLabels.iterator();
	}

	public Iterator getContainedFeatureModelFacetLinks() {
		return myContainedFeatureModelFacetLinks.iterator();
	}

	public Iterator getContainedTypeModelFacetLinks() {
		return myContainedTypeModelFacetLinks.iterator();
	}
}
final NodeEditPartHelper myHelper = new NodeEditPartHelper(genNode);
%>
<%@ include file="../copyright4java.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);%>
<%
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
<%{
GenCommonBase genCommonBase = genNode;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> contentPane;

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> primaryShape;

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> myDecorationManager;

<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childNodesPane;
<%
	}
%>

	/**
	 * @generated
	 */
	public <%=genNode.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> model) {
		assert model instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>;
		setModel(model);
	}

<%@ include file="registerModel.jetinc"%>

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%@ include file="componentEditPolicy.javajetinc"%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.GRAPHICAL_NODE_ROLE, new <%=importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName())%>());
<%
if (myHelper.getPrimaryLabel() != null) {
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy")%>());
<%
}
%>
<%{
GenCommonBase genCommonBase = genNode;%>
<%@ include file="layoutEditPolicy.jetinc"%>
<%@ include file="customBehaviour.jetinc"%>
<%@include file="openEditPolicy.jetinc"%>
<%}%>
		installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> getPrimaryDragEditPolicy() {
<%
if (genNode.getPrimaryDragEditPolicyQualifiedClassName() != null) {
%>
		return new <%=importManager.getImportedName(genNode.getPrimaryDragEditPolicyQualifiedClassName())%>();
<%
} else {
	if (genNode.getCompartments().isEmpty()) {
%>
		<%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%> result = new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>();
<%
	} else {
%>
		<%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%> result = new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>() {
			protected <%=importManager.getImportedName("java.util.List")%> createSelectionHandles() {
				<%=importManager.getImportedName("java.util.List")%> result = super.createSelectionHandles();
				for(<%=importManager.getImportedName("java.util.Iterator")%> it = getChildren().iterator(); it.hasNext(); ) {
					<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> next = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) next.getModel();
					switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextView)) {
<%
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
%>
					case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
						result.addAll(((<%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) next).createSelectionHandles());
						break;
<%
		}
%>
					}
				}
				return result;
			}
		};
<%
	}
	ResizeConstraints rc = (ResizeConstraints) genNode.getViewmap().find(ResizeConstraints.class);
	if (rc != null) {
		if (rc.getResizeHandles() == 0) {
%>
		result.setResizeDirections(<%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.NONE);
<%
		} else {
%>
		result.setResizeDirections(<%
			for (Iterator it = rc.getResizeHandleNames().iterator(); it.hasNext(); ) {
				String next = (String) it.next();
%><%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.<%=next%><%
				if (it.hasNext()) {%> | <%
				}
			}
		%>);
<%
		}
	}
%>
		return result;
<%
}
%>
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> invisibleRectangle = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		invisibleRectangle.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.StackLayout")%>());
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> shape = createNodeShape();
		invisibleRectangle.add(shape);
		contentPane = setupContentPane(shape);
<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		childNodesPane = createChildNodesPane();
		shape.add(childNodesPane);
<%
	}
%>

		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> decorationShape = createDecorationPane();
		if (decorationShape != null) {
			myDecorationManager = createDecorationManager(decorationShape);
			invisibleRectangle.add(decorationShape, 0);
		}

		return invisibleRectangle;
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> createDecorationManager(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> decorationShape) {
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.PaneDecorationManager")%>(decorationShape);
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> getDecorationManager() {
		return myDecorationManager;
	}

<%
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createChildNodesPane() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> result = new <%=importManager.getImportedName("org.eclipse.draw2d.RectangleFigure")%>();
		setupContentPane(result);
		return result;
	}
<%
	}
%>
	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createNodeShape() {
<%
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}
%>
		primaryShape = new <%=importManager.getImportedName(figureQualifiedClassName)%>()<%if (isXYLayout) {%> {
			protected boolean useLocalCoordinates() {
				return true;
			}
		}<%} /* use flow layout*/ %>;
<%} else if (viewmap instanceof SnippetViewmap) {%>
		primaryShape = <%=((SnippetViewmap) viewmap).getBody()%>;
<%} else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
%>
		<%=figureQualifiedClassName%> figure = new <%=figureQualifiedClassName%>();
<%if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/%>
 		figure.setUseLocalCoordinates(true);
<%}%>
 		primaryShape = figure;
<%}%>
		return primaryShape;
	}
<%if (figureQualifiedClassName != null) {%>

	/**
	 * @generated
	 */
	public <%=figureQualifiedClassName%> getPrimaryShape() {
		return (<%=figureQualifiedClassName%>) primaryShape;
	}
<%}%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createDecorationPane() {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> setupContentPane(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
<%
if (!isXYLayout) {
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");
%>
			<%=layoutClassName%> layout = new <%=layoutClassName%>();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
<%} else {%>
		nodeShape.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayout")%>() {

			public Object getConstraint(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
				Object result = constraints.get(figure);
				if (result == null) {
					result = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(0, 0, -1, -1);
				}
				return result;
			}
		});
<%}%>
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getContentPane() {
		if (contentPane == null) {
			return super.getContentPane();
		}
		return contentPane;
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

<%
	if (myHelper.hasFixedChildren()) {
%>
	/**
	 * @generated
	 */
	protected boolean addFixedChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
for (Iterator it = myHelper.getInnerFixedLabels(); it.hasNext(); ) {
	GenNodeLabel genLabel = (GenNodeLabel) it.next();
	final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();
%>
		if (childEditPart instanceof <%=labelEditPart%>) {
			((<%=labelEditPart%>) childEditPart).<%=childSetterName%>(getPrimaryShape().<%=childViewmap.getGetterName()%>());
			return true;
		}
<%
}

for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%	
} // for pinned compartments
%>
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
<%
//XXX: ignore labels assuming that they never may be removed
for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>		
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			pane.remove(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%
} // for pinned compartments
%>
		return false;
	}
<%
} // if myHelper.hasFixedChildren()
%>

	/**
	 * Returns the label which should be direct-edited by default.
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getPrimaryLabelEditPart() {
<%
		if (myHelper.getPrimaryLabel() != null) {
%>
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
				return (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getViewer().getEditPartRegistry().get(nextChild);
			}
		}
<%
		}
%>
		return null;
	}

	/**
	 * @generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT.equals(req.getType())) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit;
			if (req instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) {
				labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
			} else {
				labelToEdit = getPrimaryLabelEditPart();
			}
			if (labelToEdit != null) {
				labelToEdit.performRequest(req);
			}
		}
<%@include file="performOpen.jetinc"%>
		super.performRequest(req);
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getLabelEditPart(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> req) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> result = getViewer().findObjectAt(req.getLocation());
		if (result != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) result.getModel();
			if (getDiagramNode().getChildren().contains(view)) {
				int visualId = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
				switch (visualId) {
<%
		for (Iterator it = myHelper.getAllLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}
%>
				case <%=importManager.getImportedName(genLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return result;
<%
		}
%>
				}
			}
		}
		return getPrimaryLabelEditPart();
	}

<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @generated
	 */
	public boolean isExternalLabel(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for (Iterator externalLabels = myHelper.getExternalLabels(); externalLabels.hasNext();) {
		GenNodeLabel next = (GenNodeLabel) externalLabels.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getExternalLabelsContainer() {
		<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%> root = (<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%>) getRoot();
		return root.getLayer(<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER);
	}

<%
}
if (!genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @generated
	 */
	public boolean isDirectChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for(Iterator directChildren = genNode.getChildNodes().iterator(); directChildren.hasNext(); ) {
		GenChildNode next = (GenChildNode) directChildren.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}
<%
}
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren() || myHelper.hasBothChildrenAndCompartments()) {
%>

	/**
	 * @generated
	 */
	protected void addChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart, int index) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().add(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()) {
%>
		if (addFixedChild(childEditPart)) {
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.add(childFigure);
			return;
		}
<%
	}
%>
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().remove(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()){
%>
		if (removeFixedChild(childEditPart)){
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.remove(childFigure);
			return;
		}
<%
	}
%>
		super.removeChildVisual(childEditPart);
	}
<%
}
%>
<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @generated
	 */
	public void removeNotify() {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			if (isExternalLabel(childEditPart)) {
				IFigure labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
				getExternalLabelsContainer().remove(labelFigure);
			}
		}
		super.removeNotify();
	}
<%
}
%>

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
		refreshBackgroundColor();
		refreshForegroundColor();
		refreshFont();
		refreshVisibility();
	}

	/**
	 * @generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = getDiagramNode().isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @generated
	 */
	protected void refreshBounds() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> node = getDiagramNode();
		if (node.getLayoutConstraint() == null) {
			return;
		}
		assert node.getLayoutConstraint() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>;
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>) node.getLayoutConstraint();
		int x = bounds.getX();
		int y = bounds.getY();
		int width = bounds.getWidth();
		int height = bounds.getHeight();
		if (width < 0) {
			x -= width;
			width = -width;
		}
		if (height < 0) {
			y -= height;
			height = -height;
		}
		((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) getParent()).setLayoutConstraint(this, getFigure(), 
			new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(x, y, width, height));
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return getDiagramNode().getVisibleChildren();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelSourceConnections() {
		return getDiagramNode().getSourceEdges();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelTargetConnections() {
		return getDiagramNode().getTargetEdges();
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @generated
	 */
	public Object getAdapter(Class key) {
<%
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
%>
		if (<%=importManager.getImportedName("org.eclipse.gef.SnapToHelper")%>.class == key) {
			return new <%=importManager.getImportedName("org.eclipse.gef.SnapToGrid")%>(this);
		}
<%
}
%>
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
<%/*@ include file="adapters/propertySource.javajetinc"*/%>
		return super.getAdapter(key);
	}

	/**
	 * @generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @generated
	 */
	public void deactivate() {
<%
if (myHelper.containsLinks()) {
%>
		uninstallLinkNotationModelRefresher();
<%
}
%>
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		uninstallNotationModelRefresher();
<%
}
%>
		getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
		super.deactivate();
	}
<%
{
	final String _getViewCode = "getDiagramNode()";
	final String _getDiagramCode = "getDiagramNode().getDiagram()";
	final boolean _includeUncontainedLinks = false;
	if (!genNode.getChildNodes().isEmpty()) {
		final boolean isListLayout = !isXYLayout;
		final List childNodes = genNode.getChildNodes();
%>
<%@ include file="notationModelRefresher.jetinc"%>
<%
	}
%>
<%@ include file="linkNotationModelRefresher.jetinc"%>
<%
}	//end of local declarations
%>

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%@ include file="refreshers.javajetinc/externalRefreshers.javajetinc"%>
<%@ include file="refreshers.javajetinc/external.jetinc"%>

<%
	final String primaryView = "getDiagramNode()";
%>
<%@ include file="refreshMethods/font.javajetinc"%>

<%@ include file="refreshMethods/shapeColor.javajetinc"%>

<%@ include file="refresher.javajetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new <%=importManager.getImportedName("java.util.HashMap")%>();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@ include file="refreshers.javajetinc/bounds.javajetinc"%>
<%@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@ include file="refreshers.javajetinc/sourceEdges.javajetinc"%>
<%@ include file="refreshers.javajetinc/targetEdges.javajetinc"%>
<%@ include file="refreshers.javajetinc/font.javajetinc"%>
<%@ include file="refreshers.javajetinc/shapeColor.javajetinc"%>
	}

<%
if (genNode.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genNode.getViewmap()).getClassBody();
%>
<%=classBody%>
<%@ include file="mapmodeWorkaround.javajetinc"%>
<%
}
%>

	/**
	 * @generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramNode(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @generated
		 */
		protected void createEditPolicies() {
<%@ include file="treeComponentEditPolicy.javajetinc"%>
<%
if (myHelper.getPrimaryLabel() != null) {
%>
<%@ include file="directEditPolicy.javajetinc"%>
<%
}
%>
		}

<%
if (myHelper.getPrimaryLabel() != null) {
%>
		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer")%> createLabelTextDisplayer() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelTextDisplayer();
			}
			return super.createLabelTextDisplayer();
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelIcon();
			}
			return null;
		}

		/**
		 * @generated
		 */
		private <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> getPrimaryLabelEditPart() {
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return (<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>) <%=genNode.getEditPartClassName()%>.this.getViewer().getEditPartRegistry().get(nextChild);
				}
			}
			return null;
		}
<%
}
%>

		/**
		 * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well.
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%> style = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%>) next.getStyle(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getDrawerStyle());
				if (style != null && style.isCollapsed()) {
					continue;
				}
				switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next)) {
<%
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.add(next);
					break;
<%
}
%>
<%
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.addAll(next.getChildren());
					break;
<%
}
%>
				}
			}
			result.addAll(getDiagramNode().getSourceEdges());
			return result;
		}
	}
}
<%importManager.emitSortedImports();%>
