<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="ChildNodeEditPartGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenChildLabelNode genChildNode = (GenChildLabelNode)genElement;
GenNode genHost = genChildNode;
GenNode genNode = genChildNode;	/*var used by componentEditPolicy.javajetinc*/
GenClass underlyingMetaClass = genHost.getDomainMetaClass();
GenDiagram genDiagram = genChildNode.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
LabelModelFacet labelModelFacet = genChildNode.getLabelModelFacet();
final boolean isReadOnly = genChildNode.isLabelReadOnly();
%>
<%@ include file="../copyright4java.jetinc"%>

<%@ include file="../common/featureGetAccessor.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);
importManager.registerInnerClass("TreeEditPartAdapter");

importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gmf.runtime.notation.NotationPackage");
importManager.addImport("java.util.List");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genChildNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController")%> {
<%{
GenCommonBase genCommonBase = genChildNode;%>
<%@ include file="visualID.jetinc"%>
<%}%>

<%@ include file="textAwareFields.jetinc"%>

	/**
	 * @generated
	 */
	public <%=genChildNode.getEditPartClassName()%>(View view) {
		setModel(view);
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

<%@ include file="registerModel.jetinc"%>

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%
	String resolvedSemanticElement = "(" + importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()) + ") getDiagramNode().getElement()";
	final String primaryView = "getDiagramNode()";
%>
<%
if (!isReadOnly) {
%>
<%@ include file="directEditPolicy.javajetinc"%>
<%
}
%>
<%@ include file="componentEditPolicy.javajetinc"%>
<%{
GenCommonBase genCommonBase = genChildNode;%>
<%@ include file="customBehaviour.jetinc"%>
<%@include file="openEditPolicy.jetinc"%>
<%}%>
	}

<%@ include file="labelPerformRequest.jetinc"%>
<%
if (!isReadOnly) {
%>
<%@ include file="directEdit.javajetinc"%>
<%
}
%>
<%@ include file="refreshers.javajetinc/external.jetinc"%>
	/**
	 * @generated
	 */
	protected List getModelChildren() {
		return ((View)getModel()).getVisibleChildren();
	}

	/**
	 * @generated
	 */
	protected List getModelSourceConnections() {
		return ((View)getModel()).getSourceEdges();
	}

	/**
	 * @generated
	 */
	protected List getModelTargetConnections() {
		return ((View)getModel()).getTargetEdges();
	}

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLabel();
		refreshFont();
		refreshFontColor();
		refreshVisibility();
	}

	/**
	 * @generated
	 */
	protected void refreshLabel() {
		getLabel().setText(getLabelText());
		getLabel().setIcon(getLabelIcon());
	}
<%@ include file="labelText.javajetinc"%>
<%@ include file="refreshMethods/font.javajetinc"%>
<%@ include file="refreshMethods/fontColor.javajetinc"%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getLabelIcon() {
<%
if (genChildNode.isLabelElementIcon()) {
%>
		return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImage(getDiagramNode().getElement().eClass());
<%
} else {
%>
		return null;
<%
}
%>
	}

	/**
	 * @generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = getDiagramNode().isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
<%/*@ include file="adapters/propertySource.javajetinc"*/%>
		return super.getAdapter(key);
	}

	/**
	 * @generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		addExternalRefresher(getLabelRefresher());
		getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
	}

	/**
	 * @generated
	 */
	public void deactivate() {
		getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
		removeExternalRefresher(getLabelRefresher());
		super.deactivate();
	}

<%@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%@ include file="refresher.javajetinc"%>

<%@ include file="refreshers.javajetinc/labelRefresher.jetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@ include file="refreshers.javajetinc/font.javajetinc"%>
<%@ include file="refreshers.javajetinc/fontColor.javajetinc"%>
	}

<%
final Viewmap viewmap = genChildNode.getViewmap();
%>
<%@ include file="labelFigure.jetinc"%>

	/**
	 * @generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramNode(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @generated
		 */
		protected void createEditPolicies() {
<%@ include file="treeComponentEditPolicy.javajetinc"%>
<%
if (!isReadOnly) {
%>
<%@ include file="directEditPolicy.javajetinc"%>
<%
}
%>
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer")%> createLabelTextDisplayer() {
			return <%=genChildNode.getEditPartClassName()%>.this.getLabelTextDisplayer();
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage() {
			return getLabelIcon();
		}

		/**
		 * @generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
	}
}
<%importManager.emitSortedImports();%>
