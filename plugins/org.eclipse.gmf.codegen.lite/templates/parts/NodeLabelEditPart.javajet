<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="NodeLabelEditPartGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenNodeLabel genLabel = (GenNodeLabel) genElement;
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenNode genHost = genLabel.getNode();
GenClass underlyingMetaClass = genHost.getDomainMetaClass();
GenDiagram genDiagram = genLabel.getDiagram();
LabelModelFacet labelModelFacet = genLabel.getModelFacet();
final boolean isReadOnly = genLabel.isReadOnly();
%>
<%@ include file="../copyright4java.jetinc"%>

<%@ include file="../common/featureGetAccessor.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
 <%
 	boolean isExternal;
 	String baseClass;
 	if (genLabel instanceof GenExternalNodeLabel) {
 		isExternal = true;
 		baseClass = genDiagram.getBaseExternalNodeLabelEditPartQualifiedClassName();
 	} else {
 		isExternal = false;
 		baseClass = "org.eclipse.gef.editparts.AbstractGraphicalEditPart";
 	}
 %>
public class <%=genLabel.getEditPartClassName()%> extends <%=importManager.getImportedName(baseClass)%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController")%> {
<%{
GenCommonBase genCommonBase = genLabel;%>
<%@ include file="visualID.jetinc"%>
<%}%>
<%@ include file="textAwareFields.jetinc"%>

	/**
	 * @generated
	 */
	public <%=genLabel.getEditPartClassName()%>(View view) {
<%
if (isExternal) {
%>
		super(view);
<%
} else {
%>
		setModel(view);
<%
}
%>
	}

<%
if (!isExternal) {
%>
	/**
	 * @generated
	 */
	public boolean isSelectable() {
		return false;
	}
<%
}
%>

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%
	final String primaryView = "getUpdatableParent().getDiagramNode()";
	final String resolvedSemanticElement = "resolveSemanticElement()";
	if (!isReadOnly) {
%>
<%@ include file="directEditPolicy.javajetinc"%>
<%
	}
%>
<%{
GenCommonBase genCommonBase = genLabel;%>
<%@ include file="customBehaviour.jetinc"%>
<%@include file="openEditPolicy.jetinc"%>
<%}%>
	}

<%@ include file="labelPerformRequest.jetinc"%>
<%
	if (!isReadOnly) {
%>
<%@ include file="directEdit.javajetinc"%>
<%
	}
%>

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLabel();
		refreshFont();
		refreshFontColor();
	}

	/**
	 * @generated
	 */
	protected void refreshLabel() {
		getLabel().setText(getLabelText());
		getLabel().setIcon(getLabelIcon());
	}

<%@ include file="labelText.javajetinc"%>
<%@ include file="refreshMethods/font.javajetinc"%>
<%@ include file="refreshMethods/fontColor.javajetinc"%>

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getLabelIcon() {
<%
if (genLabel.isElementIcon()) {
%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> semanticElement = <%if (genHost.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>resolveSemanticElement();
		if (semanticElement != null) {
			return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImage(semanticElement.eClass());
		}
<%
}
%>
		return null;
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%> resolveSemanticElement() {
		View view = (View) getModel();
		return (view.getElement() instanceof <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) ? (<%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) view.getElement() : null;
	}

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genHost.getEditPartQualifiedClassName())%> getUpdatableParent() {
		for(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {
			if (editPart instanceof <%=importManager.getImportedName(genHost.getEditPartQualifiedClassName())%>) {
				return (<%=importManager.getImportedName(genHost.getEditPartQualifiedClassName())%>) editPart;
			}
		}
		return null;
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		<%=importManager.getImportedName(genHost.getEditPartQualifiedClassName())%> updatableParent = getUpdatableParent();
		if (updatableParent != null) {
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontHeight(), fontRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontName(), fontRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_Bold(), fontRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_Italic(), fontRefresher);
<%
if (isExternal) {
%>
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X(), boundsRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y(), boundsRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width(), boundsRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height(), boundsRefresher);
			updatableParent.addRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);
<%
}
%>
			updatableParent.addExternalRefresher(getLabelRefresher());
		}
	}

	/**
	 * @generated
	 */
	public void deactivate() {
		super.deactivate();
		<%=importManager.getImportedName(genHost.getEditPartQualifiedClassName())%> updatableParent = getUpdatableParent();
		if (updatableParent != null) {
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontHeight(), fontRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_FontName(), fontRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_Bold(), fontRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle_Italic(), fontRefresher);
<%
if (isExternal) {
%>
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X(), boundsRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y(), boundsRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width(), boundsRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height(), boundsRefresher);
			updatableParent.removeRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);
<%
}
%>
			updatableParent.removeExternalRefresher(getLabelRefresher());
		}
	}

<%@ include file="refreshers.javajetinc/labelRefresher.jetinc"%>

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>.Refresher fontColorRefresher = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>.Refresher() {
		public void refresh() {
			refreshFontColor();
		}
	};

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>.Refresher fontRefresher = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>.Refresher() {
		public void refresh() {
			refreshFont();
		}
	};
<%
final Viewmap viewmap = genLabel.getViewmap();
%>
<%@ include file="labelFigure.jetinc"%>
}
<%importManager.emitSortedImports();%>
