<%@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="CompartmentEditPartGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
GenNode genHost = genCompartment.getNode();
GenDiagram genDiagram = genCompartment.getDiagram();
List childNodes = genCompartment.getChildNodes();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
%>
<%@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.commands.CompoundCommand");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.requests.CreateRequest");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @generated
 */
public class <%=genCompartment.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements IUpdatableEditPart {
<%{
GenCommonBase genCommonBase = genCompartment;%>
<%@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @generated
	 */
	public <%=genCompartment.getEditPartClassName()%>(View view) {
		setModel(view);
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return getDiagramNode().getChildren();
	}

	/**
	 * @generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

	/**
	 * @generated
	 */
	protected void createEditPolicies() {
<%if (!genCompartment.isListLayout()) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.XYLayoutEditPolicy")%>() {
			protected Command createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, final EditPart child, Object constraint) {
				final Node node = (Node) child.getModel();
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> emfCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>("Change node position/size") {
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> moveDelta;
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resizeDelta;

					public boolean canUndo() {
						return canExecute();
					}
					protected boolean prepare() {
						if (node.getLayoutConstraint() instanceof Bounds == false) {
							return false;
						}
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> original = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
						<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> referenceFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>)child).getFigure();
						referenceFigure.translateToAbsolute(original);
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> transformed = request.getTransformedRectangle(original);
						referenceFigure.translateToRelative(transformed);
						referenceFigure.translateToRelative(original);
						resizeDelta = transformed.getSize().expand(original.getSize().negate());
						moveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());
						return true;
					}
					public void undo() {
						execute(moveDelta.getNegated(), resizeDelta.getNegated());
					}
					public void execute() {
						execute(moveDelta, resizeDelta);
					}
					public void redo() {
						execute();
					}
					private void execute(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> move, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resize) {
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						bounds.setX(bounds.getX() + move.x);
						bounds.setY(bounds.getY() + move.y);
						bounds.setWidth(bounds.getWidth() + resize.width);
						bounds.setHeight(bounds.getHeight() + resize.height);
					}
				};
				return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(node.getDiagram().getElement()), emfCommand);
			}
			protected Command createChangeConstraintCommand(EditPart child, Object constraint) {
				assert false;
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%} else {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy")%>() {
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> rect) {
				return null;
			}
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
				return null;
			}
			protected Command createChangeConstraintCommand(EditPart child, Object constraint) {
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%}%>
			protected Command getCreateCommand(CreateRequest request) {
<%if (null != genDiagram.getPalette()) {
final Palette palette = genDiagram.getPalette();%>
				if (request instanceof <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) {
					<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx requestEx = (<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) request;
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for(int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
%>
						case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.append(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command((View) getModel(), requestEx<%if (!genCompartment.isListLayout()) {%>, 
								(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>)getConstraintFor(request)<%}%>));
							break;
<%
}
%>
						}
					}
					return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((View) getModel()).getDiagram().getElement()), result);
				}
<%}/*when there's palette*/%>
				return null;
			}
		});
		installNotationModelRefresher();
	}

	/**
	 * @generated
	 */
	protected String getTitleName() {
		return "<%=genCompartment.getTitle()%>";
	}

	/**
	 * @generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.LabeledContainer")%> result = new <%=importManager.getImportedName("org.eclipse.draw2d.LabeledContainer")%>();
		result.setLabel(getTitleName());
		result.setOpaque(false);
		result.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.StackLayout")%>());
		<%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%> scrollPane = new <%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%>();
		result.add(scrollPane);
<%if (genCompartment.isListLayout()) {%>
		<%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%> viewport = new <%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%>();
		contentPane = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		contentPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout")%>());
<%} else {%>
		<%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%> viewport = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformViewport")%>();
		contentPane = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%>();
		contentPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayout")%>());
<%}%>
		viewport.setContents(contentPane);
		scrollPane.setViewport(viewport);
		return result;
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		return contentPane;
	}

	/**
	 * @generated
	 */
	private IFigure contentPane;

	/**
	 * @generated
	 */
	private <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%> resolveSemanticElement() {
		View view = getDiagramNode();
		return (view.getElement() instanceof <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) ? (<%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) view.getElement() : null;
	}

	/**
	 * @generated
	 */
	public void activate() {
		super.activate();
		installNotationModelRefresher();
	}

	/**
	 * @generated
	 */
	public void deactivate() {
		uninstallNotationModelRefresher();
		super.deactivate();
	}

<%
{
String _getViewCode = "getDiagramNode()";
String _getDiagramCode = _getViewCode + ".getDiagram()";
String _getSemanticElementCode = "resolveSemanticElement()";
boolean isListLayout = genCompartment.isListLayout();
%>
<%@ include file="notationModelRefresher.jetinc"%>
<%
}
%>

<%@ include file="refresher.javajetinc"%>

	/**
	 * @generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@ include file="refreshers.javajetinc/visibility.javajetinc"%>
	}

	/**
	 * @generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
//XXX:		refreshBackgroundColor();
//XXX:		refreshForegroundColor();
//XXX:		refreshFont();
		refreshVisibility();
	}

	/**
	 * @generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = ((View)getModel()).isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

<%
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = false;
	boolean isListLayout = genCompartment.isListLayout();
	String resolvedSemanticElement = "resolveSemanticElement()";
%>
<%@ include file="createNodeCommand.javajetinc"%>
<%
}
%>
}

<%importManager.emitSortedImports();%>
