		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.COMPONENT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy")%>() {
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createDeleteCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.GroupRequest")%> deleteRequest) {
				final Edge edgeToRemove = getDiagramEdge();
				final View source = edgeToRemove.getSource();
				final View target = edgeToRemove.getTarget();
				<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramEdge().getDiagram().getElement());
				<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> cc = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
				cc.append(createDomainModelRemoveCommand(editingDomain));
				cc.append(new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
					public boolean canExecute() {
						return source != null && edgeToRemove != null;
					}
					public boolean canUndo() {
						return source != null && edgeToRemove != null;
					}
					public void undo() {
						source.getDiagram().insertEdge(edgeToRemove);
						edgeToRemove.setSource(source);
						edgeToRemove.setTarget(target);
					}
					public void redo() {
						execute();
					}
					public void execute() {
						source.getDiagram().removeEdge(edgeToRemove);
						edgeToRemove.setSource(null);
						edgeToRemove.setTarget(null);
					}
				});
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(editingDomain, cc);
			}
<%
{
	String _edge = "getDiagramEdge()";
%>
<%@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
}	//local declarations
%>
		});
