			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> sourceView = getViewService().findView(linkDescriptor.getSource());
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> targetView = getViewService().findView(linkDescriptor.getDestination());
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator")%> decorator = null;
			if (sourceView == null || targetView == null) {
				return null;
			}
			switch (linkDescriptor.getVisualID()) {
<%
	for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}
%>
			case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
				if (linkDescriptor.getElement() instanceof <%=importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName())%>) {
					decorator = <%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.INSTANCE;
				}
				break;
<%
	}
	for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
%>
			case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
				if (linkDescriptor.getElement() == null) {
					decorator = <%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.INSTANCE;
				}
				break;
<%
	}
%>
			}
			if (decorator == null) {
				return null;
			}
			return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand")%>(<%=_diagramCode%>, linkDescriptor.getElement(), sourceView, targetView, decorator);
