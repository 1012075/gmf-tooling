<%@ jet package="org.eclipse.gmf.graphdef.codegen.standalone.templates" class="PluginActivatorGenerator"
	imports="org.eclipse.gmf.graphdef.codegen.* org.eclipse.gmf.common.codegen.ImportAssistant"%>
<%
final Object[] passedArgs = (Object[]) argument;
final StandaloneGenerator.Config config = (StandaloneGenerator.Config) passedArgs[0];
final ImportAssistant importManager = (ImportAssistant) passedArgs[1];

importManager.emitPackageStatement(stringBuffer);
%>

import org.eclipse.core.runtime.Plugin;

<%
if (config.needsMapMode()){
%>
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeTypes;
<%
}
%>

import org.osgi.framework.BundleContext;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=config.getPluginActivatorClassName()%> extends Plugin {

<%
if (config.needsMapMode()){
%>
	private IMapMode myMapMode = MapModeTypes.IDENTITY_MM;
<%
}
%>

	/**
	 * @generated
	 */
	public static final String ID = "<%=config.getPluginID()%>"; //$NON-NLS-1$

	/**
	 * @generated
	 */
	private static <%=config.getPluginActivatorClassName()%> ourInstance;

	/**
	 * @generated
	 */
	public <%=config.getPluginActivatorClassName()%>() {
	}

	/**
	 * @generated
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		if (ourInstance != null){
			throw new IllegalStateException("Plugin: " + ID + " already started");
		}
		ourInstance = this;
	}

	/**
	 * @generated
	 */
	public void stop(BundleContext context) throws Exception {
		if (ourInstance == null){
			throw new IllegalStateException("Plugin: " + ID + " is not started");
		}
		ourInstance = null;
		super.stop(context);
	}
	
<%
if (config.needsMapMode()){
%>
	/**
	 * @generated
	 */
	public void setMapMode(IMapMode mapMode) {
		myMapMode = mapMode;
		if (myMapMode == null){
			myMapMode = MapModeTypes.IDENTITY_MM;
		}
	}

	/**
	 * @generated
	 */
	public IMapMode getMapMode() {
		return myMapMode;
	}

<%
}
%>

	/**
	 * @generated
	 */
	public static <%=config.getPluginActivatorClassName()%> getDefault() {
		return ourInstance;
	}
}
<%importManager.emitSortedImports();%>
