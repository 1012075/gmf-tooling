<%@ jet package="org.eclipse.gmf.graphdef.codegen.templates" class="TopGenerator" 
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.* org.eclipse.emf.ecore.* java.util.Iterator org.eclipse.emf.ecore.util.EcoreUtil; "%>
<%
Object[] args = (Object[]) argument;
Figure figure = (Figure) args[0];
final GraphDefDispatcher /*inner*/dispatcher = (GraphDefDispatcher) args[1];
final GraphDefDispatcher topDispatcher = (GraphDefDispatcher) args[2];
final boolean isStaticFieldsOutsideClassBody = ((Boolean) args[3]).booleanValue();

class Asserter {
	void makeAssert(boolean checkTrue){
		assert checkTrue;
		//temporarily use more forced way to ensure assertion
		//TODO: replace with single assert 
		if (!checkTrue){
			throw new IllegalStateException("Enable Assertions");
		}
	}
}

final Asserter myAsserter = new Asserter();
myAsserter.makeAssert(topDispatcher.getImportManager() == /*inner*/dispatcher.getImportManager());
myAsserter.makeAssert(topDispatcher.getFQNSwitch() == /*inner*/dispatcher.getFQNSwitch());

final ImportAssistant importManager = topDispatcher.getImportManager();
final FigureQualifiedNameSwitch fqnSwitch = topDispatcher.getFQNSwitch();
%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=fqnSwitch.get(figure, importManager)%> {

<%@ include file="scalablePolygonAsInnerClass.jetinc"%>

<% /*NOTE: class structure is selected by topDispatcher, but children, attributes etc -- by inner dispatcher*/ %>
<%=topDispatcher.dispatch(figure, new Object[] {
		/*inner*/dispatcher.create(figure, "this"), 
		topDispatcher.create(figure, "this")
})%>

<%
if (isStaticFieldsOutsideClassBody){ /*put fields out of inner class body*/ %>
}
	<%@ include file="staticFields.jetinc"%>
<% } else { %>
	<%@ include file="staticFields.jetinc"%>
}
<%}%>
<%importManager.emitSortedImports();%>
