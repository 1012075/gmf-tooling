/**
 */
package org.eclipse.gmf.tooling.examples.compartments.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gmf.tooling.examples.compartments.util.CompartmentsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CompartmentsItemProviderAdapterFactory extends CompartmentsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CompartmentsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.Canvas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CanvasItemProvider canvasItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.Canvas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCanvasAdapter() {
		if (canvasItemProvider == null) {
			canvasItemProvider = new CanvasItemProvider(this);
		}

		return canvasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.TopNodeA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopNodeAItemProvider topNodeAItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.TopNodeA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopNodeAAdapter() {
		if (topNodeAItemProvider == null) {
			topNodeAItemProvider = new TopNodeAItemProvider(this);
		}

		return topNodeAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.TopNodeB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopNodeBItemProvider topNodeBItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.TopNodeB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopNodeBAdapter() {
		if (topNodeBItemProvider == null) {
			topNodeBItemProvider = new TopNodeBItemProvider(this);
		}

		return topNodeBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_E} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfB_EItemProvider childOfB_EItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_E}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfB_EAdapter() {
		if (childOfB_EItemProvider == null) {
			childOfB_EItemProvider = new ChildOfB_EItemProvider(this);
		}

		return childOfB_EItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_G} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfB_GItemProvider childOfB_GItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_G}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfB_GAdapter() {
		if (childOfB_GItemProvider == null) {
			childOfB_GItemProvider = new ChildOfB_GItemProvider(this);
		}

		return childOfB_GItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.TopNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopNodeItemProvider topNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.TopNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopNodeAdapter() {
		if (topNodeItemProvider == null) {
			topNodeItemProvider = new TopNodeItemProvider(this);
		}

		return topNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfA_C} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfA_CItemProvider childOfA_CItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfA_C}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfA_CAdapter() {
		if (childOfA_CItemProvider == null) {
			childOfA_CItemProvider = new ChildOfA_CItemProvider(this);
		}

		return childOfA_CItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_F} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfB_FItemProvider childOfB_FItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfB_F}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfB_FAdapter() {
		if (childOfB_FItemProvider == null) {
			childOfB_FItemProvider = new ChildOfB_FItemProvider(this);
		}

		return childOfB_FItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfAffixed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfAffixedItemProvider childOfAffixedItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfAffixed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfAffixedAdapter() {
		if (childOfAffixedItemProvider == null) {
			childOfAffixedItemProvider = new ChildOfAffixedItemProvider(this);
		}

		return childOfAffixedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfA_D} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildOfA_DItemProvider childOfA_DItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gmf.tooling.examples.compartments.ChildOfA_D}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildOfA_DAdapter() {
		if (childOfA_DItemProvider == null) {
			childOfA_DItemProvider = new ChildOfA_DItemProvider(this);
		}

		return childOfA_DItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (canvasItemProvider != null) canvasItemProvider.dispose();
		if (topNodeAItemProvider != null) topNodeAItemProvider.dispose();
		if (topNodeBItemProvider != null) topNodeBItemProvider.dispose();
		if (childOfB_EItemProvider != null) childOfB_EItemProvider.dispose();
		if (childOfB_GItemProvider != null) childOfB_GItemProvider.dispose();
		if (topNodeItemProvider != null) topNodeItemProvider.dispose();
		if (childOfA_CItemProvider != null) childOfA_CItemProvider.dispose();
		if (childOfB_FItemProvider != null) childOfB_FItemProvider.dispose();
		if (childOfAffixedItemProvider != null) childOfAffixedItemProvider.dispose();
		if (childOfA_DItemProvider != null) childOfA_DItemProvider.dispose();
	}

}
